 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
MyProgram
	; LineNumber: 1240
	jmp block1
	; LineNumber: 3
Key_temp	dc.b	0
	; LineNumber: 5
Key_keyState	dc.b	0
	; LineNumber: 7
Key_KeyRow = $e810
	; LineNumber: 8
Key_KeyRead = $e812
	; LineNumber: 9
Key_KeyInterrupt = $e813
	; LineNumber: 12
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 13
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 14
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 144
Key_screencodes	
	dc.b	$21, $23, $25, $26, 40, 69, 72, 74, 34
	dc.b	$24, $27, , 41, 255, 73, 75, $11, $05
	dc.b	$14, $15, $0f, 70, $37, $39, $17, $12, $19
	dc.b	$09, $10, 255, $38, $2f, $01, $04, $07, $0a
	dc.b	$0c, 255, $34, $36, $13, $06, $08, $0b, $3a
	dc.b	255, $35, $2a, $1a, $03, $02, $0d, $3b, 71
	dc.b	$31, $33, $18, $16, $0e, 44, $3f, 255, $32
	dc.b	$2b, 255, $00, $1d, 255, $3e, 255, $30, $2d
	dc.b	67, $1b, $20, $3c, 68, 255, $2e, $3d, 0
	; LineNumber: 29
PLAY_SOUND	dc.b	$01
	; LineNumber: 218
petscii_pointer	= $02
	; LineNumber: 311
petscii2	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0ec, $0e2, $0e2, $07f
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0ec, $07e, $020, $020, $020, $020
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0e2, $020, $020, $020, $020, $020, $020
	dc.b $07c, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ec, $020, $06c, $0a0, $07b, $020, $06c, $0a0
	dc.b $07b, $0fb, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $020, $061, $020, $0fe, $020
	dc.b $061, $07c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $07c, $0a0, $07e, $020, $0fc, $06c
	dc.b $061, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $020, $020, $07c, $0e2
	dc.b $020, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $0e1, $0fe, $07e, $020
	dc.b $020, $06c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e1, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0e1, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $0ec, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07f, $062, $020, $020, $020, $020, $020
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0e2, $0fc, $062, $062, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 339
petscii3	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $062, $062, $062, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $0ff, $07e, $020, $020, $07c
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $07e, $020, $020, $020, $020, $020
	dc.b $0e1, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fe, $020, $020, $062, $020, $020, $020, $062
	dc.b $020, $0fc, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $0e2, $061, $020, $0e1, $0e2
	dc.b $061, $0e1, $07b, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $062, $061, $020, $0ec, $020
	dc.b $061, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $0e2, $020, $020, $0fb, $0fe
	dc.b $07e, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $06c, $06c, $07b, $020
	dc.b $020, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $07c, $0e2, $020, $020
	dc.b $020, $0e1, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $061, $020, $020, $020, $020, $020, $020
	dc.b $06c, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07c, $0fb, $062, $07b, $020, $020, $062
	dc.b $0e2, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e2, $0e2, $0e2, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 367
petscii4	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0ec, $0e2, $0e2, $07f
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $0ec, $07e, $020, $020, $020, $020
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0e2, $020, $020, $020, $020, $020, $020
	dc.b $07c, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ec, $020, $06c, $0a0, $07b, $020, $06c, $0a0
	dc.b $07b, $0fb, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $020, $061, $020, $0fe, $020
	dc.b $061, $07c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $07c, $0a0, $07e, $020, $0fc, $06c
	dc.b $061, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $020, $020, $07c, $0e2
	dc.b $020, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $0e1, $0fe, $07e, $020
	dc.b $020, $06c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e1, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0e1, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $0ec, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07f, $062, $020, $020, $020, $020, $020
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0e2, $0fc, $062, $062, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 395
petscii5	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $062, $062, $062, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $0ff, $07e, $020, $020, $07c
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $07e, $020, $020, $020, $020, $020
	dc.b $0e1, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fe, $020, $020, $062, $020, $020, $020, $062
	dc.b $020, $0fc, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $0e2, $061, $020, $0e1, $0e2
	dc.b $061, $0e1, $07b, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $062, $061, $020, $0ec, $020
	dc.b $061, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $0e2, $020, $020, $0fb, $0fe
	dc.b $07e, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $06c, $06c, $07b, $020
	dc.b $020, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $07c, $0e2, $020, $020
	dc.b $020, $0e1, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $061, $020, $020, $020, $020, $020, $020
	dc.b $06c, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $07c, $0fb, $062, $07b, $020, $020, $062
	dc.b $0e2, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e2, $0e2, $0e2, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 423
petscii6	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $062, $062, $062, $07b
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $062, $0ff, $07e, $020, $020, $07c
	dc.b $0fc, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $0e2, $020, $020, $020, $020, $020, $020
	dc.b $07c, $061, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ec, $020, $06c, $0a0, $07b, $020, $06c, $0a0
	dc.b $07b, $0fb, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $020, $061, $020, $0fe, $020
	dc.b $061, $07c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $07c, $0a0, $07e, $020, $0fc, $06c
	dc.b $061, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $06c, $06c, $07b, $020
	dc.b $020, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $07c, $0e2, $020, $020
	dc.b $020, $0e1, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07f, $062, $020, $020, $020, $020, $020
	dc.b $062, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $07c, $0e2, $0fc, $062, $062, $0ec
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 452
petscii7	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $062, $062, $062, $062, $062
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0e2, $07e, $020, $020, $020, $07c
	dc.b $0fb, $07b, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $06c, $062, $07b, $020, $06c, $062
	dc.b $07b, $07f, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $0e1, $020, $061, $020, $0fe, $062
	dc.b $061, $07c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $07c, $0e2, $07e, $020, $07e, $020
	dc.b $07e, $020, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $061, $020, $020, $020, $0e1, $0fe, $07e, $020
	dc.b $020, $06c, $061, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0fe, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07f, $062, $07b, $020, $020, $020, $06c
	dc.b $062, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07c, $0e2, $0e2, $0e2, $07e
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $06c, $062, $0e2, $06c, $0ff, $0e2, $020
	dc.b $06c, $062, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $07e, $06c, $0ec, $07f, $0ec, $07e, $0fe
	dc.b $0e2, $020, $062, $0ec, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0e2, $020
	dc.b $020, $07c, $07e, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 480
test	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 509
yu	dc.b	0
	; LineNumber: 510
kk	dc.w	0
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key__GetKeyOffset
	;    Procedure type : User-defined procedure
	; LineNumber: 175
	; LineNumber: 174
	; LineNumber: 174
Key__GetKeyOffset_block4
Key__GetKeyOffset
	; LineNumber: 178
	; ****** Inline assembler section
	
	; pass with _a containing key to check 1, 2, 4, 8, 16, 32, 64, 128
	; and y the row offset 0 - 9
	tax ; temp store key
	
	tya ; multiply row offset by 8 to find starting pos in array
	asl
	asl
	asl ; *8
	sta TEMP_VAR1
	
	; use temporary variable as a pointer
	lda #>Key_screencodes
	sta TEMP_VAR2+1 ; high byte
	lda #<Key_screencodes
	sta TEMP_VAR2 ; low byte
	
	clc
	adc TEMP_VAR1
	sta TEMP_VAR2
	bcc getKey_NoOverflow
	inc TEMP_VAR2+1 ; byte overflow, update high byte
	
getKey_NoOverflow
	; then work out the offest 0 - 7
	txa ; the key
	
	ldy #0  ; count the number of shifts
	ldx #8	; test all 8 bits
getKey_testLoop
	lsr ; bit put in carry
	bcs getKey_foundBit
	iny	; counter for next bit to test
	dex	; 
	bne getKey_testLoop
	
getKey_foundBit
	; x has the bit 0-7 or 8 if not found
	cpy #8
	beq getKey_NotFound
	
	lda (TEMP_VAR2),y  ; load screencode + bit offset
	rts 
	
getKey_NotFound
	lda #KEY_NOKEY ; not found
	
	; LineNumber: 230
	rts
	;*
; //Read the full 10 row keyboard matrix 
; //and populate the keyboard flags
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 261
Key_Read
	; LineNumber: 263
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 292
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop6
	; LineNumber: 266
	; LineNumber: 268
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 270
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 291
Key_Read_forloopcounter8
Key_Read_loopstart9
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop6
Key_Read_loopdone13: ;keep
Key_Read_forloopend7
Key_Read_loopend10
	; LineNumber: 293
	rts
	;*
; //Gets a key being held. If multiple keys 
; //are pressed, returns the first key found.
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_GetHeld
	;    Procedure type : User-defined procedure
	; LineNumber: 326
Key_GetHeld
	; LineNumber: 335
	; Assigning single variable : Key_temp
	lda #$0
	; Calling storevariable
	sta Key_temp
Key_GetHeld_forloop15
	; LineNumber: 329
	; LineNumber: 331
	
; //addbreakpoint();
	; Assigning memory location
	; Assigning single variable : $5e
	; Assigning register : _a
	; Load Byte array
	ldx Key_temp
	lda Key_keys,x
	; Assigning register : _y
	ldy Key_temp
	jsr Key__GetKeyOffset
	; Calling storevariable
	sta $5e
	; LineNumber: 332
	; Binary clause Simplified: NOTEQUALS
	; Compare with pure num / var optimization
	cmp #$ff;keep
	beq Key_GetHeld_elsedoneblock31
Key_GetHeld_ConditionalTrueBlock29: ;Main true block ;keep 
	; LineNumber: 331
	lda $5e
	rts
Key_GetHeld_elsedoneblock31
	; LineNumber: 334
Key_GetHeld_forloopcounter17
Key_GetHeld_loopstart18
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_GetHeld_forloop15
Key_GetHeld_loopdone34: ;keep
Key_GetHeld_forloopend16
Key_GetHeld_loopend19
	; LineNumber: 337
	
; // no key held!
	lda #$ff
	rts
	; LineNumber: 339
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_SetupScreenCodes
	;    Procedure type : User-defined procedure
	; LineNumber: 342
Key_SetupScreenCodes
	; LineNumber: 344
	; Assigning memory location
	; Assigning single variable : $5e
	; Load Unknown type array
	ldx #$0
	lda Key_screencodes,x
	; Calling storevariable
	sta $5e
	; LineNumber: 346
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : _ti
	;    Procedure type : User-defined procedure
	; LineNumber: 530
	; LineNumber: 529
ti_temp	dc.w	0
_ti_block36
_ti
	; LineNumber: 531
	; Assigning single variable : ti_temp
	ldy #0
	lda #$0
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 532
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var39 = $54
	sta _ti_rightvarInteger_var39
	sty _ti_rightvarInteger_var39+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8D + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	sta mul16x8_num1
	sty mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var39
_ti_wordAdd37
	sta _ti_rightvarInteger_var39
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var39+1
	tay
	lda _ti_rightvarInteger_var39
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 533
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var42 = $54
	sta _ti_rightvarInteger_var42
	sty _ti_rightvarInteger_var42+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8E + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var42
_ti_wordAdd40
	sta _ti_rightvarInteger_var42
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var42+1
	tay
	lda _ti_rightvarInteger_var42
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 534
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var45 = $54
	sta _ti_rightvarInteger_var45
	sty _ti_rightvarInteger_var45+1
	; Peek
	lda $8F + $0
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var45
_ti_wordAdd43
	sta _ti_rightvarInteger_var45
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var45+1
	tay
	lda _ti_rightvarInteger_var45
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 536
	; LineNumber: 537
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sleep_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 543
	; LineNumber: 541
_old_ti	dc.w	0
	; LineNumber: 541
_new_ti	dc.w	0
sleep_delay_block46
sleep_delay
	; LineNumber: 545
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	lda ti_temp
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 546
	; Assigning single variable : _old_ti
	; integer assignment NodeVar
	ldy _new_ti+1 ; Next one
	; Calling storevariable
	sta _old_ti
	sty _old_ti+1
	; LineNumber: 548
sleep_delay_while47
sleep_delay_loopstart51
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda _new_ti+1   ; compare high bytes
	cmp _old_ti+1 ;keep
	bne sleep_delay_elsedoneblock50
	lda _new_ti
	cmp _old_ti ;keep
	bne sleep_delay_elsedoneblock50
	jmp sleep_delay_ConditionalTrueBlock48
sleep_delay_ConditionalTrueBlock48: ;Main true block ;keep 
	; LineNumber: 549
	; LineNumber: 550
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 551
	jmp sleep_delay_while47
sleep_delay_elsedoneblock50
sleep_delay_loopend52
	; LineNumber: 553
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frame_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 558
	; LineNumber: 557
sleepx	dc.b	0
frame_delay_block55
frame_delay
	; LineNumber: 563
	; Assigning single variable : sleepx
	lda #$1
	; Calling storevariable
	sta sleepx
frame_delay_forloop56
	; LineNumber: 560
	; LineNumber: 561
	jsr sleep_delay
	; LineNumber: 562
frame_delay_forloopcounter58
frame_delay_loopstart59
	; Compare is onpage
	inc sleepx
	lda #$2
	cmp sleepx ;keep
	bcs frame_delay_forloop56
frame_delay_loopdone63: ;keep
frame_delay_forloopend57
frame_delay_loopend60
	; LineNumber: 564
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 593
	; LineNumber: 591
szp	= $04
	; LineNumber: 589
sx	dc.b	0
	; LineNumber: 589
sy	dc.b	0
getat_block64
getat
	; LineNumber: 594
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var67 = $54
	sta getat_rightvarInteger_var67
	sty getat_rightvarInteger_var67+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var70 = $56
	sta getat_rightvarInteger_var70
	sty getat_rightvarInteger_var70+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var70
getat_wordAdd68
	sta getat_rightvarInteger_var70
	; High-bit binop
	tya
	adc getat_rightvarInteger_var70+1
	tay
	lda getat_rightvarInteger_var70
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var67
getat_wordAdd65
	sta getat_rightvarInteger_var67
	; High-bit binop
	tya
	adc getat_rightvarInteger_var67+1
	tay
	lda getat_rightvarInteger_var67
	sta szp
	sty szp+1
	; LineNumber: 595
	; LineNumber: 596
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 602
	; LineNumber: 600
zp	= $04
	; LineNumber: 598
x	dc.b	0
	; LineNumber: 598
y	dc.b	0
	; LineNumber: 598
this_str	= $08
	; LineNumber: 598
str_len	dc.b	0
textat_block71
textat
	; LineNumber: 603
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var74 = $54
	sta textat_rightvarInteger_var74
	sty textat_rightvarInteger_var74+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var77 = $56
	sta textat_rightvarInteger_var77
	sty textat_rightvarInteger_var77+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var77
textat_wordAdd75
	sta textat_rightvarInteger_var77
	; High-bit binop
	tya
	adc textat_rightvarInteger_var77+1
	tay
	lda textat_rightvarInteger_var77
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var74
textat_wordAdd72
	sta textat_rightvarInteger_var74
	; High-bit binop
	tya
	adc textat_rightvarInteger_var74+1
	tay
	lda textat_rightvarInteger_var74
	sta zp
	sty zp+1
	; LineNumber: 603
	; memcpyfast
	ldy str_len
	dey
textat_memcpy78
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy78
	; LineNumber: 605
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 624
	; LineNumber: 623
note_duration	dc.b	0
	; LineNumber: 621
note	dc.b	0
	; LineNumber: 621
note_len	dc.b	0
PlayNote_block79
PlayNote
	; LineNumber: 625
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock83
PlayNote_ConditionalTrueBlock81: ;Main true block ;keep 
	; LineNumber: 626
	; LineNumber: 627
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 629
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop94
	; LineNumber: 627
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter96
PlayNote_loopstart97
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop94
PlayNote_loopdone101: ;keep
PlayNote_forloopend95
PlayNote_loopend98
	; LineNumber: 629
PlayNote_elsedoneblock83
	; LineNumber: 630
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 633
burp
	; LineNumber: 634
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 635
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 636
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 637
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 638
	rts
block1
	; LineNumber: 1240
	; LineNumber: 1244
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1245
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1247
	; Assigning single variable : petscii_pointer
	lda #<test
	ldx #>test
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1248
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer103
	ldy #0
MainProgram_inner104
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner104
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer103
	ldy #0
MainProgram_final105
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final105
	; LineNumber: 1250
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1251
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1253
	jsr Key_SetupScreenCodes
	; LineNumber: 1254
	jsr Key_Read
	; LineNumber: 1256
	; Assigning single variable : yu
	lda #$0
	; Calling storevariable
	sta yu
	; LineNumber: 1257
	; Assigning single variable : kk
	ldy #0
	; Calling storevariable
	sta kk
	sty kk+1
	; LineNumber: 1258
MainProgram_while106
MainProgram_loopstart110
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock109
MainProgram_ConditionalTrueBlock107: ;Main true block ;keep 
	; LineNumber: 1258
	; LineNumber: 1261
	jsr Key_Read
	; LineNumber: 1262
	; Assigning single variable : kk
	ldy #0
	jsr Key_GetHeld
	; Calling storevariable
	sta kk
	sty kk+1
	; LineNumber: 1264
	; Binary clause INTEGER: NOTEQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda kk+1   ; compare high bytes
	cmp #$08 ;keep
	beq MainProgram_pass1132
	jmp MainProgram_ConditionalTrueBlock126
MainProgram_pass1132
	lda kk
	cmp #$ff ;keep
	beq MainProgram_elsedoneblock128
	jmp MainProgram_ConditionalTrueBlock126
MainProgram_ConditionalTrueBlock126: ;Main true block ;keep 
	; LineNumber: 1265
	; LineNumber: 1265
	lda #$0
	sta screen_x
	lda yu
	sta screen_y
	lda #>$8000
	jsr SetScreenPosition
	; LineNumber: 1267
	; integer assignment NodeVar
	ldy kk+1 ; Next one
	lda kk
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$5 ; optimized, look out for bugs
MainProgram_printdecimal134
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl MainProgram_printdecimal134
	; LineNumber: 1267
	inc yu
	; LineNumber: 1269
MainProgram_elsedoneblock128
	; LineNumber: 1270
	jsr sleep_delay
	; LineNumber: 1271
	jsr sleep_delay
	; LineNumber: 1272
	jsr sleep_delay
	; LineNumber: 1273
	jmp MainProgram_while106
MainProgram_elsedoneblock109
MainProgram_loopend111
	; LineNumber: 1280
	; Assigning single variable : sleepx
	lda #$0
	; Calling storevariable
	sta sleepx
MainProgram_forloop136
	; LineNumber: 1277
	; LineNumber: 1278
	jsr sleep_delay
	; LineNumber: 1279
MainProgram_forloopcounter138
MainProgram_loopstart139
	; Compare is onpage
	inc sleepx
	; Integer constant assigning
	ldy #$01
	lda #$2c
	cmp sleepx ;keep
	bcs MainProgram_forloop136
MainProgram_loopdone143: ;keep
MainProgram_forloopend137
MainProgram_loopend140
	; LineNumber: 1280
	; MoveTo optimization
	lda #$50
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1282
	ldy #0
	jsr _ti
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
MainProgram_printdecimal144
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl MainProgram_printdecimal144
	; LineNumber: 1286
MainProgram_while145
MainProgram_loopstart149
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_localfailed185
	jmp MainProgram_ConditionalTrueBlock146
MainProgram_localfailed185
	jmp MainProgram_elsedoneblock148
MainProgram_ConditionalTrueBlock146: ;Main true block ;keep 
	; LineNumber: 1286
	; LineNumber: 1288
	; Assigning single variable : petscii_pointer
	lda #<petscii2
	ldx #>petscii2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1289
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer187
	ldy #0
MainProgram_inner188
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner188
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer187
	ldy #0
MainProgram_final189
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final189
	; LineNumber: 1290
	jsr frame_delay
	; LineNumber: 1291
	; Assigning single variable : petscii_pointer
	lda #<petscii3
	ldx #>petscii3
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1291
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer190
	ldy #0
MainProgram_inner191
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner191
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer190
	ldy #0
MainProgram_final192
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final192
	; LineNumber: 1293
	jsr frame_delay
	; LineNumber: 1294
	; Assigning single variable : petscii_pointer
	lda #<petscii4
	ldx #>petscii4
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1294
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer193
	ldy #0
MainProgram_inner194
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner194
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer193
	ldy #0
MainProgram_final195
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final195
	; LineNumber: 1296
	jsr frame_delay
	; LineNumber: 1297
	; Assigning single variable : petscii_pointer
	lda #<petscii5
	ldx #>petscii5
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1297
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer196
	ldy #0
MainProgram_inner197
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner197
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer196
	ldy #0
MainProgram_final198
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final198
	; LineNumber: 1299
	jsr frame_delay
	; LineNumber: 1300
	; Assigning single variable : petscii_pointer
	lda #<petscii6
	ldx #>petscii6
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1300
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer199
	ldy #0
MainProgram_inner200
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner200
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer199
	ldy #0
MainProgram_final201
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final201
	; LineNumber: 1302
	jsr frame_delay
	; LineNumber: 1303
	; Assigning single variable : petscii_pointer
	lda #<petscii7
	ldx #>petscii7
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1303
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer202
	ldy #0
MainProgram_inner203
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner203
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer202
	ldy #0
MainProgram_final204
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final204
	; LineNumber: 1305
	jsr frame_delay
	; LineNumber: 1306
	; Assigning single variable : petscii_pointer
	lda #<petscii7
	ldx #>petscii7
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1306
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer205
	ldy #0
MainProgram_inner206
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner206
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer205
	ldy #0
MainProgram_final207
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final207
	; LineNumber: 1308
	jsr frame_delay
	; LineNumber: 1309
	; Assigning single variable : petscii_pointer
	lda #<petscii6
	ldx #>petscii6
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1309
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer208
	ldy #0
MainProgram_inner209
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner209
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer208
	ldy #0
MainProgram_final210
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final210
	; LineNumber: 1311
	jsr frame_delay
	; LineNumber: 1312
	; Assigning single variable : petscii_pointer
	lda #<petscii5
	ldx #>petscii5
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1312
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer211
	ldy #0
MainProgram_inner212
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner212
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer211
	ldy #0
MainProgram_final213
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final213
	; LineNumber: 1314
	jsr frame_delay
	; LineNumber: 1315
	; Assigning single variable : petscii_pointer
	lda #<petscii4
	ldx #>petscii4
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1315
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer214
	ldy #0
MainProgram_inner215
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner215
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer214
	ldy #0
MainProgram_final216
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final216
	; LineNumber: 1317
	jsr frame_delay
	; LineNumber: 1318
	; Assigning single variable : petscii_pointer
	lda #<petscii3
	ldx #>petscii3
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 1318
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
MainProgram_outer217
	ldy #0
MainProgram_inner218
	lda ($4c),y
	sta ($4e),y
	dey
	bne MainProgram_inner218
	inc $4c+1
	inc $4e+1
	dex
	bne MainProgram_outer217
	ldy #0
MainProgram_final219
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne MainProgram_final219
	; LineNumber: 1320
	jmp MainProgram_while145
MainProgram_elsedoneblock148
MainProgram_loopend150
	; LineNumber: 1322
	; End of program
	; Ending memory block
EndBlock410
