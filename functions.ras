procedure cls();
var

begin
	ClearScreen($20, screen_char_loc);
	moveto(0,0,hi(screen_char_loc));
end;


function getkey() : byte;

begin

 	getkey:=peek(KEYB,0);

end;


procedure waitkey();
var
		this_key: byte =$FF;
begin

	while(this_key<>$20) do
	begin
		this_key:=getkey();
	end;
end;

function getat(sx: byte; sy: byte;) : byte;
var 
	szp : pointer;

begin
	szp:= $8000 + sy*40 + sx;
	getat:=szp[0]; 
end;

procedure textat(x: byte; y: byte; this_str: pointer; str_len: byte );
var 
	zp : pointer;

begin
	zp:= $8000 + y*40 + x;
	MemCpyFast( this_str, 0, zp, str_len ); 
end;


procedure numberat(num_x: byte; num_y: byte; num: integer; num_len: byte );
var 
	num_p : pointer;
	num_str: cstring = "00000";

begin

	if(num>=10) then
	begin
		
		// Put each digit as PETSCII into the string
 		poke(#num_str,2,(mod(num,10))+48);	
 		poke(#num_str,1,(mod(num/10,10))+48);
		poke(#num_str,0,(num/100)+48);


	end
	else
	begin
 		poke(#num_str,0,num+48);
	end;


	num_p:= $8000 + num_y*40 + num_x;
	MemCpy( #num_str, 0, num_p, num_len ); 
end;

// =========================================
// SOUND!

procedure PlayNote(note : byte, note_len : byte);
var
 note_duration: byte;
begin
	if(PLAY_SOUND=1) then
	begin
		SOUND_FREQ := note;
		for note_duration:=0 to note_len do wait(200);
	end;
end;

procedure burp();
begin
	SOUND_OCTAVE := 15;
	SOUND := SOUND_ON;
	PlayNote(238,255);
	SOUND := SOUND_OFF;
end;

procedure ping();
begin
	SOUND_OCTAVE := 85;
	SOUND := SOUND_ON;
	PlayNote(238,200);
	PlayNote(251,200);
	PlayNote(210,255);
	PlayNote(210,255);
	SOUND := SOUND_OFF;
end;

// =========================================

procedure title_screen();
begin
	
	// Set up pointer to array:
	title_screen_frog_pointer:=#title_screen_frog;
	
	cls();

	// Draw the frog
	CopyFullScreen(title_screen_frog_pointer, #screenmemory);
	
    MemCpyFast(#logo, 0, ^32768, 13 );  
    MemCpyFast(#logo, 13, ^32808, 13 );  
    MemCpyFast(#logo, 26, ^32848, 13 );  
    MemCpyFast(#logo, 39, ^32888, 13 );  


	while (getkey()<>$20) do
	begin
		textat(2,21,#blk,28);
		textat(2,22, #by,28);	
		textat(2,23,#url,28);	
		textat(2,24,#space,28);
	end;
	
end;

procedure score_screen();
begin
	cls();
	while (getkey()<>$20) do
	begin

	    MemCpyFast(#logo, 0, ^32768, 13 );  
	    MemCpyFast(#logo, 13, ^32808, 13 );  
	    MemCpyFast(#logo, 26, ^32848, 13 );  
	    MemCpyFast(#logo, 39, ^32888, 13 );  

		textat(2,6, #over,28);	
		textat(2,7,#score,28);
		numberat(15,7,player_score,3);	
		textat(2,10,#space,28);
	end;
	
end;

procedure sprite_xy(spr_x: byte; spr_y: byte; source_str: pointer; spr_len: byte );
var 
	spr_p : pointer;

begin
	spr_p:= #level_strips + spr_y*80 + spr_x;
	MemCpyFast( source_str, 0, spr_p, spr_len ); 
	spr_p:= #level_strips + spr_y*80 + spr_x+40;
	MemCpyFast( source_str, 0, spr_p, spr_len ); 
end;

procedure init_vars();
var
	this_row,target_strip:pointer;
	iteration:byte;
	homeplate:byte=211;
begin
	cls();
	
	// Init the playfield
	screenmemory := $8000;
	petscii_pointer:=#level2;
	CopyFullScreen(petscii_pointer, #screenmemory);
	this_row:=petscii_pointer;
	target_strip:=#level_strips;

	// Obstacle Blanks
	fori iteration:= 1 to 25 do
	begin
		// Copy the source twice
		MemCpyFast(this_row, 0, #target_strip, 40);
		target_strip:=target_strip+40;
		MemCpyFast(this_row, 0, #target_strip, 40);
		target_strip:=target_strip+40;
		
		// Next row
		this_row:=this_row+40;
	end;
							

	// Init the "sprites"
	MemCpy(#arr_crockr, 0, #str_crockr, 9 ); 
	MemCpy(#arr_crockl, 0, #str_crockl, 9 ); 
	MemCpy(#arr_logl, 0, #str_logl, 5 ); 
	MemCpy(#arr_logr, 0, #str_logr, 5 ); 
	MemCpy(#arr_turtles, 0, #str_turtles, 5 ); 
	MemCpy(#arr_river_r, 0, #str_river_r, 5 ); 
	MemCpy(#arr_river_l, 0, #str_river_l, 5 ); 	
	
	MemCpy(#arr_truckt_r, 0, #str_truckt_r, 8 ); 
	MemCpy(#arr_truckb_r, 0, #str_truckb_r, 8 ); 
	MemCpy(#arr_carl, 0, #str_cart, 4 ); 
	MemCpy(#arr_carr, 0, #str_carb, 4 ); 

	// Sprite start positions
	sprite_xy(10,obstacles_y[0],#str_crockr,9);
	sprite_xy(24,obstacles_y[0],#str_logr,5);
		
	sprite_xy(30,obstacles_y[1],#str_crockl,9);
	sprite_xy(5,obstacles_y[1],#str_logl,5);
		
	sprite_xy(04,obstacles_y[2],#str_logr,5);
	sprite_xy(14,obstacles_y[2],#str_logr,5);
	
	sprite_xy(24,obstacles_y[3],#str_logl,5);
	sprite_xy(34,obstacles_y[3],#str_logl,5);
	
	sprite_xy(10,obstacles_y[4],#str_turtles,5);	
	sprite_xy(20,obstacles_y[4],#str_turtles,5);	
	sprite_xy(30,obstacles_y[4],#str_turtles,5);	

	sprite_xy(34,obstacles_y[5],#str_cart,4);
	sprite_xy(34,obstacles_y[6],#str_carb,4);
	sprite_xy(19,obstacles_y[7],#str_cart,4);
	sprite_xy(19,obstacles_y[8],#str_carb,4);
	sprite_xy(10,obstacles_y[9],#str_truckt_r,8);
	sprite_xy(10,obstacles_y[10],#str_truckb_r,8);
	sprite_xy(19,obstacles_y[11],#str_truckt_r,8);
	sprite_xy(19,obstacles_y[12],#str_truckb_r,8);


	frog_x:= 20;
	frog_y:= 24;
	
	KEYPRESS := 0;
	ALIVE:=1;
	WON_GAME:=0;
	
	player_lives:=3;
	player_score:=0;
	
	// Home plates
	textat(3,1,#homeplate,1);
	textat(10,1,#homeplate,1);
	textat(18,1,#homeplate,1);
	textat(24,1,#homeplate,1);
	textat(31,1,#homeplate,1);
	textat(37,1,#homeplate,1);
end;

procedure shit_delay();
var 
	temp_delay: byte;
begin
		fori temp_delay := 1 to GAME_SPEED do
		begin
	        while ( ti = oldti ) do begin end;
	        oldti := ti;
	    end;
end;

procedure show_obstacles();
var
	
	strip_num,this_strip:byte;
	this_source_offset:pointer;
begin

	// TRSE way of incrementing 
	// counter with loop back to 0
	incRange(obstacles_x_rl, 0, 39);
	obstacles_x_lr:=40-obstacles_x_rl;

	for strip_num := 0 to 13 do
	begin
		this_strip:=obstacles_y[strip_num];
		screenmemory:=$8000+(this_strip*40);

		this_source_offset:=#level_strips+(this_strip*80);
		
		if(strip_direction[strip_num]=1) then
		begin
			this_source_offset:=this_source_offset+obstacles_x_rl;
		end
		else
		begin
			this_source_offset:=this_source_offset+obstacles_x_lr;
		end;
		
		MemCpyFast(this_source_offset, 0, screenmemory, 40); 
	end;

	// RESET SCREEN MEMORY
	screenmemory := $8000;

end;

procedure kill_frog();
begin
	textat(frog_old_x,frog_old_y, #previous_tile,1);
	textat(frog_x,frog_y, #next_tile,1);
	previous_tile:=32;
	next_tile:=32;
	frog_x:= 20;
	frog_y:= 24;
    frog_old_x:=frog_x;        
    frog_old_y:=frog_y;
    burp();	
	dec(player_lives);
end;

procedure check_collisions();
var

begin
		// CHECK COLLISSIONS
		next_tile := getat(frog_x,frog_y);


		// There is no function to search a string
		// or check an array, or return array size,
		// so we need to check each character individually
		case next_tile of

		// Can't occupy where already landed
			frogcharA:
			  begin
	        	  	if(frog_y<24) then
	        	  	begin
		             frog_x:=frog_old_x;
		             frog_y:=frog_old_y;
		        end;
	           end;
			frogcharB:
			  begin
	        	  	if(frog_y<24) then
	        	  	begin
		             frog_x:=frog_old_x;
		             frog_y:=frog_old_y;
		        end;
	           end;	           
		// Scenery
	        $66: 
	        	  begin
	        	  	if(frog_y<24) then
	        	  	begin
		             frog_x:=frog_old_x;
		             frog_y:=frog_old_y;
		        end;
	           end;

	        $68: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;
	           
	        $5c: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;


		// Water kills the frog for some reason?

	        32: 
	        	  begin
	        	  		if(frog_y<9 and frog_y >3 ) then
					begin
						kill_frog();
					end;
	           end;

		// Ride turtles and logs etc
			81: 
	        	  begin
	        	  		if(frog_x>0) then
					begin
						dec(frog_x);
					end;
	           end;

			168: // (
	        	  begin
	        	  		if(frog_x<38) then
					begin
						inc(frog_x);
					end;
	           end;

			169:	 // ) 
	        	  begin
	        	  		if(frog_x>0) then
					begin
						dec(frog_x);
					end;
	           end;


		// Truck!
	        $F0: 
	        	  begin
				kill_frog();
	           end;

	        215: 
	        	  begin
				kill_frog();
	           end;

            $ED: 
	        	  begin
				kill_frog();

	           end;
	        $EE: 
	        	  begin
				kill_frog();

	           end;

	        $FD: 
	        	  begin
				kill_frog();

	           end;
	           
	        96: 
	        	  begin
				kill_frog();

	           end;
	        
	        243: 
	        	  begin
				kill_frog();

	           end;
	        
	        235: 
	        	  begin
				kill_frog();

	           end;

		// Crock!
			198: 
	        	  begin
				kill_frog();
					
	           end;

			162: 
	        	  begin
				kill_frog();
	           end;

		// HOME
			// Occupied
			214: 
	        	  begin
	             frog_x:=frog_old_x;
	             frog_y:=frog_old_y;
	           end;
			// Success
			211: 
	        	  begin
	        	  	if(frog_x<>frog_old_x or frog_y<>frog_old_y ) then
				begin
					player_score:=player_score+100;
					ping();
					frog_x:= 20;
					frog_y:= 24;
					frog_old_x:=frog_x;
					frog_old_y:=frog_y;
				end;
	           end;


	    else
	    begin
	       // None of the cases were valid so go ahead
	       if(KEYPRESS<>255) then
			begin
				inc(player_score);
			end;
	    end;
end;


