 processor 6502
	org $401
	; Starting new memory block at $401
StartBlock401
	.byte $b ; lo byte of next line
	.byte $4 ; hi byte of next line
	.byte $0a, $00 ; line 10 (lo, hi)
	.byte $9e, $20 ; SYS token and a space
	.byte   $31,$30,$34,$30
	.byte $00, $00, $00 ; end of program
	; Ending memory block
EndBlock401
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1497
	jmp block1
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 13
ti = $8f
	; LineNumber: 22
p_SW	= $02
	; LineNumber: 25
DETECTED_SCREEN_WIDTH	dc.b	$28
	; LineNumber: 34
KEYPRESS	dc.w	$ff
	; LineNumber: 36
ks	dc.b	$00
	; LineNumber: 38
n_key_up	dc.w	0
	; LineNumber: 38
n_key_down	dc.w	0
	; LineNumber: 38
n_key_left	dc.w	0
	; LineNumber: 38
n_key_right	dc.w	0
	; LineNumber: 38
key_up	dc.w	0
	; LineNumber: 38
key_down	dc.w	0
	; LineNumber: 38
key_left	dc.w	0
	; LineNumber: 38
key_right	dc.w	0
	; LineNumber: 45
PLAY_SOUND	dc.b	$01
	; LineNumber: 46
GAME_SPEED	dc.b	$08
	; LineNumber: 47
ALIVE	dc.b	$01
	; LineNumber: 48
WON_GAME	dc.b	$00
	; LineNumber: 49
FROGS_SAVED	dc.b	$00
	; LineNumber: 50
GAME_TICKS	dc.b	$00
	; LineNumber: 51
READY_TO_PLAY	dc.b	$00
	; LineNumber: 58
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 59
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 60
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 61
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 62
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 63
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 64
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 65
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 66
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 67
is_80	dc.b	0
	; LineNumber: 72
help_screen_array	
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 78, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	77, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 16, 5, 20, 6, 18, 15, 7, 32
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 116
	dc.b	42, 32, 18, 5, 17, 21, 9, 18, 5
	dc.b	19, 32, 7, 18, 1, 16, 8, 9, 3
	dc.b	32, 11, 5, 25, 2, 15, 1, 18, 4
	dc.b	32, 32, 32, 103, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 116, 42, 32, 16, 12, 1
	dc.b	25, 32, 9, 14, 32, 52, 48, 32, 3
	dc.b	15, 12, 21, 13, 14, 32, 13, 15, 4
	dc.b	5, 32, 32, 32, 32, 32, 32, 103, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 116, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 103, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 116, 2, 18, 9, 14, 7, 32
	dc.b	25, 15, 21, 18, 32, 6, 18, 15, 7
	dc.b	7, 9, 5, 19, 32, 8, 15, 13, 5
	dc.b	33, 32, 32, 32, 32, 32, 103, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 116, 1, 22
	dc.b	15, 9, 4, 32, 20, 18, 1, 6, 6
	dc.b	9, 3, 32, 1, 14, 4, 32, 3, 18
	dc.b	15, 3, 32, 13, 15, 21, 20, 8, 19
	dc.b	32, 103, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 116, 2, 5, 20, 23, 5, 5, 14
	dc.b	32, 18, 9, 22, 5, 18, 32, 2, 1
	dc.b	14, 11, 19, 32, 9, 19, 32, 4, 5
	dc.b	1, 4, 12, 25, 32, 106, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 116, 18, 9, 4
	dc.b	5, 32, 12, 15, 7, 19, 44, 32, 3
	dc.b	18, 15, 3, 32, 2, 15, 4, 19, 32
	dc.b	43, 32, 20, 21, 18, 20, 12, 5, 19
	dc.b	103, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 230, 32, 7, 5
	dc.b	20, 32, 19, 9, 24, 32, 6, 18, 15
	dc.b	7, 19, 32, 15, 14, 32, 83, 32, 20
	dc.b	15, 32, 23, 9, 14, 33, 32, 102, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 77
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 32, 32, 32
	dc.b	32, 32, 111, 78, 108, 226, 123, 32, 98
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 97, 32, 32, 32, 254, 126, 32, 32
	dc.b	32, 32, 124, 32, 127, 32, 32, 32, 32
	dc.b	32, 32, 32, 98, 98, 98, 98, 98, 32
	dc.b	32, 85, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 64, 64, 64, 73, 251, 32, 32, 225
	dc.b	126, 32, 32, 108, 160, 123, 108, 160, 123
	dc.b	32, 32, 32, 32, 108, 160, 160, 160, 226
	dc.b	32, 32, 124, 123, 32, 93, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 93
	dc.b	225, 123, 32, 225, 123, 32, 32, 225, 254
	dc.b	252, 254, 254, 252, 123, 32, 32, 32, 254
	dc.b	226, 97, 108, 98, 160, 252, 32, 251, 32
	dc.b	93, 11, 5, 25, 19, 58, 32, 32, 32
	dc.b	32, 32, 32, 93, 32, 251, 123, 32, 252
	dc.b	32, 108, 160, 160, 160, 160, 252, 124, 160
	dc.b	32, 32, 32, 236, 254, 108, 160, 160, 236
	dc.b	225, 32, 124, 252, 93, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 93, 32
	dc.b	32, 124, 127, 255, 127, 123, 124, 251, 160
	dc.b	160, 126, 252, 160, 32, 32, 225, 126, 97
	dc.b	225, 160, 126, 254, 126, 32, 98, 236, 93
	dc.b	32, 32, 32, 32, 32, 23, 32, 32, 32
	dc.b	56, 32, 93, 32, 32, 32, 32, 124, 226
	dc.b	126, 32, 108, 108, 123, 108, 160, 160, 32
	dc.b	32, 160, 108, 97, 32, 226, 226, 32, 98
	dc.b	236, 126, 108, 93, 127, 123, 32, 32, 1
	dc.b	19, 4, 32, 52, 53, 54, 93, 32, 32
	dc.b	32, 32, 32, 32, 160, 252, 124, 226, 108
	dc.b	160, 251, 160, 32, 32, 97, 225, 32, 32
	dc.b	32, 98, 226, 126, 32, 255, 252, 74, 64
	dc.b	64, 64, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 75, 32, 32, 32, 32, 225, 123, 225
	dc.b	160, 160, 160, 160, 126, 254, 160, 32, 225
	dc.b	97, 160, 32, 254, 226, 126, 98, 160, 252
	dc.b	123, 108, 124, 32, 32, 97, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	252, 108, 97, 124, 160, 160, 98, 98, 254
	dc.b	160, 160, 32, 32, 251, 123, 251, 123, 32
	dc.b	160, 160, 160, 236, 126, 32, 32, 123, 126
	dc.b	97, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 108, 32, 160, 160, 123, 32
	dc.b	160, 160, 160, 160, 160, 160, 32, 32, 124
	dc.b	160, 123, 251, 123, 124, 226, 126, 32, 32
	dc.b	98, 236, 108, 226, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 226
	dc.b	251, 160, 160, 254, 254, 160, 160, 160, 160
	dc.b	160, 0
	; LineNumber: 116
frogcharA	dc.b	$d6
	; LineNumber: 117
frogcharB	dc.b	$56
	; LineNumber: 118
frog_x	dc.b	$14
	; LineNumber: 118
frog_old_x	dc.b	$14
	; LineNumber: 119
frog_y	dc.b	$18
	; LineNumber: 119
frog_old_y	dc.b	$18
	; LineNumber: 120
previous_tile	dc.b	$20
	; LineNumber: 121
next_tile	dc.b	0
	; LineNumber: 122
player_lives	dc.b	$00
	; LineNumber: 123
player_score	dc.w	$00
	; LineNumber: 125
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 126
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 128
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 129
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 132
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 133
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 135
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 136
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 138
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 139
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 141
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 142
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 144
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 145
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 149
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 150
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 151
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 152
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 160
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 161
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 162
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 163
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 168
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 169
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 171
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 174
traffic_x_rl	dc.b	0
	; LineNumber: 174
traffic_x_lr	dc.b	0
	; LineNumber: 175
obstacles_x_rl	dc.b	0
	; LineNumber: 175
obstacles_x_lr	dc.b	0
	; LineNumber: 179
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 187
title_screen_frog_pointer	=   $04
	; LineNumber: 188
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 216
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 244
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 273
petscii_pointer	=   $08
	; LineNumber: 307
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 346
Key_Read
	; LineNumber: 348
	lda #$0
	; Calling storevariable on generic assign expression
	sta Key_keyState
	; LineNumber: 377
	
; // row to test
	; Calling storevariable on generic assign expression
	sta Key_temp
Key_Read_forloop5
	; LineNumber: 351
	; LineNumber: 353
	lda Key_temp
	; Calling storevariable on generic assign expression
	sta Key_KeyRow
	; LineNumber: 355
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 376
Key_Read_forloopcounter7
Key_Read_loopstart8
	; Compare is onpage
	; Test Inc dec D
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop5
Key_Read_loopdone12: ;keep
Key_Read_forloopend6
Key_Read_loopend9
	; LineNumber: 378
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 394
	; LineNumber: 393
Key_Pressed_block13
Key_Pressed
	; LineNumber: 396
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 404
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 351
cls
	; LineNumber: 352
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop16
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop16
	; LineNumber: 353
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 354
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 370
uppercase
	; LineNumber: 371
	; Assigning to register
	; Assigning register : _a
	lda #$8e
	; LineNumber: 372
	jsr $FFD2
	; LineNumber: 373
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_home
	;    Procedure type : User-defined procedure
	; LineNumber: 377
cursor_home
	; LineNumber: 379
	; Assigning to register
	; Assigning register : _a
	lda #$13
	; LineNumber: 380
	jsr $FFD2
	; LineNumber: 382
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 393
cursor_return
	; LineNumber: 395
	; Assigning to register
	; Assigning register : _a
	lda #$d
	; LineNumber: 396
	jsr $FFD2
	; LineNumber: 398
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 401
cursor_down
	; LineNumber: 403
	; Assigning to register
	; Assigning register : _a
	lda #$11
	; LineNumber: 404
	jsr $FFD2
	; LineNumber: 406
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 417
cursor_graphic
	; LineNumber: 419
	; Assigning to register
	; Assigning register : _a
	lda #$8e
	; LineNumber: 420
	jsr $FFD2
	; LineNumber: 422
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 479
	; LineNumber: 476
char	dc.b	0
	; LineNumber: 477
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 478
screen_pointer	=   $16
is_80_columns_block22
is_80_columns
	; LineNumber: 481
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 482
	jsr uppercase
	; LineNumber: 489
	lda #$0
	; Calling storevariable on generic assign expression
	sta char
is_80_columns_forloop23
	; LineNumber: 485
	; LineNumber: 486
	; Assigning to register
	; Assigning register : _a
	; Load Unknown type array, assuming BYTE
	ldx char
	lda test_string,x
	; LineNumber: 487
	jsr $FFD2
	; LineNumber: 488
is_80_columns_forloopcounter25
is_80_columns_loopstart26
	; Compare is onpage
	; Test Inc dec D
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop23
is_80_columns_loopdone30: ;keep
is_80_columns_forloopend24
is_80_columns_loopend27
	; LineNumber: 490
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock33
is_80_columns_ConditionalTrueBlock32: ;Main true block ;keep 
	; LineNumber: 491
	; LineNumber: 492
	lda #$1
	rts
	; LineNumber: 494
	jmp is_80_columns_elsedoneblock34
is_80_columns_elseblock33
	; LineNumber: 495
	; LineNumber: 496
	lda #$0
	rts
	; LineNumber: 497
is_80_columns_elsedoneblock34
	; LineNumber: 499
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 555
	; LineNumber: 553
szp	=   $16
	; LineNumber: 551
sx	dc.b	0
	; LineNumber: 551
sy	dc.b	0
getat_block39
getat
	; LineNumber: 556
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var42 = $54
	sta getat_rightvarInteger_var42
	sty getat_rightvarInteger_var42+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var45 =   $56
	sta getat_rightvarInteger_var45
	sty getat_rightvarInteger_var45+1
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var45
getat_wordAdd43
	sta getat_rightvarInteger_var45
	; High-bit binop
	tya
	adc getat_rightvarInteger_var45+1
	tay
	lda getat_rightvarInteger_var45
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var42
getat_wordAdd40
	sta getat_rightvarInteger_var42
	; High-bit binop
	tya
	adc getat_rightvarInteger_var42+1
	tay
	lda getat_rightvarInteger_var42
	sta szp
	sty szp+1
	; LineNumber: 557
	; LineNumber: 558
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 564
	; LineNumber: 562
zp	=   $16
	; LineNumber: 560
x	dc.b	0
	; LineNumber: 560
y	dc.b	0
	; LineNumber: 560
this_str	=   $0B
	; LineNumber: 560
str_len	dc.b	0
textat_block46
textat
	; LineNumber: 565
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var49 = $54
	sta textat_rightvarInteger_var49
	sty textat_rightvarInteger_var49+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var52 =   $56
	sta textat_rightvarInteger_var52
	sty textat_rightvarInteger_var52+1
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var52
textat_wordAdd50
	sta textat_rightvarInteger_var52
	; High-bit binop
	tya
	adc textat_rightvarInteger_var52+1
	tay
	lda textat_rightvarInteger_var52
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var49
textat_wordAdd47
	sta textat_rightvarInteger_var49
	; High-bit binop
	tya
	adc textat_rightvarInteger_var49+1
	tay
	lda textat_rightvarInteger_var49
	sta zp
	sty zp+1
	; LineNumber: 565
	; memcpyfast
	ldy str_len
	dey
textat_memcpy53
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy53
	; LineNumber: 567
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 586
	; LineNumber: 585
note_duration	dc.b	0
	; LineNumber: 583
note	dc.b	0
	; LineNumber: 583
note_len	dc.b	0
PlayNote_block54
PlayNote
	; LineNumber: 587
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock58
PlayNote_ConditionalTrueBlock56: ;Main true block ;keep 
	; LineNumber: 588
	; LineNumber: 589
	lda note
	; Calling storevariable on generic assign expression
	sta $e848
	; LineNumber: 591
	lda #$0
	; Calling storevariable on generic assign expression
	sta note_duration
PlayNote_forloop69
	; LineNumber: 589
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter71
PlayNote_loopstart72
	; Compare is onpage
	; Test Inc dec D
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop69
PlayNote_loopdone76: ;keep
PlayNote_forloopend70
PlayNote_loopend73
	; LineNumber: 591
PlayNote_elsedoneblock58
	; LineNumber: 592
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 595
burp
	; LineNumber: 596
	; Assigning memory location
	lda #$f
	; Calling storevariable on generic assign expression
	sta $e84a
	; LineNumber: 597
	; Assigning memory location
	lda #$10
	; Calling storevariable on generic assign expression
	sta $e84b
	; LineNumber: 598
	lda #$ee
	; Calling storevariable on generic assign expression
	sta note
	lda #$ff
	; Calling storevariable on generic assign expression
	sta note_len
	jsr PlayNote
	; LineNumber: 599
	; Assigning memory location
	lda #$0
	; Calling storevariable on generic assign expression
	sta $e84b
	; LineNumber: 600
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 603
ping
	; LineNumber: 604
	; Assigning memory location
	lda #$55
	; Calling storevariable on generic assign expression
	sta $e84a
	; LineNumber: 605
	; Assigning memory location
	lda #$10
	; Calling storevariable on generic assign expression
	sta $e84b
	; LineNumber: 606
	lda #$ee
	; Calling storevariable on generic assign expression
	sta note
	lda #$c8
	; Calling storevariable on generic assign expression
	sta note_len
	jsr PlayNote
	; LineNumber: 607
	lda #$fb
	; Calling storevariable on generic assign expression
	sta note
	lda #$c8
	; Calling storevariable on generic assign expression
	sta note_len
	jsr PlayNote
	; LineNumber: 608
	lda #$d2
	; Calling storevariable on generic assign expression
	sta note
	lda #$ff
	; Calling storevariable on generic assign expression
	sta note_len
	jsr PlayNote
	; LineNumber: 609
	lda #$d2
	; Calling storevariable on generic assign expression
	sta note
	lda #$ff
	; Calling storevariable on generic assign expression
	sta note_len
	jsr PlayNote
	; LineNumber: 610
	; Assigning memory location
	lda #$0
	; Calling storevariable on generic assign expression
	sta $e84b
	; LineNumber: 611
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : copy_8040_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 619
	; LineNumber: 617
mc_row	dc.b	0
	; LineNumber: 618
src_row	=   $16
	; LineNumber: 618
dest_row	=   $0B
	; LineNumber: 615
source_p	=   $0D
	; LineNumber: 615
dest_p	=   $10
copy_8040_screen_block79
copy_8040_screen
	; LineNumber: 626
	lda #$0
	; Calling storevariable on generic assign expression
	sta mc_row
copy_8040_screen_forloop80
	; LineNumber: 622
	; LineNumber: 623
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy source_p+1 ; keep
	lda source_p
copy_8040_screen_rightvarInteger_var92 = $54
	sta copy_8040_screen_rightvarInteger_var92
	sty copy_8040_screen_rightvarInteger_var92+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda mc_row
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc copy_8040_screen_rightvarInteger_var92
copy_8040_screen_wordAdd90
	sta copy_8040_screen_rightvarInteger_var92
	; High-bit binop
	tya
	adc copy_8040_screen_rightvarInteger_var92+1
	tay
	lda copy_8040_screen_rightvarInteger_var92
	sta src_row
	sty src_row+1
	; LineNumber: 624
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda mc_row
	; Calling storevariable on generic assign expression
	sta y
	lda src_row
	ldx src_row+1
	sta this_str
	stx this_str+1
	lda #$28
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 625
copy_8040_screen_forloopcounter82
copy_8040_screen_loopstart83
	; Compare is onpage
	; Test Inc dec D
	inc mc_row
	lda #$18
	cmp mc_row ;keep
	bcs copy_8040_screen_forloop80
copy_8040_screen_loopdone93: ;keep
copy_8040_screen_forloopend81
copy_8040_screen_loopend84
	; LineNumber: 626
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 632
	; LineNumber: 630
c_row	=   $16
	; LineNumber: 630
p_row	=   $0B
	; LineNumber: 631
scroll	dc.b	0
	; LineNumber: 631
scrolls	dc.b	0
ScrollY_block94
ScrollY
	; LineNumber: 647
	lda #$1
	; Calling storevariable on generic assign expression
	sta scrolls
ScrollY_forloop95
	; LineNumber: 633
	; LineNumber: 635
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 636
	; INTEGER optimization: a=b+c 
	clc
	adc DETECTED_SCREEN_WIDTH
	sta c_row+0
	lda p_row+1
	adc #0
	sta c_row+1
	; LineNumber: 643
	lda #$1
	; Calling storevariable on generic assign expression
	sta scroll
ScrollY_forloop120
	; LineNumber: 638
	; LineNumber: 638
	; memcpyfast
	ldy DETECTED_SCREEN_WIDTH
	dey
ScrollY_memcpy130
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy130
	; LineNumber: 640
	lda p_row
	clc
	adc DETECTED_SCREEN_WIDTH
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd131
	inc p_row+1
ScrollY_WordAdd131
	; LineNumber: 641
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc DETECTED_SCREEN_WIDTH
	sta c_row+0
	lda p_row+1
	adc #0
	sta c_row+1
	; LineNumber: 642
ScrollY_forloopcounter122
ScrollY_loopstart123
	; Compare is onpage
	; Test Inc dec D
	inc scroll
	lda #$18
	cmp scroll ;keep
	bcs ScrollY_forloop120
ScrollY_loopdone133: ;keep
ScrollY_forloopend121
ScrollY_loopend124
	; LineNumber: 643
	ldy DETECTED_SCREEN_WIDTH ; optimized, look out for bugs
	lda #$20
ScrollY_fill134
	sta (p_row),y
	dey
	bpl ScrollY_fill134
	; LineNumber: 644
	ldy DETECTED_SCREEN_WIDTH ; optimized, look out for bugs
	lda #$20
ScrollY_fill135
	sta (c_row),y
	dey
	bpl ScrollY_fill135
	; LineNumber: 645
	jsr Crt_WaitVblStart
	; LineNumber: 646
ScrollY_forloopcounter97
ScrollY_loopstart98
	; Test Inc dec D
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	beq ScrollY_loopdone136
ScrollY_loopnotdone137
	jmp ScrollY_forloop95
ScrollY_loopdone136
ScrollY_forloopend96
ScrollY_loopend99
	; LineNumber: 648
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 659
	; LineNumber: 653
hks	dc.b	0
	; LineNumber: 653
_ctr	dc.b	0
	; LineNumber: 654
help_screen_pointer	=   $16
	; LineNumber: 654
str_pointer	=   $0B
	; LineNumber: 657
thanks_string	
	dc.b	$14, $08, $01, $0e, $0b, $13, $20, $00, $0c
	dc.b	$05, $15, $01, $14, $20, $26, $20, $14, $08
	dc.b	$05, $20, $14, $12, $13, $05, $20, $03, $0f
	dc.b	$0d, $0d, $15, $0e, $09, $14, $19, $20, $20
	dc.b	$20, $10, $12, $05, $13, $13, $20, $01, $0e
	dc.b	$19, $20, $0b, $05, $19, $20, $14, $0f, $20
	dc.b	$03, $0f, $0e, $14, $09, $0e, $15, $05, $20
	dc.b	$20, $14, $08, $01, $0e, $0b, $13, $20, $00
	dc.b	$0c, $05, $15, $01, $14, $20, $26, $20, $14
	dc.b	$08, $05, $20, $14, $12, $13, $05, $20, $03
	dc.b	$0f, $0d, $0d, $15, $0e, $09, $14, $19, $20
	dc.b	$20, $20, $10, $12, $05, $13, $13, $20, $01
	dc.b	$0e, $19, $20, $0b, $05, $19, $20, $14, $0f
	dc.b	$20, $03, $0f, $0e, $14, $09, $0e, $15, $05
	dc.b	$20, $20, 0
help_screen_block138
help_screen
	; LineNumber: 662
	
; //        10		20			30		DETECTED_SCREEN_WIDTH		  50		  60		<	
; //123456789_123456789_123456789_123456789_1234567890123456789_12345678901234567890	
; // Set up pointer to array:
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 663
	lda #$0
	; Calling storevariable on generic assign expression
	sta hks
	; LineNumber: 664
	jsr cls
	; LineNumber: 665
	jsr cursor_home
	; LineNumber: 668
	
; // Draw the frog
	lda help_screen_pointer
	ldx help_screen_pointer+1
	sta source_p
	stx source_p+1
	lda #<$8000
	ldx #>$8000
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 671
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 673
help_screen_while139
help_screen_loopstart143
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock142
help_screen_ConditionalTrueBlock140: ;Main true block ;keep 
	; LineNumber: 674
	; LineNumber: 675
	jsr Key_Read
	; LineNumber: 676
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	cmp #127
	bcc help_screen_abslabel149
	eor #$ff
	adc #$00
help_screen_abslabel149
	; Calling storevariable on generic assign expression
	sta _ctr
	; LineNumber: 677
	lda #$c
	; Calling storevariable on generic assign expression
	sta x
	lda #$2
	; Calling storevariable on generic assign expression
	sta y
	; INTEGER optimization: a=b+c 
	lda #<thanks_string
	clc
	adc _ctr
	sta this_str+0
	lda #>thanks_string
	adc #0
	sta this_str+1
	lda #$11
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 678
	jmp help_screen_while139
help_screen_elsedoneblock142
help_screen_loopend144
	; LineNumber: 679
	lda #$0
	; Calling storevariable on generic assign expression
	sta READY_TO_PLAY
	; LineNumber: 680
	jsr ScrollY
	; LineNumber: 681
	rts
	; LineNumber: 684
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 697
	; LineNumber: 688
ctr	dc.b	0
	; LineNumber: 688
slide	dc.b	0
	; LineNumber: 689
DIFFICULTY	
	dc.b	$04, $09, $06, $06, $09, $03, $15, $0c, $14
	dc.b	$19, 0
	; LineNumber: 690
DIFFICULTY1	
	dc.b	$31, $20, $05, $01, $13, $19, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 691
DIFFICULTY2	
	dc.b	$32, $20, $0d, $05, $04, $09, $15, $0d, $20
	dc.b	$20, 0
	; LineNumber: 692
DIFFICULTY3	
	dc.b	$33, $20, $08, $01, $12, $04, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 693
R1	dc.b	$b1
	; LineNumber: 694
R2	dc.b	$b2
	; LineNumber: 695
R3	dc.b	$b3
title_screen_block151
title_screen
	; LineNumber: 700
	
; // Set up pointer to array:
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 701
	lda #$0
	; Calling storevariable on generic assign expression
	sta ks
	; LineNumber: 702
	jsr cls
	; LineNumber: 705
	
; // Draw the frog
	lda title_screen_frog_pointer
	ldx title_screen_frog_pointer+1
	sta source_p
	stx source_p+1
	lda #<screenmemory
	ldx #>screenmemory
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 707
	; Binary clause Simplified: EQUALS
	lda DETECTED_SCREEN_WIDTH
	; Compare with pure num / var optimization
	cmp #$28;keep
	bne title_screen_elseblock154
title_screen_ConditionalTrueBlock153: ;Main true block ;keep 
	; LineNumber: 708
	; LineNumber: 708
	; memcpyfast
	ldx #12
title_screen_memcpy167
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy167
	; LineNumber: 709
	; memcpyfast
	ldx #12
title_screen_memcpy168
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy168
	; LineNumber: 710
	; memcpyfast
	ldx #12
title_screen_memcpy169
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy169
	; LineNumber: 711
	; memcpyfast
	ldx #12
title_screen_memcpy170
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy170
	; LineNumber: 714
	jmp title_screen_elsedoneblock155
title_screen_elseblock154
	; LineNumber: 715
	; LineNumber: 715
	; memcpyfast
	ldx #12
title_screen_memcpy172
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy172
	; LineNumber: 716
	; memcpyfast
	ldx #12
title_screen_memcpy173
	lda logo+ $0d,x
	sta $8050,x
	dex
	bpl title_screen_memcpy173
	; LineNumber: 717
	; memcpyfast
	ldx #12
title_screen_memcpy174
	lda logo+ $1a,x
	sta $80a0,x
	dex
	bpl title_screen_memcpy174
	; LineNumber: 718
	; memcpyfast
	ldx #12
title_screen_memcpy175
	lda logo+ $27,x
	sta $80f0,x
	dex
	bpl title_screen_memcpy175
	; LineNumber: 722
title_screen_elsedoneblock155
	; LineNumber: 725
	lda #$2
	; Calling storevariable on generic assign expression
	sta x
	lda #$15
	; Calling storevariable on generic assign expression
	sta y
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	lda #$1c
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 726
	lda #$2
	; Calling storevariable on generic assign expression
	sta x
	lda #$16
	; Calling storevariable on generic assign expression
	sta y
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	lda #$1c
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 727
	lda #$2
	; Calling storevariable on generic assign expression
	sta x
	lda #$17
	; Calling storevariable on generic assign expression
	sta y
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	lda #$1c
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 728
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$4
	; Calling storevariable on generic assign expression
	sta y
	lda #<DIFFICULTY
	ldx #>DIFFICULTY
	sta this_str
	stx this_str+1
	lda #$a
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 729
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$5
	; Calling storevariable on generic assign expression
	sta y
	lda #<DIFFICULTY1
	ldx #>DIFFICULTY1
	sta this_str
	stx this_str+1
	lda #$a
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 730
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$6
	; Calling storevariable on generic assign expression
	sta y
	lda #<DIFFICULTY2
	ldx #>DIFFICULTY2
	sta this_str
	stx this_str+1
	lda #$a
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 731
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$7
	; Calling storevariable on generic assign expression
	sta y
	lda #<DIFFICULTY3
	ldx #>DIFFICULTY3
	sta this_str
	stx this_str+1
	lda #$a
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 736
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 739
title_screen_while176
title_screen_loopstart180
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed279
	jmp title_screen_ConditionalTrueBlock177
title_screen_localfailed279
	jmp title_screen_elsedoneblock179
title_screen_ConditionalTrueBlock177: ;Main true block ;keep 
	; LineNumber: 740
	; LineNumber: 742
	jsr Key_Read
	; LineNumber: 743
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc title_screen_abslabel281
	eor #$ff
	adc #$00
title_screen_abslabel281
	; Calling storevariable on generic assign expression
	sta ctr
	; LineNumber: 744
	lda #$1
	cmp ctr ;keep
	bne title_screen_casenext283
	; LineNumber: 744
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext283
	lda #$2
	cmp ctr ;keep
	bne title_screen_casenext285
	; LineNumber: 745
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext285
	lda #$3
	cmp ctr ;keep
	bne title_screen_casenext287
	; LineNumber: 746
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext287
	lda #$4
	cmp ctr ;keep
	bne title_screen_casenext289
	; LineNumber: 747
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext289
	lda #$5
	cmp ctr ;keep
	bne title_screen_casenext291
	; LineNumber: 748
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext291
	lda #$6
	cmp ctr ;keep
	bne title_screen_casenext293
	; LineNumber: 749
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext293
	lda #$7
	cmp ctr ;keep
	bne title_screen_casenext295
	; LineNumber: 750
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext295
	lda #$8
	cmp ctr ;keep
	bne title_screen_casenext297
	; LineNumber: 751
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext297
	lda #$0
	cmp ctr ;keep
	bne title_screen_casenext299
	; LineNumber: 752
	lda #$4
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
title_screen_casenext299
title_screen_caseend282
	; LineNumber: 760
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$06
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed306
	jmp title_screen_ConditionalTrueBlock302
title_screen_localfailed306: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$08
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock304
title_screen_ConditionalTrueBlock302: ;Main true block ;keep 
	; LineNumber: 760
	; LineNumber: 762
	
; // hard 	GAME_SPEED:=4;
; // medium GAME_SPEED:=5;	
; // easy GAME_SPEED:=8;
	lda #$8
	; Calling storevariable on generic assign expression
	sta GAME_SPEED
	; LineNumber: 763
title_screen_elsedoneblock304
	; LineNumber: 765
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$07
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed313
	jmp title_screen_ConditionalTrueBlock309
title_screen_localfailed313: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$07
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock311
title_screen_ConditionalTrueBlock309: ;Main true block ;keep 
	; LineNumber: 765
	; LineNumber: 767
	lda #$5
	; Calling storevariable on generic assign expression
	sta GAME_SPEED
	; LineNumber: 768
title_screen_elsedoneblock311
	; LineNumber: 770
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed320
	jmp title_screen_ConditionalTrueBlock316
title_screen_localfailed320: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock318
title_screen_ConditionalTrueBlock316: ;Main true block ;keep 
	; LineNumber: 770
	; LineNumber: 772
	lda #$4
	; Calling storevariable on generic assign expression
	sta GAME_SPEED
	; LineNumber: 773
title_screen_elsedoneblock318
	; LineNumber: 775
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$8;keep
	bne title_screen_elseblock324
title_screen_ConditionalTrueBlock323: ;Main true block ;keep 
	; LineNumber: 776
	; LineNumber: 777
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$5
	; Calling storevariable on generic assign expression
	sta y
	lda #<R1
	ldx #>R1
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 779
	jmp title_screen_elsedoneblock325
title_screen_elseblock324
	; LineNumber: 780
	; LineNumber: 781
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$5
	; Calling storevariable on generic assign expression
	sta y
	; Assigning a string : this_str
	lda #<title_screen_stringassignstr332
	sta this_str
	lda #>title_screen_stringassignstr332
	sta this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 782
title_screen_elsedoneblock325
	; LineNumber: 784
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bne title_screen_elseblock336
title_screen_ConditionalTrueBlock335: ;Main true block ;keep 
	; LineNumber: 785
	; LineNumber: 786
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$6
	; Calling storevariable on generic assign expression
	sta y
	lda #<R2
	ldx #>R2
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 788
	jmp title_screen_elsedoneblock337
title_screen_elseblock336
	; LineNumber: 789
	; LineNumber: 790
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$6
	; Calling storevariable on generic assign expression
	sta y
	; Assigning a string : this_str
	lda #<title_screen_stringassignstr344
	sta this_str
	lda #>title_screen_stringassignstr344
	sta this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 791
title_screen_elsedoneblock337
	; LineNumber: 793
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne title_screen_elseblock348
title_screen_ConditionalTrueBlock347: ;Main true block ;keep 
	; LineNumber: 794
	; LineNumber: 795
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$7
	; Calling storevariable on generic assign expression
	sta y
	lda #<R3
	ldx #>R3
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 797
	jmp title_screen_elsedoneblock349
title_screen_elseblock348
	; LineNumber: 798
	; LineNumber: 799
	lda #$0
	; Calling storevariable on generic assign expression
	sta x
	lda #$7
	; Calling storevariable on generic assign expression
	sta y
	; Assigning a string : this_str
	lda #<title_screen_stringassignstr356
	sta this_str
	lda #>title_screen_stringassignstr356
	sta this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 800
title_screen_elsedoneblock349
	; LineNumber: 803
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock361
title_screen_ConditionalTrueBlock359: ;Main true block ;keep 
	; LineNumber: 803
	; LineNumber: 807
	
; // GRAPHIC KEYBOARD
; // Numeric Keypad
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable on generic assign expression
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 808
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 809
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 810
	; Integer constant assigning
	ldy #$80
	; Calling storevariable on generic assign expression
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 813
	
; // Regular keys        
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable on generic assign expression
	sta key_up
	sty key_up+1
	; LineNumber: 814
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta key_down
	sty key_down+1
	; LineNumber: 815
	; Integer constant assigning
	lda #$04
	; Calling storevariable on generic assign expression
	sta key_left
	sty key_left+1
	; LineNumber: 816
	; Integer constant assigning
	ldy #$02
	; Calling storevariable on generic assign expression
	sta key_right
	sty key_right+1
	; LineNumber: 818
	lda #$1
	; Calling storevariable on generic assign expression
	sta READY_TO_PLAY
	; LineNumber: 819
	jsr ScrollY
	; LineNumber: 820
title_screen_elsedoneblock361
	; LineNumber: 823
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$08
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock367
title_screen_ConditionalTrueBlock365: ;Main true block ;keep 
	; LineNumber: 824
	; LineNumber: 826
	
; // BUSINESS KEYBOARD			
; // Numeric Keypad
	; Integer constant assigning
	ldy #$10
	lda #$00
	; Calling storevariable on generic assign expression
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 827
	; Integer constant assigning
	ldy #$80
	lda #$02
	; Calling storevariable on generic assign expression
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 828
	; Integer constant assigning
	lda #$05
	; Calling storevariable on generic assign expression
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 829
	; Integer constant assigning
	lda #$03
	; Calling storevariable on generic assign expression
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 832
	
; // Regular keys        
	; Integer constant assigning
	ldy #$02
	lda #$04
	; Calling storevariable on generic assign expression
	sta key_up
	sty key_up+1
	; LineNumber: 833
	; Integer constant assigning
	ldy #$04
	lda #$02
	; Calling storevariable on generic assign expression
	sta key_down
	sty key_down+1
	; LineNumber: 834
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable on generic assign expression
	sta key_left
	sty key_left+1
	; LineNumber: 835
	; Integer constant assigning
	ldy #$02
	; Calling storevariable on generic assign expression
	sta key_right
	sty key_right+1
	; LineNumber: 837
	lda #$1
	; Calling storevariable on generic assign expression
	sta READY_TO_PLAY
	; LineNumber: 838
	jsr ScrollY
	; LineNumber: 839
title_screen_elsedoneblock367
	; LineNumber: 842
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$05
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed375
	jmp title_screen_ConditionalTrueBlock371
title_screen_localfailed375: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx #$02
	ldy #$08
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock373
title_screen_ConditionalTrueBlock371: ;Main true block ;keep 
	; LineNumber: 842
	; LineNumber: 844
	lda #$2
	; Calling storevariable on generic assign expression
	sta READY_TO_PLAY
	; LineNumber: 845
	jsr ScrollY
	; LineNumber: 846
title_screen_elsedoneblock373
	; LineNumber: 851
	jmp title_screen_while176
title_screen_elsedoneblock179
title_screen_loopend181
	; LineNumber: 854
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 859
score_screen
	; LineNumber: 860
	jsr cls
	; LineNumber: 862
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock380
score_screen_ConditionalTrueBlock379: ;Main true block ;keep 
	; LineNumber: 862
	; LineNumber: 864
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 866
	jmp score_screen_elsedoneblock381
score_screen_elseblock380
	; LineNumber: 866
	; LineNumber: 868
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 869
score_screen_elsedoneblock381
	; LineNumber: 870
	lda petscii_pointer
	ldx petscii_pointer+1
	sta source_p
	stx source_p+1
	lda #<$8000
	ldx #>$8000
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 872
	; Binary clause Simplified: EQUALS
	lda DETECTED_SCREEN_WIDTH
	; Compare with pure num / var optimization
	cmp #$28;keep
	bne score_screen_elseblock388
score_screen_ConditionalTrueBlock387: ;Main true block ;keep 
	; LineNumber: 873
	; LineNumber: 873
	; memcpyfast
	ldx #12
score_screen_memcpy401
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy401
	; LineNumber: 874
	; memcpyfast
	ldx #12
score_screen_memcpy402
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy402
	; LineNumber: 875
	; memcpyfast
	ldx #12
score_screen_memcpy403
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy403
	; LineNumber: 876
	; memcpyfast
	ldx #12
score_screen_memcpy404
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy404
	; LineNumber: 879
	jmp score_screen_elsedoneblock389
score_screen_elseblock388
	; LineNumber: 880
	; LineNumber: 880
	; memcpyfast
	ldx #12
score_screen_memcpy406
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy406
	; LineNumber: 881
	; memcpyfast
	ldx #12
score_screen_memcpy407
	lda logo+ $0d,x
	sta $8050,x
	dex
	bpl score_screen_memcpy407
	; LineNumber: 882
	; memcpyfast
	ldx #12
score_screen_memcpy408
	lda logo+ $1a,x
	sta $80a0,x
	dex
	bpl score_screen_memcpy408
	; LineNumber: 883
	; memcpyfast
	ldx #12
score_screen_memcpy409
	lda logo+ $27,x
	sta $80f0,x
	dex
	bpl score_screen_memcpy409
	; LineNumber: 887
score_screen_elsedoneblock389
	; LineNumber: 889
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 890
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 892
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 893
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 895
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 895
	; integer assignment NodeVar
	ldy player_score+1 ; keep
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal414
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal414
	; LineNumber: 898
	jsr Key_Read
	; LineNumber: 901
score_screen_while415
score_screen_loopstart419
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_elsedoneblock418
score_screen_ConditionalTrueBlock416: ;Main true block ;keep 
	; LineNumber: 902
	; LineNumber: 903
	jsr Key_Read
	; LineNumber: 906
	; Binary clause Simplified: GREATEREQUAL
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc score_screen_abslabel438
	eor #$ff
	adc #$00
score_screen_abslabel438
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc score_screen_elseblock434
score_screen_ConditionalTrueBlock433: ;Main true block ;keep 
	; LineNumber: 907
	; LineNumber: 908
	lda #$e
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 910
	jmp score_screen_elsedoneblock435
score_screen_elseblock434
	; LineNumber: 910
	; LineNumber: 912
	lda #$e
	; Calling storevariable on generic assign expression
	sta x
	lda #$18
	; Calling storevariable on generic assign expression
	sta y
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	lda #$19
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 913
score_screen_elsedoneblock435
	; LineNumber: 914
	jmp score_screen_while415
score_screen_elsedoneblock418
score_screen_loopend420
	; LineNumber: 915
	jsr ScrollY
	; LineNumber: 916
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 922
	; LineNumber: 920
spr_p	=   $16
	; LineNumber: 918
spr_x	dc.b	0
	; LineNumber: 918
spr_y	dc.b	0
	; LineNumber: 918
source_str	=   $0B
	; LineNumber: 918
spr_len	dc.b	0
sprite_xy_block441
sprite_xy
	; LineNumber: 923
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var444 = $54
	sta sprite_xy_rightvarInteger_var444
	sty sprite_xy_rightvarInteger_var444+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var447 =   $56
	sta sprite_xy_rightvarInteger_var447
	sty sprite_xy_rightvarInteger_var447+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var447
sprite_xy_wordAdd445
	sta sprite_xy_rightvarInteger_var447
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var447+1
	tay
	lda sprite_xy_rightvarInteger_var447
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var444
sprite_xy_wordAdd442
	sta sprite_xy_rightvarInteger_var444
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var444+1
	tay
	lda sprite_xy_rightvarInteger_var444
	sta spr_p
	sty spr_p+1
	; LineNumber: 923
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy448
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy448
	; LineNumber: 925
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var451 = $54
	sta sprite_xy_rightvarInteger_var451
	sty sprite_xy_rightvarInteger_var451+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var454 =   $56
	sta sprite_xy_rightvarInteger_var454
	sty sprite_xy_rightvarInteger_var454+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var457 =   $58
	sta sprite_xy_rightvarInteger_var457
	sty sprite_xy_rightvarInteger_var457+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var457
sprite_xy_wordAdd455
	sta sprite_xy_rightvarInteger_var457
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var457+1
	tay
	lda sprite_xy_rightvarInteger_var457
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var454
sprite_xy_wordAdd452
	sta sprite_xy_rightvarInteger_var454
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var454+1
	tay
	lda sprite_xy_rightvarInteger_var454
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var451
sprite_xy_wordAdd449
	sta sprite_xy_rightvarInteger_var451
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var451+1
	tay
	lda sprite_xy_rightvarInteger_var451
	sta spr_p
	sty spr_p+1
	; LineNumber: 925
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy458
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy458
	; LineNumber: 927
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 935
	; LineNumber: 931
this_row	=   $16
	; LineNumber: 931
target_strip	=   $0B
	; LineNumber: 932
iteration	dc.b	0
	; LineNumber: 933
homeplate	dc.b	$d3
init_vars_block459
init_vars
	; LineNumber: 936
	jsr cls
	; LineNumber: 937
	lda #$0
	; Calling storevariable on generic assign expression
	sta FROGS_SAVED
	; LineNumber: 940
	; Calling storevariable on generic assign expression
	sta READY_TO_PLAY
	; LineNumber: 944
	
; //	Key::SetupScreenCodes();
; // Init the playfield
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 945
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 946
	ldx petscii_pointer+1
	sta source_p
	stx source_p+1
	lda #<screenmemory
	ldx #>screenmemory
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 947
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 948
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 962
	lda #$1
	; Calling storevariable on generic assign expression
	sta iteration
init_vars_forloop460
	; LineNumber: 952
	; LineNumber: 954
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy472
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy472
	; LineNumber: 955
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd473
	inc target_strip+1
init_vars_WordAdd473
	; LineNumber: 956
	; memcpyfast
	ldy #39
init_vars_memcpy474
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy474
	; LineNumber: 957
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd475
	inc target_strip+1
init_vars_WordAdd475
	; LineNumber: 960
	
; // Next row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd476
	inc this_row+1
init_vars_WordAdd476
	; LineNumber: 961
init_vars_forloopcounter462
init_vars_loopstart463
	; Compare is onpage
	; Test Inc dec D
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop460
init_vars_loopdone477: ;keep
init_vars_forloopend461
init_vars_loopend464
	; LineNumber: 964
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy478
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy478
	; LineNumber: 965
	; memcpy
	ldx #0
init_vars_memcpy479
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy479
	; LineNumber: 966
	; memcpy
	ldx #0
init_vars_memcpy480
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy480
	; LineNumber: 967
	; memcpy
	ldx #0
init_vars_memcpy481
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy481
	; LineNumber: 968
	; memcpy
	ldx #0
init_vars_memcpy482
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy482
	; LineNumber: 969
	; memcpy
	ldx #0
init_vars_memcpy483
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy483
	; LineNumber: 970
	; memcpy
	ldx #0
init_vars_memcpy484
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy484
	; LineNumber: 972
	; memcpy
	ldx #0
init_vars_memcpy485
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy485
	; LineNumber: 973
	; memcpy
	ldx #0
init_vars_memcpy486
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy486
	; LineNumber: 974
	; memcpy
	ldx #0
init_vars_memcpy487
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy487
	; LineNumber: 975
	; memcpy
	ldx #0
init_vars_memcpy488
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy488
	; LineNumber: 979
	
; // "Sprite" start positions
	lda #$a
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$0 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	lda #$9
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 980
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock492
init_vars_ConditionalTrueBlock490: ;Main true block ;keep 
	; LineNumber: 979
	; LineNumber: 980
	lda #$18
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$0 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 980
init_vars_elsedoneblock492
	; LineNumber: 982
	lda #$1e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$1 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	lda #$9
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 983
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock498
init_vars_ConditionalTrueBlock496: ;Main true block ;keep 
	; LineNumber: 982
	; LineNumber: 983
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$1 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 983
init_vars_elsedoneblock498
	; LineNumber: 985
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$2 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 986
	lda #$e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$2 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 988
	lda #$18
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$3 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 989
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock504
init_vars_ConditionalTrueBlock502: ;Main true block ;keep 
	; LineNumber: 988
	; LineNumber: 989
	lda #$22
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$3 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 989
init_vars_elsedoneblock504
	; LineNumber: 991
	lda #$a
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$4 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 992
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock510
init_vars_ConditionalTrueBlock508: ;Main true block ;keep 
	; LineNumber: 991
	; LineNumber: 992
	lda #$14
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$4 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 992
init_vars_elsedoneblock510
	; LineNumber: 993
	lda #$1e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$4 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 995
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$5 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 996
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$6 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 997
	lda #$22
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$5 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 998
	lda #$22
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$6 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1000
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock516
init_vars_ConditionalTrueBlock514: ;Main true block ;keep 
	; LineNumber: 999
	; LineNumber: 1001
	lda #$e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$5 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1002
	lda #$e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$6 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1003
init_vars_elsedoneblock516
	; LineNumber: 1005
	lda #$13
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$7 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1006
	lda #$13
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$8 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1007
	lda #$1d
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$7 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1008
	lda #$1d
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$8 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1010
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock522
init_vars_ConditionalTrueBlock520: ;Main true block ;keep 
	; LineNumber: 1009
	; LineNumber: 1011
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$7 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1012
	lda #$5
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$8 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	lda #$4
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1013
init_vars_elsedoneblock522
	; LineNumber: 1016
	lda #$0
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$9 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1017
	lda #$0
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$a ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1018
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock528
init_vars_ConditionalTrueBlock526: ;Main true block ;keep 
	; LineNumber: 1017
	; LineNumber: 1019
	lda #$a
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$9 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1020
	lda #$a
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$a ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1022
	lda #$1e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$9 ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1023
	lda #$1e
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$a ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1024
init_vars_elsedoneblock528
	; LineNumber: 1026
	lda #$13
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$b ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1027
	lda #$13
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$c ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1028
	lda #$20
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$b ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1029
	lda #$20
	; Calling storevariable on generic assign expression
	sta spr_x
	; Load Byte array
	lda obstacles_y +#$c ; array with const index optimization
	; Calling storevariable on generic assign expression
	sta spr_y
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	lda #$8
	; Calling storevariable on generic assign expression
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1031
	lda #$14
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1032
	lda #$18
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1034
	ldy #0   ; Force integer assignment, set y = 0 for values lower than 255
	lda #$0
	; Calling storevariable on generic assign expression
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 1035
	lda #$1
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 1036
	lda #$0
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 1038
	lda #$3
	; Calling storevariable on generic assign expression
	sta player_lives
	; LineNumber: 1039
	lda #$0
	; Calling storevariable on generic assign expression
	sta player_score
	sty player_score+1
	; LineNumber: 1042
	
; // Home plates
	lda #$3
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1043
	lda #$a
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1044
	lda #$12
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1045
	lda #$18
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1046
	lda #$1f
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1047
	lda #$25
	; Calling storevariable on generic assign expression
	sta x
	lda #$1
	; Calling storevariable on generic assign expression
	sta y
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1048
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1052
move_obstacles
	; LineNumber: 1055
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	; Test Inc dec D
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax532
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax532
	; LineNumber: 1056
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable on generic assign expression
	sta obstacles_x_lr
	; LineNumber: 1057
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 1061
move_traffic
	; LineNumber: 1064
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	; Test Inc dec D
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax534
	lda #$0
	sta traffic_x_rl
move_traffic_incmax534
	; LineNumber: 1065
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable on generic assign expression
	sta traffic_x_lr
	; LineNumber: 1066
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 1073
	; LineNumber: 1071
char_under	dc.b	0
frog_ride_block535
frog_ride
	; LineNumber: 1074
	lda frog_x
	; Calling storevariable on generic assign expression
	sta sx
	lda frog_y
	; Calling storevariable on generic assign expression
	sta sy
	jsr getat
	; Calling storevariable on generic assign expression
	sta char_under
	; LineNumber: 1077
	lda #$51
	cmp char_under ;keep
	bne frog_ride_casenext537
	; LineNumber: 1080
	; LineNumber: 1081
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock542
frog_ride_ConditionalTrueBlock540: ;Main true block ;keep 
	; LineNumber: 1082
	; LineNumber: 1083
	
; // Ride turtles and logs etc
	; Test Inc dec D
	dec frog_x
	; LineNumber: 1084
frog_ride_elsedoneblock542
	; LineNumber: 1085
	jmp frog_ride_caseend536
frog_ride_casenext537
	lda #$a8
	cmp char_under ;keep
	bne frog_ride_casenext545
	; LineNumber: 1088
	; LineNumber: 1089
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock550
frog_ride_ConditionalTrueBlock548: ;Main true block ;keep 
	; LineNumber: 1090
	; LineNumber: 1091
	
; // (
	; Test Inc dec D
	inc frog_x
	; LineNumber: 1092
frog_ride_elsedoneblock550
	; LineNumber: 1093
	jmp frog_ride_caseend536
frog_ride_casenext545
	lda #$a9
	cmp char_under ;keep
	bne frog_ride_casenext553
	; LineNumber: 1096
	; LineNumber: 1097
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock558
frog_ride_ConditionalTrueBlock556: ;Main true block ;keep 
	; LineNumber: 1098
	; LineNumber: 1099
	
; // ) 
	; Test Inc dec D
	dec frog_x
	; LineNumber: 1100
frog_ride_elsedoneblock558
	; LineNumber: 1101
	jmp frog_ride_caseend536
frog_ride_casenext553
	lda #$dc
	cmp char_under ;keep
	bne frog_ride_casenext561
	; LineNumber: 1104
	; LineNumber: 1105
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock566
frog_ride_localsuccess568: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock566
frog_ride_ConditionalTrueBlock564: ;Main true block ;keep 
	; LineNumber: 1106
	; LineNumber: 1107
	
; // Crock body 
	; Test Inc dec D
	inc frog_x
	; LineNumber: 1108
frog_ride_elsedoneblock566
	; LineNumber: 1110
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock573
frog_ride_localsuccess575: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock573
frog_ride_ConditionalTrueBlock571: ;Main true block ;keep 
	; LineNumber: 1111
	; LineNumber: 1112
	; Test Inc dec D
	dec frog_x
	; LineNumber: 1113
frog_ride_elsedoneblock573
	; LineNumber: 1114
frog_ride_casenext561
frog_ride_caseend536
	; LineNumber: 1116
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1123
	; LineNumber: 1120
strip_num	dc.b	0
	; LineNumber: 1120
this_strip	dc.b	0
	; LineNumber: 1121
this_source_offset	=   $16
	; LineNumber: 1122
game_move	dc.b	0
show_obstacles_block577
show_obstacles
	; LineNumber: 1126
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var583 = $54
	sta show_obstacles_val_var583
	lda GAME_TICKS
	sec
show_obstacles_modulo584
	sbc show_obstacles_val_var583
	bcs show_obstacles_modulo584
	adc show_obstacles_val_var583
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock581
show_obstacles_ConditionalTrueBlock579: ;Main true block ;keep 
	; LineNumber: 1127
	; LineNumber: 1128
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 1129
show_obstacles_elsedoneblock581
	; LineNumber: 1132
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var592 = $54
	sta show_obstacles_val_var592
	lda GAME_TICKS
	sec
show_obstacles_modulo593
	sbc show_obstacles_val_var592
	bcs show_obstacles_modulo593
	adc show_obstacles_val_var592
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock588
show_obstacles_ConditionalTrueBlock587: ;Main true block ;keep 
	; LineNumber: 1133
	; LineNumber: 1135
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 1136
	lda #$1
	; Calling storevariable on generic assign expression
	sta game_move
	; LineNumber: 1138
	jmp show_obstacles_elsedoneblock589
show_obstacles_elseblock588
	; LineNumber: 1139
	; LineNumber: 1140
	lda #$0
	; Calling storevariable on generic assign expression
	sta game_move
	; LineNumber: 1141
show_obstacles_elsedoneblock589
	; LineNumber: 1164
	lda #$0
	; Calling storevariable on generic assign expression
	sta strip_num
show_obstacles_forloop596
	; LineNumber: 1145
	; LineNumber: 1146
	
; // "Scroll" each line of obstacle according to direction
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable on generic assign expression
	sta this_strip
	; LineNumber: 1147
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var624 = $54
	sta show_obstacles_rightvarInteger_var624
	sty show_obstacles_rightvarInteger_var624+1
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var624
show_obstacles_wordAdd622
	sta show_obstacles_rightvarInteger_var624
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var624+1
	tay
	lda show_obstacles_rightvarInteger_var624
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1149
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var627 = $54
	sta show_obstacles_rightvarInteger_var627
	sty show_obstacles_rightvarInteger_var627+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var627
show_obstacles_wordAdd625
	sta show_obstacles_rightvarInteger_var627
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var627+1
	tay
	lda show_obstacles_rightvarInteger_var627
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1151
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock630
show_obstacles_ConditionalTrueBlock629: ;Main true block ;keep 
	; LineNumber: 1152
	; LineNumber: 1153
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd637
	inc this_source_offset+1
show_obstacles_WordAdd637
	; LineNumber: 1155
	jmp show_obstacles_elsedoneblock631
show_obstacles_elseblock630
	; LineNumber: 1156
	; LineNumber: 1157
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd639
	inc this_source_offset+1
show_obstacles_WordAdd639
	; LineNumber: 1158
show_obstacles_elsedoneblock631
	; LineNumber: 1159
	; memcpyfast
	ldy #39
show_obstacles_memcpy640
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy640
	; LineNumber: 1163
show_obstacles_forloopcounter598
show_obstacles_loopstart599
	; Test Inc dec D
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone641
show_obstacles_loopnotdone642
	jmp show_obstacles_forloop596
show_obstacles_loopdone641
show_obstacles_forloopend597
show_obstacles_loopend600
	; LineNumber: 1184
	lda #$5
	; Calling storevariable on generic assign expression
	sta strip_num
show_obstacles_forloop643
	; LineNumber: 1166
	; LineNumber: 1167
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable on generic assign expression
	sta this_strip
	; LineNumber: 1168
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var671 = $54
	sta show_obstacles_rightvarInteger_var671
	sty show_obstacles_rightvarInteger_var671+1
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var671
show_obstacles_wordAdd669
	sta show_obstacles_rightvarInteger_var671
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var671+1
	tay
	lda show_obstacles_rightvarInteger_var671
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1169
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var674 = $54
	sta show_obstacles_rightvarInteger_var674
	sty show_obstacles_rightvarInteger_var674+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var674
show_obstacles_wordAdd672
	sta show_obstacles_rightvarInteger_var674
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var674+1
	tay
	lda show_obstacles_rightvarInteger_var674
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1171
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock677
show_obstacles_ConditionalTrueBlock676: ;Main true block ;keep 
	; LineNumber: 1172
	; LineNumber: 1173
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd684
	inc this_source_offset+1
show_obstacles_WordAdd684
	; LineNumber: 1175
	jmp show_obstacles_elsedoneblock678
show_obstacles_elseblock677
	; LineNumber: 1176
	; LineNumber: 1177
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd686
	inc this_source_offset+1
show_obstacles_WordAdd686
	; LineNumber: 1178
show_obstacles_elsedoneblock678
	; LineNumber: 1179
	; memcpyfast
	ldy #39
show_obstacles_memcpy687
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy687
	; LineNumber: 1183
show_obstacles_forloopcounter645
show_obstacles_loopstart646
	; Test Inc dec D
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone688
show_obstacles_loopnotdone689
	jmp show_obstacles_forloop643
show_obstacles_loopdone688
show_obstacles_forloopend644
show_obstacles_loopend647
	; LineNumber: 1186
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock693
show_obstacles_ConditionalTrueBlock691: ;Main true block ;keep 
	; LineNumber: 1187
	; LineNumber: 1190
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1191
show_obstacles_elsedoneblock693
	; LineNumber: 1194
	
; // RESET SCREEN MEMORY
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1196
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1199
kill_frog
	; LineNumber: 1200
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta x
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta y
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1201
	lda frog_x
	; Calling storevariable on generic assign expression
	sta x
	lda frog_y
	; Calling storevariable on generic assign expression
	sta y
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1202
	lda #$20
	; Calling storevariable on generic assign expression
	sta previous_tile
	; LineNumber: 1203
	; Calling storevariable on generic assign expression
	sta next_tile
	; LineNumber: 1204
	lda #$14
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1205
	lda #$18
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1206
	lda frog_x
	; Calling storevariable on generic assign expression
	sta frog_old_x
	; LineNumber: 1207
	lda frog_y
	; Calling storevariable on generic assign expression
	sta frog_old_y
	; LineNumber: 1208
	jsr burp
	; LineNumber: 1209
	; Test Inc dec D
	dec player_lives
	; LineNumber: 1210
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1215
check_collisions
	; LineNumber: 1217
	
; // CHECK COLLISSIONS
	lda frog_x
	; Calling storevariable on generic assign expression
	sta sx
	lda frog_y
	; Calling storevariable on generic assign expression
	sta sy
	jsr getat
	; Calling storevariable on generic assign expression
	sta next_tile
	; LineNumber: 1223
	lda frogcharA
	cmp next_tile ;keep
	bne check_collisions_casenext699
	; LineNumber: 1227
	; LineNumber: 1228
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock704
check_collisions_ConditionalTrueBlock702: ;Main true block ;keep 
	; LineNumber: 1229
	; LineNumber: 1230
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1231
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1232
check_collisions_elsedoneblock704
	; LineNumber: 1233
	jmp check_collisions_caseend698
check_collisions_casenext699
	lda frogcharB
	cmp next_tile ;keep
	bne check_collisions_casenext707
	; LineNumber: 1235
	; LineNumber: 1236
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock712
check_collisions_ConditionalTrueBlock710: ;Main true block ;keep 
	; LineNumber: 1237
	; LineNumber: 1238
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1239
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1240
check_collisions_elsedoneblock712
	; LineNumber: 1241
	jmp check_collisions_caseend698
check_collisions_casenext707
	lda #$66
	cmp next_tile ;keep
	bne check_collisions_casenext715
	; LineNumber: 1244
	; LineNumber: 1245
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock720
check_collisions_ConditionalTrueBlock718: ;Main true block ;keep 
	; LineNumber: 1246
	; LineNumber: 1247
	
; // Scenery
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1248
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1249
check_collisions_elsedoneblock720
	; LineNumber: 1250
	jmp check_collisions_caseend698
check_collisions_casenext715
	lda #$68
	cmp next_tile ;keep
	bne check_collisions_casenext723
	; LineNumber: 1253
	; LineNumber: 1254
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1255
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1256
	jmp check_collisions_caseend698
check_collisions_casenext723
	lda #$5c
	cmp next_tile ;keep
	bne check_collisions_casenext725
	; LineNumber: 1259
	; LineNumber: 1260
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1261
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1262
	jmp check_collisions_caseend698
check_collisions_casenext725
	lda #$20
	cmp next_tile ;keep
	bne check_collisions_casenext727
	; LineNumber: 1268
	; LineNumber: 1269
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock732
check_collisions_localsuccess734: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock732
check_collisions_ConditionalTrueBlock730: ;Main true block ;keep 
	; LineNumber: 1270
	; LineNumber: 1271
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1272
check_collisions_elsedoneblock732
	; LineNumber: 1273
	jmp check_collisions_caseend698
check_collisions_casenext727
	lda #$f0
	cmp next_tile ;keep
	bne check_collisions_casenext736
	; LineNumber: 1278
	; LineNumber: 1279
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1280
	jmp check_collisions_caseend698
check_collisions_casenext736
	lda #$d7
	cmp next_tile ;keep
	bne check_collisions_casenext738
	; LineNumber: 1283
	; LineNumber: 1284
	jsr kill_frog
	; LineNumber: 1285
	jmp check_collisions_caseend698
check_collisions_casenext738
	lda #$ed
	cmp next_tile ;keep
	bne check_collisions_casenext740
	; LineNumber: 1288
	; LineNumber: 1289
	jsr kill_frog
	; LineNumber: 1291
	jmp check_collisions_caseend698
check_collisions_casenext740
	lda #$ee
	cmp next_tile ;keep
	bne check_collisions_casenext742
	; LineNumber: 1293
	; LineNumber: 1294
	jsr kill_frog
	; LineNumber: 1296
	jmp check_collisions_caseend698
check_collisions_casenext742
	lda #$fd
	cmp next_tile ;keep
	bne check_collisions_casenext744
	; LineNumber: 1299
	; LineNumber: 1300
	jsr kill_frog
	; LineNumber: 1302
	jmp check_collisions_caseend698
check_collisions_casenext744
	lda #$60
	cmp next_tile ;keep
	bne check_collisions_casenext746
	; LineNumber: 1305
	; LineNumber: 1306
	jsr kill_frog
	; LineNumber: 1308
	jmp check_collisions_caseend698
check_collisions_casenext746
	lda #$f3
	cmp next_tile ;keep
	bne check_collisions_casenext748
	; LineNumber: 1311
	; LineNumber: 1312
	jsr kill_frog
	; LineNumber: 1314
	jmp check_collisions_caseend698
check_collisions_casenext748
	lda #$eb
	cmp next_tile ;keep
	bne check_collisions_casenext750
	; LineNumber: 1317
	; LineNumber: 1318
	jsr kill_frog
	; LineNumber: 1320
	jmp check_collisions_caseend698
check_collisions_casenext750
	lda #$f0
	cmp next_tile ;keep
	bne check_collisions_casenext752
	; LineNumber: 1323
	; LineNumber: 1324
	jsr kill_frog
	; LineNumber: 1326
	jmp check_collisions_caseend698
check_collisions_casenext752
	lda #$c6
	cmp next_tile ;keep
	bne check_collisions_casenext754
	; LineNumber: 1330
	; LineNumber: 1331
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1333
	jmp check_collisions_caseend698
check_collisions_casenext754
	lda #$a2
	cmp next_tile ;keep
	bne check_collisions_casenext756
	; LineNumber: 1336
	; LineNumber: 1337
	jsr kill_frog
	; LineNumber: 1338
	jmp check_collisions_caseend698
check_collisions_casenext756
	lda #$d6
	cmp next_tile ;keep
	bne check_collisions_casenext758
	; LineNumber: 1343
	; LineNumber: 1344
	
; // HOME
; // Occupied
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1345
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1346
	jmp check_collisions_caseend698
check_collisions_casenext758
	lda #$d3
	cmp next_tile ;keep
	bne check_collisions_casenext760
	; LineNumber: 1349
	; LineNumber: 1350
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed776
	jmp check_collisions_ConditionalTrueBlock763
check_collisions_localfailed776: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock765
check_collisions_ConditionalTrueBlock763: ;Main true block ;keep 
	; LineNumber: 1351
	; LineNumber: 1352
	
; // Success
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd778
	inc player_score+1
check_collisions_WordAdd778
	; LineNumber: 1353
	; Test Inc dec D
	inc FROGS_SAVED
	; LineNumber: 1354
	jsr ping
	; LineNumber: 1356
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock781
check_collisions_ConditionalTrueBlock780: ;Main true block ;keep 
	; LineNumber: 1357
	; LineNumber: 1359
	
; // Yay you won!
	lda #$1
	; Calling storevariable on generic assign expression
	sta WON_GAME
	; LineNumber: 1361
	jmp check_collisions_elsedoneblock782
check_collisions_elseblock781
	; LineNumber: 1362
	; LineNumber: 1363
	lda #$14
	; Calling storevariable on generic assign expression
	sta frog_x
	; LineNumber: 1364
	lda #$18
	; Calling storevariable on generic assign expression
	sta frog_y
	; LineNumber: 1365
	lda frog_x
	; Calling storevariable on generic assign expression
	sta frog_old_x
	; LineNumber: 1366
	lda frog_y
	; Calling storevariable on generic assign expression
	sta frog_old_y
	; LineNumber: 1367
check_collisions_elsedoneblock782
	; LineNumber: 1368
check_collisions_elsedoneblock765
	; LineNumber: 1369
	jmp check_collisions_caseend698
check_collisions_casenext760
	; LineNumber: 1373
	; LineNumber: 1376
check_collisions_caseend698
	; LineNumber: 1377
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1387
game_loop
	; LineNumber: 1396
game_loop_while789
game_loop_loopstart793
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed912
game_loop_localsuccess913: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed912
	jmp game_loop_ConditionalTrueBlock790
game_loop_localfailed912
	jmp game_loop_elsedoneblock792
game_loop_ConditionalTrueBlock790: ;Main true block ;keep 
	; LineNumber: 1397
	; LineNumber: 1399
	
; //	Key::SetupScreenCodes();
; // Unit constants
	jsr Key_Read
	; LineNumber: 1401
	lda frog_x
	; Calling storevariable on generic assign expression
	sta frog_old_x
	; LineNumber: 1402
	lda frog_y
	; Calling storevariable on generic assign expression
	sta frog_old_y
	; LineNumber: 1403
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed928
	jmp game_loop_ConditionalTrueBlock916
game_loop_localfailed928: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock918
game_loop_ConditionalTrueBlock916: ;Main true block ;keep 
	; LineNumber: 1404
	; LineNumber: 1405
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock933
game_loop_ConditionalTrueBlock931: ;Main true block ;keep 
	; LineNumber: 1406
	; LineNumber: 1407
	; Test Inc dec D
	dec frog_y
	; LineNumber: 1408
	lda player_score
	clc
	adc #$01
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc game_loop_WordAdd937
	inc player_score+1
game_loop_WordAdd937
	; LineNumber: 1409
game_loop_elsedoneblock933
	; LineNumber: 1410
game_loop_elsedoneblock918
	; LineNumber: 1412
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed951
	jmp game_loop_ConditionalTrueBlock939
game_loop_localfailed951: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock941
game_loop_ConditionalTrueBlock939: ;Main true block ;keep 
	; LineNumber: 1413
	; LineNumber: 1414
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock956
game_loop_ConditionalTrueBlock954: ;Main true block ;keep 
	; LineNumber: 1415
	; LineNumber: 1416
	; Test Inc dec D
	inc frog_x
	; LineNumber: 1417
	lda player_score
	clc
	adc #$01
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc game_loop_WordAdd960
	inc player_score+1
game_loop_WordAdd960
	; LineNumber: 1418
game_loop_elsedoneblock956
	; LineNumber: 1419
game_loop_elsedoneblock941
	; LineNumber: 1421
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed974
	jmp game_loop_ConditionalTrueBlock962
game_loop_localfailed974: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock964
game_loop_ConditionalTrueBlock962: ;Main true block ;keep 
	; LineNumber: 1422
	; LineNumber: 1423
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock979
game_loop_ConditionalTrueBlock977: ;Main true block ;keep 
	; LineNumber: 1424
	; LineNumber: 1425
	; Test Inc dec D
	inc frog_y
	; LineNumber: 1426
	lda player_score
	clc
	adc #$01
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc game_loop_WordAdd983
	inc player_score+1
game_loop_WordAdd983
	; LineNumber: 1427
game_loop_elsedoneblock979
	; LineNumber: 1428
game_loop_elsedoneblock964
	; LineNumber: 1429
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed997
	jmp game_loop_ConditionalTrueBlock985
game_loop_localfailed997: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning to register
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock987
game_loop_ConditionalTrueBlock985: ;Main true block ;keep 
	; LineNumber: 1430
	; LineNumber: 1431
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock1002
game_loop_ConditionalTrueBlock1000: ;Main true block ;keep 
	; LineNumber: 1432
	; LineNumber: 1433
	; Test Inc dec D
	dec frog_x
	; LineNumber: 1434
	lda player_score
	clc
	adc #$01
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc game_loop_WordAdd1006
	inc player_score+1
game_loop_WordAdd1006
	; LineNumber: 1435
game_loop_elsedoneblock1002
	; LineNumber: 1436
game_loop_elsedoneblock987
	; LineNumber: 1439
	
; // So different things can move at own speeds
	; Test Inc dec D
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax1007
	lda #$1
	sta GAME_TICKS
game_loop_incmax1007
	; LineNumber: 1442
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1445
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1448
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock1011
game_loop_ConditionalTrueBlock1009: ;Main true block ;keep 
	; LineNumber: 1449
	; LineNumber: 1451
	
; // Still alive?
; // Dead and didn't win :(
	lda #$0
	; Calling storevariable on generic assign expression
	sta ALIVE
	; LineNumber: 1453
game_loop_elsedoneblock1011
	; LineNumber: 1458
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed1019
	jmp game_loop_ConditionalTrueBlock1015
game_loop_localfailed1019: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock1017
game_loop_ConditionalTrueBlock1015: ;Main true block ;keep 
	; LineNumber: 1459
	; LineNumber: 1460
	
; // only undraw if different
	lda frog_old_x
	; Calling storevariable on generic assign expression
	sta x
	lda frog_old_y
	; Calling storevariable on generic assign expression
	sta y
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1461
	lda frog_x
	; Calling storevariable on generic assign expression
	sta sx
	lda frog_y
	; Calling storevariable on generic assign expression
	sta sy
	jsr getat
	; Calling storevariable on generic assign expression
	sta previous_tile
	; LineNumber: 1462
game_loop_elsedoneblock1017
	; LineNumber: 1465
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock1023
game_loop_ConditionalTrueBlock1022: ;Main true block ;keep 
	; LineNumber: 1466
	; LineNumber: 1467
	
; // draw the frog because things might have changed onscreen
	lda frog_x
	; Calling storevariable on generic assign expression
	sta x
	lda frog_y
	; Calling storevariable on generic assign expression
	sta y
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1469
	jmp game_loop_elsedoneblock1024
game_loop_elseblock1023
	; LineNumber: 1470
	; LineNumber: 1471
	lda frog_x
	; Calling storevariable on generic assign expression
	sta x
	lda frog_y
	; Calling storevariable on generic assign expression
	sta y
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	lda #$1
	; Calling storevariable on generic assign expression
	sta str_len
	jsr textat
	; LineNumber: 1472
game_loop_elsedoneblock1024
	; LineNumber: 1477
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1477
	; integer assignment NodeVar
	ldy player_score+1 ; keep
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal1029
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1029
	; LineNumber: 1479
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1479
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal1030
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1030
	; LineNumber: 1483
	jmp game_loop_while789
game_loop_elsedoneblock792
game_loop_loopend794
	; LineNumber: 1485
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : intro_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1488
intro_loop
	; LineNumber: 1490
intro_loop_while1032
intro_loop_loopstart1036
	; Binary clause Simplified: NOTEQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$1;keep
	beq intro_loop_elsedoneblock1035
intro_loop_ConditionalTrueBlock1033: ;Main true block ;keep 
	; LineNumber: 1491
	; LineNumber: 1492
	jsr title_screen
	; LineNumber: 1493
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$2;keep
	bne intro_loop_elsedoneblock1049
intro_loop_ConditionalTrueBlock1047: ;Main true block ;keep 
	; LineNumber: 1492
	; LineNumber: 1493
	jsr help_screen
	; LineNumber: 1493
intro_loop_elsedoneblock1049
	; LineNumber: 1494
	jmp intro_loop_while1032
intro_loop_elsedoneblock1035
intro_loop_loopend1037
	; LineNumber: 1495
	rts
block1
	; LineNumber: 1499
	lda #$0
	; Calling storevariable on generic assign expression
	sta is_80
	; LineNumber: 1500
	jsr uppercase
	; LineNumber: 1501
	jsr is_80_columns
	; Calling storevariable on generic assign expression
	sta is_80
	; LineNumber: 1504
	; Binary clause Simplified: EQUALS
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock1055
MainProgram_ConditionalTrueBlock1053: ;Main true block ;keep 
	; LineNumber: 1505
	; LineNumber: 1506
	jsr cursor_down
	; LineNumber: 1507
	jsr cursor_return
	; LineNumber: 1508
	jsr cursor_graphic
	; LineNumber: 1510
	lda #$50
	; Calling storevariable on generic assign expression
	sta DETECTED_SCREEN_WIDTH
	; LineNumber: 1511
	; Poke
	; Optimization: shift is zero
	sta p_SW
	; LineNumber: 1512
MainProgram_elsedoneblock1055
	; LineNumber: 1513
	; LineNumber: 1515
	; Assigning memory location
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable on generic assign expression
	sta $8000
	; LineNumber: 1516
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1519
	jsr cls
	; LineNumber: 1521
MainProgram_while1058
MainProgram_loopstart1062
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock1061
MainProgram_ConditionalTrueBlock1059: ;Main true block ;keep 
	; LineNumber: 1522
	; LineNumber: 1524
	jsr intro_loop
	; LineNumber: 1525
	jsr init_vars
	; LineNumber: 1526
	jsr game_loop
	; LineNumber: 1527
	jsr score_screen
	; LineNumber: 1528
	jmp MainProgram_while1058
MainProgram_elsedoneblock1061
MainProgram_loopend1063
	; LineNumber: 1532
	; End of program
	; Ending memory block
EndBlock410
title_screen_stringassignstr230		dc.b	1
	dc.b	0
title_screen_stringassignstr234		dc.b	1
	dc.b	0
title_screen_stringassignstr242		dc.b	2
	dc.b	0
title_screen_stringassignstr246		dc.b	2
	dc.b	0
title_screen_stringassignstr254		dc.b	3
	dc.b	0
title_screen_stringassignstr258		dc.b	3
	dc.b	0
title_screen_stringassignstr328		dc.b	1
	dc.b	0
title_screen_stringassignstr332		dc.b	1
	dc.b	0
title_screen_stringassignstr340		dc.b	2
	dc.b	0
title_screen_stringassignstr344		dc.b	2
	dc.b	0
title_screen_stringassignstr352		dc.b	3
	dc.b	0
title_screen_stringassignstr356		dc.b	3
	dc.b	0
