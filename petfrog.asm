 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1484
	jmp block1
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 13
ti = $8f
	; LineNumber: 22
p_SW	= $02
	; LineNumber: 25
DETECTED_SCREEN_WIDTH	dc.b	$28
	; LineNumber: 34
KEYPRESS	dc.w	$ff
	; LineNumber: 36
ks	dc.b	$00
	; LineNumber: 38
n_key_up	dc.w	0
	; LineNumber: 38
n_key_down	dc.w	0
	; LineNumber: 38
n_key_left	dc.w	0
	; LineNumber: 38
n_key_right	dc.w	0
	; LineNumber: 38
key_up	dc.w	0
	; LineNumber: 38
key_down	dc.w	0
	; LineNumber: 38
key_left	dc.w	0
	; LineNumber: 38
key_right	dc.w	0
	; LineNumber: 45
PLAY_SOUND	dc.b	$01
	; LineNumber: 46
GAME_SPEED	dc.b	$08
	; LineNumber: 47
ALIVE	dc.b	$01
	; LineNumber: 48
WON_GAME	dc.b	$00
	; LineNumber: 49
FROGS_SAVED	dc.b	$00
	; LineNumber: 50
GAME_TICKS	dc.b	$00
	; LineNumber: 51
READY_TO_PLAY	dc.b	$00
	; LineNumber: 58
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 59
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 60
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 61
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 62
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 63
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 64
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 65
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 66
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 67
is_80	dc.b	0
	; LineNumber: 72
help_screen_array	
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 78, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	77, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 16, 5, 20, 6, 18, 15, 7, 32
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 116
	dc.b	42, 32, 18, 5, 17, 21, 9, 18, 5
	dc.b	19, 32, 7, 18, 1, 16, 8, 9, 3
	dc.b	32, 11, 5, 25, 2, 15, 1, 18, 4
	dc.b	32, 32, 32, 103, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 116, 42, 32, 16, 12, 1
	dc.b	25, 32, 9, 14, 32, 52, 48, 32, 3
	dc.b	15, 12, 21, 13, 14, 32, 13, 15, 4
	dc.b	5, 32, 32, 32, 32, 32, 32, 103, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 116, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 103, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 116, 2, 18, 9, 14, 7, 32
	dc.b	25, 15, 21, 18, 32, 6, 18, 15, 7
	dc.b	7, 9, 5, 19, 32, 8, 15, 13, 5
	dc.b	33, 32, 32, 32, 32, 32, 103, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 116, 1, 22
	dc.b	15, 9, 4, 32, 20, 18, 1, 6, 6
	dc.b	9, 3, 32, 1, 14, 4, 32, 3, 18
	dc.b	15, 3, 32, 13, 15, 21, 20, 8, 19
	dc.b	32, 103, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 116, 2, 5, 20, 23, 5, 5, 14
	dc.b	32, 18, 9, 22, 5, 18, 32, 2, 1
	dc.b	14, 11, 19, 32, 9, 19, 32, 4, 5
	dc.b	1, 4, 12, 25, 32, 106, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 116, 18, 9, 4
	dc.b	5, 32, 12, 15, 7, 19, 44, 32, 3
	dc.b	18, 15, 3, 32, 2, 15, 4, 19, 32
	dc.b	43, 32, 20, 21, 18, 20, 12, 5, 19
	dc.b	103, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 230, 32, 7, 5
	dc.b	20, 32, 19, 9, 24, 32, 6, 18, 15
	dc.b	7, 19, 32, 15, 14, 32, 83, 32, 20
	dc.b	15, 32, 23, 9, 14, 33, 32, 102, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 77
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 32, 32, 32
	dc.b	32, 32, 111, 78, 108, 226, 123, 32, 98
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 97, 32, 32, 32, 254, 126, 32, 32
	dc.b	32, 32, 124, 32, 127, 32, 32, 32, 32
	dc.b	32, 32, 32, 98, 98, 98, 98, 98, 32
	dc.b	32, 85, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 64, 64, 64, 73, 251, 32, 32, 225
	dc.b	126, 32, 32, 108, 160, 123, 108, 160, 123
	dc.b	32, 32, 32, 32, 108, 160, 160, 160, 226
	dc.b	32, 32, 124, 123, 32, 93, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 93
	dc.b	225, 123, 32, 225, 123, 32, 32, 225, 254
	dc.b	252, 254, 254, 252, 123, 32, 32, 32, 254
	dc.b	226, 97, 108, 98, 160, 252, 32, 251, 32
	dc.b	93, 11, 5, 25, 19, 58, 32, 32, 32
	dc.b	32, 32, 32, 93, 32, 251, 123, 32, 252
	dc.b	32, 108, 160, 160, 160, 160, 252, 124, 160
	dc.b	32, 32, 32, 236, 254, 108, 160, 160, 236
	dc.b	225, 32, 124, 252, 93, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 93, 32
	dc.b	32, 124, 127, 255, 127, 123, 124, 251, 160
	dc.b	160, 126, 252, 160, 32, 32, 225, 126, 97
	dc.b	225, 160, 126, 254, 126, 32, 98, 236, 93
	dc.b	32, 32, 32, 32, 32, 23, 32, 32, 32
	dc.b	56, 32, 93, 32, 32, 32, 32, 124, 226
	dc.b	126, 32, 108, 108, 123, 108, 160, 160, 32
	dc.b	32, 160, 108, 97, 32, 226, 226, 32, 98
	dc.b	236, 126, 108, 93, 127, 123, 32, 32, 1
	dc.b	19, 4, 32, 52, 53, 54, 93, 32, 32
	dc.b	32, 32, 32, 32, 160, 252, 124, 226, 108
	dc.b	160, 251, 160, 32, 32, 97, 225, 32, 32
	dc.b	32, 98, 226, 126, 32, 255, 252, 74, 64
	dc.b	64, 64, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 75, 32, 32, 32, 32, 225, 123, 225
	dc.b	160, 160, 160, 160, 126, 254, 160, 32, 225
	dc.b	97, 160, 32, 254, 226, 126, 98, 160, 252
	dc.b	123, 108, 124, 32, 32, 97, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	252, 108, 97, 124, 160, 160, 98, 98, 254
	dc.b	160, 160, 32, 32, 251, 123, 251, 123, 32
	dc.b	160, 160, 160, 236, 126, 32, 32, 123, 126
	dc.b	97, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 108, 32, 160, 160, 123, 32
	dc.b	160, 160, 160, 160, 160, 160, 32, 32, 124
	dc.b	160, 123, 251, 123, 124, 226, 126, 32, 32
	dc.b	98, 236, 108, 226, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 226
	dc.b	251, 160, 160, 254, 254, 160, 160, 160, 160
	dc.b	160, 0
	; LineNumber: 116
frogcharA	dc.b	$d6
	; LineNumber: 117
frogcharB	dc.b	$56
	; LineNumber: 118
frog_x	dc.b	$14
	; LineNumber: 118
frog_old_x	dc.b	$14
	; LineNumber: 119
frog_y	dc.b	$18
	; LineNumber: 119
frog_old_y	dc.b	$18
	; LineNumber: 120
previous_tile	dc.b	$20
	; LineNumber: 121
next_tile	dc.b	0
	; LineNumber: 122
player_lives	dc.b	$00
	; LineNumber: 123
player_score	dc.w	$00
	; LineNumber: 125
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 126
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 128
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 129
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 132
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 133
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 135
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 136
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 138
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 139
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 141
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 142
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 144
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 145
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 149
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 150
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 151
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 152
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 160
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 161
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 162
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 163
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 168
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 169
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 171
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 174
traffic_x_rl	dc.b	0
	; LineNumber: 174
traffic_x_lr	dc.b	0
	; LineNumber: 175
obstacles_x_rl	dc.b	0
	; LineNumber: 175
obstacles_x_lr	dc.b	0
	; LineNumber: 179
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 187
title_screen_frog_pointer	=                  $04
	; LineNumber: 188
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 216
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 244
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 273
petscii_pointer	=                  $08
	; LineNumber: 307
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 383
Key_Read
	; LineNumber: 385
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 414
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop5
	; LineNumber: 388
	; LineNumber: 390
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 392
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 413
Key_Read_forloopcounter7
Key_Read_loopstart8
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop5
Key_Read_loopdone12: ;keep
Key_Read_forloopend6
Key_Read_loopend9
	; LineNumber: 415
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 431
	; LineNumber: 430
Key_Pressed_block13
Key_Pressed
	; LineNumber: 433
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 441
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 351
cls
	; LineNumber: 352
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop16
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop16
	; LineNumber: 353
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 354
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 370
uppercase
	; LineNumber: 371
	; Assigning register : _a
	lda #$8e
	; LineNumber: 372
	jsr $FFD2
	; LineNumber: 373
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_home
	;    Procedure type : User-defined procedure
	; LineNumber: 377
cursor_home
	; LineNumber: 379
	; Assigning register : _a
	lda #$13
	; LineNumber: 380
	jsr $FFD2
	; LineNumber: 382
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 393
cursor_return
	; LineNumber: 395
	; Assigning register : _a
	lda #$d
	; LineNumber: 396
	jsr $FFD2
	; LineNumber: 398
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 401
cursor_down
	; LineNumber: 403
	; Assigning register : _a
	lda #$11
	; LineNumber: 404
	jsr $FFD2
	; LineNumber: 406
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 417
cursor_graphic
	; LineNumber: 419
	; Assigning register : _a
	lda #$8e
	; LineNumber: 420
	jsr $FFD2
	; LineNumber: 422
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 466
	; LineNumber: 463
char	dc.b	0
	; LineNumber: 464
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 465
screen_pointer	=                  $16
is_80_columns_block22
is_80_columns
	; LineNumber: 468
	; Assigning single variable : screen_pointer
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 469
	jsr uppercase
	; LineNumber: 476
	; Assigning single variable : char
	lda #$0
	; Calling storevariable
	sta char
is_80_columns_forloop23
	; LineNumber: 472
	; LineNumber: 473
	; Assigning register : _a
	; Load Unknown type array
	ldx char
	lda test_string,x
	; LineNumber: 474
	jsr $FFD2
	; LineNumber: 475
is_80_columns_forloopcounter25
is_80_columns_loopstart26
	; Compare is onpage
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop23
is_80_columns_loopdone30: ;keep
is_80_columns_forloopend24
is_80_columns_loopend27
	; LineNumber: 477
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock33
is_80_columns_ConditionalTrueBlock32: ;Main true block ;keep 
	; LineNumber: 478
	; LineNumber: 479
	lda #$1
	rts
	; LineNumber: 481
	jmp is_80_columns_elsedoneblock34
is_80_columns_elseblock33
	; LineNumber: 482
	; LineNumber: 483
	lda #$0
	rts
	; LineNumber: 484
is_80_columns_elsedoneblock34
	; LineNumber: 486
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 542
	; LineNumber: 540
szp	=                  $16
	; LineNumber: 538
sx	dc.b	0
	; LineNumber: 538
sy	dc.b	0
getat_block39
getat
	; LineNumber: 543
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var42 = $54
	sta getat_rightvarInteger_var42
	sty getat_rightvarInteger_var42+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var45 =                  $56
	sta getat_rightvarInteger_var45
	sty getat_rightvarInteger_var45+1
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var45
getat_wordAdd43
	sta getat_rightvarInteger_var45
	; High-bit binop
	tya
	adc getat_rightvarInteger_var45+1
	tay
	lda getat_rightvarInteger_var45
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var42
getat_wordAdd40
	sta getat_rightvarInteger_var42
	; High-bit binop
	tya
	adc getat_rightvarInteger_var42+1
	tay
	lda getat_rightvarInteger_var42
	sta szp
	sty szp+1
	; LineNumber: 544
	; LineNumber: 545
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 551
	; LineNumber: 549
zp	=                  $16
	; LineNumber: 547
x	dc.b	0
	; LineNumber: 547
y	dc.b	0
	; LineNumber: 547
this_str	=                  $0B
	; LineNumber: 547
str_len	dc.b	0
textat_block46
textat
	; LineNumber: 552
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var49 = $54
	sta textat_rightvarInteger_var49
	sty textat_rightvarInteger_var49+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var52 =                  $56
	sta textat_rightvarInteger_var52
	sty textat_rightvarInteger_var52+1
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var52
textat_wordAdd50
	sta textat_rightvarInteger_var52
	; High-bit binop
	tya
	adc textat_rightvarInteger_var52+1
	tay
	lda textat_rightvarInteger_var52
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var49
textat_wordAdd47
	sta textat_rightvarInteger_var49
	; High-bit binop
	tya
	adc textat_rightvarInteger_var49+1
	tay
	lda textat_rightvarInteger_var49
	sta zp
	sty zp+1
	; LineNumber: 552
	; memcpyfast
	ldy str_len
	dey
textat_memcpy53
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy53
	; LineNumber: 554
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 573
	; LineNumber: 572
note_duration	dc.b	0
	; LineNumber: 570
note	dc.b	0
	; LineNumber: 570
note_len	dc.b	0
PlayNote_block54
PlayNote
	; LineNumber: 574
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock58
PlayNote_ConditionalTrueBlock56: ;Main true block ;keep 
	; LineNumber: 575
	; LineNumber: 576
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 578
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop69
	; LineNumber: 576
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter71
PlayNote_loopstart72
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop69
PlayNote_loopdone76: ;keep
PlayNote_forloopend70
PlayNote_loopend73
	; LineNumber: 578
PlayNote_elsedoneblock58
	; LineNumber: 579
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 582
burp
	; LineNumber: 583
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 584
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 585
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 586
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 587
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 590
ping
	; LineNumber: 591
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 592
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 593
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 594
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 595
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 596
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 597
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 598
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : copy_8040_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 606
	; LineNumber: 604
mc_row	dc.b	0
	; LineNumber: 605
src_row	=                  $16
	; LineNumber: 605
dest_row	=                  $0B
	; LineNumber: 602
source_p	=                  $0D
	; LineNumber: 602
dest_p	=                  $10
copy_8040_screen_block79
copy_8040_screen
	; LineNumber: 613
	; Assigning single variable : mc_row
	lda #$0
	; Calling storevariable
	sta mc_row
copy_8040_screen_forloop80
	; LineNumber: 609
	; LineNumber: 610
	; Assigning single variable : src_row
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy source_p+1 ; Next one
	lda source_p
copy_8040_screen_rightvarInteger_var92 = $54
	sta copy_8040_screen_rightvarInteger_var92
	sty copy_8040_screen_rightvarInteger_var92+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda mc_row
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc copy_8040_screen_rightvarInteger_var92
copy_8040_screen_wordAdd90
	sta copy_8040_screen_rightvarInteger_var92
	; High-bit binop
	tya
	adc copy_8040_screen_rightvarInteger_var92+1
	tay
	lda copy_8040_screen_rightvarInteger_var92
	sta src_row
	sty src_row+1
	; LineNumber: 611
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda mc_row
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda src_row
	ldx src_row+1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$28
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 612
copy_8040_screen_forloopcounter82
copy_8040_screen_loopstart83
	; Compare is onpage
	inc mc_row
	lda #$18
	cmp mc_row ;keep
	bcs copy_8040_screen_forloop80
copy_8040_screen_loopdone93: ;keep
copy_8040_screen_forloopend81
copy_8040_screen_loopend84
	; LineNumber: 613
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 619
	; LineNumber: 617
c_row	=                  $16
	; LineNumber: 617
p_row	=                  $0B
	; LineNumber: 618
scroll	dc.b	0
	; LineNumber: 618
scrolls	dc.b	0
ScrollY_block94
ScrollY
	; LineNumber: 634
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop95
	; LineNumber: 620
	; LineNumber: 622
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 623
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc DETECTED_SCREEN_WIDTH
	sta c_row+0
	lda p_row+1
	adc #0
	sta c_row+1
	; LineNumber: 630
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop120
	; LineNumber: 625
	; LineNumber: 625
	; memcpyfast
	ldy DETECTED_SCREEN_WIDTH
	dey
ScrollY_memcpy130
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy130
	; LineNumber: 627
	; Assigning single variable : p_row
	lda p_row
	clc
	adc DETECTED_SCREEN_WIDTH
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd131
	inc p_row+1
ScrollY_WordAdd131
	; LineNumber: 628
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc DETECTED_SCREEN_WIDTH
	sta c_row+0
	lda p_row+1
	adc #0
	sta c_row+1
	; LineNumber: 629
ScrollY_forloopcounter122
ScrollY_loopstart123
	; Compare is onpage
	inc scroll
	lda #$18
	cmp scroll ;keep
	bcs ScrollY_forloop120
ScrollY_loopdone133: ;keep
ScrollY_forloopend121
ScrollY_loopend124
	; LineNumber: 630
	ldy DETECTED_SCREEN_WIDTH ; optimized, look out for bugs
	lda #$20
ScrollY_fill134
	sta (p_row),y
	dey
	bpl ScrollY_fill134
	; LineNumber: 631
	ldy DETECTED_SCREEN_WIDTH ; optimized, look out for bugs
	lda #$20
ScrollY_fill135
	sta (c_row),y
	dey
	bpl ScrollY_fill135
	; LineNumber: 632
	jsr Crt_WaitVblStart
	; LineNumber: 633
ScrollY_forloopcounter97
ScrollY_loopstart98
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	beq ScrollY_loopdone136
ScrollY_loopnotdone137
	jmp ScrollY_forloop95
ScrollY_loopdone136
ScrollY_forloopend96
ScrollY_loopend99
	; LineNumber: 635
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 646
	; LineNumber: 640
hks	dc.b	0
	; LineNumber: 640
_ctr	dc.b	0
	; LineNumber: 641
help_screen_pointer	=                  $16
	; LineNumber: 641
str_pointer	=                  $0B
	; LineNumber: 644
thanks_string	
	dc.b	$14, $08, $01, $0e, $0b, $13, $20, $00, $0c
	dc.b	$05, $15, $01, $14, $20, $26, $20, $14, $08
	dc.b	$05, $20, $14, $12, $13, $05, $20, $03, $0f
	dc.b	$0d, $0d, $15, $0e, $09, $14, $19, $20, $20
	dc.b	$20, $10, $12, $05, $13, $13, $20, $01, $0e
	dc.b	$19, $20, $0b, $05, $19, $20, $14, $0f, $20
	dc.b	$03, $0f, $0e, $14, $09, $0e, $15, $05, $20
	dc.b	$20, $14, $08, $01, $0e, $0b, $13, $20, $00
	dc.b	$0c, $05, $15, $01, $14, $20, $26, $20, $14
	dc.b	$08, $05, $20, $14, $12, $13, $05, $20, $03
	dc.b	$0f, $0d, $0d, $15, $0e, $09, $14, $19, $20
	dc.b	$20, $20, $10, $12, $05, $13, $13, $20, $01
	dc.b	$0e, $19, $20, $0b, $05, $19, $20, $14, $0f
	dc.b	$20, $03, $0f, $0e, $14, $09, $0e, $15, $05
	dc.b	$20, $20, 0
help_screen_block138
help_screen
	; LineNumber: 649
	
; //        10		20			30		DETECTED_SCREEN_WIDTH		  50		  60		<	
; //123456789_123456789_123456789_123456789_1234567890123456789_12345678901234567890	
; // Set up pointer to array:
	; Assigning single variable : help_screen_pointer
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 650
	; Assigning single variable : hks
	lda #$0
	; Calling storevariable
	sta hks
	; LineNumber: 651
	jsr cls
	; LineNumber: 652
	jsr cursor_home
	; LineNumber: 655
	
; // Draw the frog
	; Assigning single variable : source_p
	lda help_screen_pointer
	ldx help_screen_pointer+1
	sta source_p
	stx source_p+1
	; Assigning single variable : dest_p
	lda #<$8000
	ldx #>$8000
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 658
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 660
help_screen_while139
help_screen_loopstart143
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock142
help_screen_ConditionalTrueBlock140: ;Main true block ;keep 
	; LineNumber: 661
	; LineNumber: 662
	jsr Key_Read
	; LineNumber: 663
	; Assigning single variable : _ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	cmp #127
	bcc help_screen_abslabel149
	eor #$ff
	adc #$00
help_screen_abslabel149
	; Calling storevariable
	sta _ctr
	; LineNumber: 664
	; Assigning single variable : x
	lda #$c
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$2
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	; INTEGER optimization: a=b+c 
	lda #<thanks_string
	clc
	adc _ctr
	sta this_str+0
	lda #>thanks_string
	adc #0
	sta this_str+1
	; Assigning single variable : str_len
	lda #$11
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 665
	jmp help_screen_while139
help_screen_elsedoneblock142
help_screen_loopend144
	; LineNumber: 666
	; Assigning single variable : READY_TO_PLAY
	lda #$0
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 667
	jsr ScrollY
	; LineNumber: 668
	rts
	; LineNumber: 671
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 684
	; LineNumber: 675
ctr	dc.b	0
	; LineNumber: 675
slide	dc.b	0
	; LineNumber: 676
DIFFICULTY	
	dc.b	$04, $09, $06, $06, $09, $03, $15, $0c, $14
	dc.b	$19, 0
	; LineNumber: 677
DIFFICULTY1	
	dc.b	$31, $20, $05, $01, $13, $19, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 678
DIFFICULTY2	
	dc.b	$32, $20, $0d, $05, $04, $09, $15, $0d, $20
	dc.b	$20, 0
	; LineNumber: 679
DIFFICULTY3	
	dc.b	$33, $20, $08, $01, $12, $04, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 680
R1	dc.b	$b1
	; LineNumber: 681
R2	dc.b	$b2
	; LineNumber: 682
R3	dc.b	$b3
title_screen_block151
title_screen
	; LineNumber: 687
	
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 688
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 689
	jsr cls
	; LineNumber: 692
	
; // Draw the frog
	; Assigning single variable : source_p
	lda title_screen_frog_pointer
	ldx title_screen_frog_pointer+1
	sta source_p
	stx source_p+1
	; Assigning single variable : dest_p
	lda #<screenmemory
	ldx #>screenmemory
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 694
	; Binary clause Simplified: EQUALS
	lda DETECTED_SCREEN_WIDTH
	; Compare with pure num / var optimization
	cmp #$28;keep
	bne title_screen_elseblock154
title_screen_ConditionalTrueBlock153: ;Main true block ;keep 
	; LineNumber: 695
	; LineNumber: 695
	; memcpyfast
	ldx #12
title_screen_memcpy167
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy167
	; LineNumber: 696
	; memcpyfast
	ldx #12
title_screen_memcpy168
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy168
	; LineNumber: 697
	; memcpyfast
	ldx #12
title_screen_memcpy169
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy169
	; LineNumber: 698
	; memcpyfast
	ldx #12
title_screen_memcpy170
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy170
	; LineNumber: 701
	jmp title_screen_elsedoneblock155
title_screen_elseblock154
	; LineNumber: 702
	; LineNumber: 702
	; memcpyfast
	ldx #12
title_screen_memcpy172
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy172
	; LineNumber: 703
	; memcpyfast
	ldx #12
title_screen_memcpy173
	lda logo+ $0d,x
	sta $8050,x
	dex
	bpl title_screen_memcpy173
	; LineNumber: 704
	; memcpyfast
	ldx #12
title_screen_memcpy174
	lda logo+ $1a,x
	sta $80a0,x
	dex
	bpl title_screen_memcpy174
	; LineNumber: 705
	; memcpyfast
	ldx #12
title_screen_memcpy175
	lda logo+ $27,x
	sta $80f0,x
	dex
	bpl title_screen_memcpy175
	; LineNumber: 709
title_screen_elsedoneblock155
	; LineNumber: 712
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 713
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 714
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 715
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$4
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY
	ldx #>DIFFICULTY
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 716
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY1
	ldx #>DIFFICULTY1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 717
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY2
	ldx #>DIFFICULTY2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 718
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY3
	ldx #>DIFFICULTY3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 723
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 726
title_screen_while176
title_screen_loopstart180
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed279
	jmp title_screen_ConditionalTrueBlock177
title_screen_localfailed279
	jmp title_screen_elsedoneblock179
title_screen_ConditionalTrueBlock177: ;Main true block ;keep 
	; LineNumber: 727
	; LineNumber: 729
	jsr Key_Read
	; LineNumber: 730
	; Assigning single variable : ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc title_screen_abslabel281
	eor #$ff
	adc #$00
title_screen_abslabel281
	; Calling storevariable
	sta ctr
	; LineNumber: 731
	cmp #$1 ;keep
	bne title_screen_casenext283
	; LineNumber: 731
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext283
	lda ctr
	cmp #$2 ;keep
	bne title_screen_casenext285
	; LineNumber: 732
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext285
	lda ctr
	cmp #$3 ;keep
	bne title_screen_casenext287
	; LineNumber: 733
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext287
	lda ctr
	cmp #$4 ;keep
	bne title_screen_casenext289
	; LineNumber: 734
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext289
	lda ctr
	cmp #$5 ;keep
	bne title_screen_casenext291
	; LineNumber: 735
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext291
	lda ctr
	cmp #$6 ;keep
	bne title_screen_casenext293
	; LineNumber: 736
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext293
	lda ctr
	cmp #$7 ;keep
	bne title_screen_casenext295
	; LineNumber: 737
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext295
	lda ctr
	cmp #$8 ;keep
	bne title_screen_casenext297
	; LineNumber: 738
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext297
	lda ctr
	cmp #$0 ;keep
	bne title_screen_casenext299
	; LineNumber: 739
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend282
title_screen_casenext299
title_screen_caseend282
	; LineNumber: 747
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed306
	jmp title_screen_ConditionalTrueBlock302
title_screen_localfailed306: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$08
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock304
title_screen_ConditionalTrueBlock302: ;Main true block ;keep 
	; LineNumber: 747
	; LineNumber: 749
	
; // hard 	GAME_SPEED:=4;
; // medium GAME_SPEED:=5;	
; // easy GAME_SPEED:=8;
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 750
title_screen_elsedoneblock304
	; LineNumber: 752
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$07
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed313
	jmp title_screen_ConditionalTrueBlock309
title_screen_localfailed313: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$07
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock311
title_screen_ConditionalTrueBlock309: ;Main true block ;keep 
	; LineNumber: 752
	; LineNumber: 754
	; Assigning single variable : GAME_SPEED
	lda #$5
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 755
title_screen_elsedoneblock311
	; LineNumber: 757
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed320
	jmp title_screen_ConditionalTrueBlock316
title_screen_localfailed320: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock318
title_screen_ConditionalTrueBlock316: ;Main true block ;keep 
	; LineNumber: 757
	; LineNumber: 759
	; Assigning single variable : GAME_SPEED
	lda #$4
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 760
title_screen_elsedoneblock318
	; LineNumber: 762
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$8;keep
	bne title_screen_elseblock324
title_screen_ConditionalTrueBlock323: ;Main true block ;keep 
	; LineNumber: 763
	; LineNumber: 764
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R1
	ldx #>R1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 766
	jmp title_screen_elsedoneblock325
title_screen_elseblock324
	; LineNumber: 767
	; LineNumber: 768
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr332
	sta this_str
	lda #>title_screen_stringassignstr332
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 769
title_screen_elsedoneblock325
	; LineNumber: 771
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bne title_screen_elseblock336
title_screen_ConditionalTrueBlock335: ;Main true block ;keep 
	; LineNumber: 772
	; LineNumber: 773
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R2
	ldx #>R2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 775
	jmp title_screen_elsedoneblock337
title_screen_elseblock336
	; LineNumber: 776
	; LineNumber: 777
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr344
	sta this_str
	lda #>title_screen_stringassignstr344
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 778
title_screen_elsedoneblock337
	; LineNumber: 780
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne title_screen_elseblock348
title_screen_ConditionalTrueBlock347: ;Main true block ;keep 
	; LineNumber: 781
	; LineNumber: 782
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R3
	ldx #>R3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 784
	jmp title_screen_elsedoneblock349
title_screen_elseblock348
	; LineNumber: 785
	; LineNumber: 786
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr356
	sta this_str
	lda #>title_screen_stringassignstr356
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 787
title_screen_elsedoneblock349
	; LineNumber: 790
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock361
title_screen_ConditionalTrueBlock359: ;Main true block ;keep 
	; LineNumber: 790
	; LineNumber: 794
	
; // GRAPHIC KEYBOARD
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 795
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 796
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 797
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 800
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 801
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 802
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 803
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 805
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 806
	jsr ScrollY
	; LineNumber: 807
title_screen_elsedoneblock361
	; LineNumber: 810
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$08
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock367
title_screen_ConditionalTrueBlock365: ;Main true block ;keep 
	; LineNumber: 811
	; LineNumber: 813
	
; // BUSINESS KEYBOARD			
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$16
	lda #$00
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 814
	; Assigning single variable : n_key_down
	; Integer constant assigning
	ldy #$80
	lda #$02
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 815
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 816
	; Assigning single variable : n_key_right
	; Integer constant assigning
	lda #$03
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 819
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$02
	lda #$04
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 820
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$02
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 821
	; Assigning single variable : key_left
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 822
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 824
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 825
	jsr ScrollY
	; LineNumber: 826
title_screen_elsedoneblock367
	; LineNumber: 829
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$05
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed375
	jmp title_screen_ConditionalTrueBlock371
title_screen_localfailed375: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$02
	ldy #$08
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock373
title_screen_ConditionalTrueBlock371: ;Main true block ;keep 
	; LineNumber: 829
	; LineNumber: 831
	; Assigning single variable : READY_TO_PLAY
	lda #$2
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 832
	jsr ScrollY
	; LineNumber: 833
title_screen_elsedoneblock373
	; LineNumber: 838
	jmp title_screen_while176
title_screen_elsedoneblock179
title_screen_loopend181
	; LineNumber: 841
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 846
score_screen
	; LineNumber: 847
	jsr cls
	; LineNumber: 849
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock380
score_screen_ConditionalTrueBlock379: ;Main true block ;keep 
	; LineNumber: 849
	; LineNumber: 851
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 853
	jmp score_screen_elsedoneblock381
score_screen_elseblock380
	; LineNumber: 853
	; LineNumber: 855
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 856
score_screen_elsedoneblock381
	; LineNumber: 857
	; Assigning single variable : source_p
	lda petscii_pointer
	ldx petscii_pointer+1
	sta source_p
	stx source_p+1
	; Assigning single variable : dest_p
	lda #<$8000
	ldx #>$8000
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 859
	; Binary clause Simplified: EQUALS
	lda DETECTED_SCREEN_WIDTH
	; Compare with pure num / var optimization
	cmp #$28;keep
	bne score_screen_elseblock388
score_screen_ConditionalTrueBlock387: ;Main true block ;keep 
	; LineNumber: 860
	; LineNumber: 860
	; memcpyfast
	ldx #12
score_screen_memcpy401
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy401
	; LineNumber: 861
	; memcpyfast
	ldx #12
score_screen_memcpy402
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy402
	; LineNumber: 862
	; memcpyfast
	ldx #12
score_screen_memcpy403
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy403
	; LineNumber: 863
	; memcpyfast
	ldx #12
score_screen_memcpy404
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy404
	; LineNumber: 866
	jmp score_screen_elsedoneblock389
score_screen_elseblock388
	; LineNumber: 867
	; LineNumber: 867
	; memcpyfast
	ldx #12
score_screen_memcpy406
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy406
	; LineNumber: 868
	; memcpyfast
	ldx #12
score_screen_memcpy407
	lda logo+ $0d,x
	sta $8050,x
	dex
	bpl score_screen_memcpy407
	; LineNumber: 869
	; memcpyfast
	ldx #12
score_screen_memcpy408
	lda logo+ $1a,x
	sta $80a0,x
	dex
	bpl score_screen_memcpy408
	; LineNumber: 870
	; memcpyfast
	ldx #12
score_screen_memcpy409
	lda logo+ $27,x
	sta $80f0,x
	dex
	bpl score_screen_memcpy409
	; LineNumber: 874
score_screen_elsedoneblock389
	; LineNumber: 876
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 877
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 879
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 880
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 882
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 882
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal414
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal414
	; LineNumber: 885
	jsr Key_Read
	; LineNumber: 888
score_screen_while415
score_screen_loopstart419
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_elsedoneblock418
score_screen_ConditionalTrueBlock416: ;Main true block ;keep 
	; LineNumber: 889
	; LineNumber: 890
	jsr Key_Read
	; LineNumber: 893
	; Binary clause Simplified: GREATEREQUAL
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc score_screen_abslabel438
	eor #$ff
	adc #$00
score_screen_abslabel438
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc score_screen_elseblock434
score_screen_ConditionalTrueBlock433: ;Main true block ;keep 
	; LineNumber: 894
	; LineNumber: 895
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 897
	jmp score_screen_elsedoneblock435
score_screen_elseblock434
	; LineNumber: 897
	; LineNumber: 899
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 900
score_screen_elsedoneblock435
	; LineNumber: 901
	jmp score_screen_while415
score_screen_elsedoneblock418
score_screen_loopend420
	; LineNumber: 902
	jsr ScrollY
	; LineNumber: 903
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 909
	; LineNumber: 907
spr_p	=                  $16
	; LineNumber: 905
spr_x	dc.b	0
	; LineNumber: 905
spr_y	dc.b	0
	; LineNumber: 905
source_str	=                  $0B
	; LineNumber: 905
spr_len	dc.b	0
sprite_xy_block441
sprite_xy
	; LineNumber: 910
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var444 = $54
	sta sprite_xy_rightvarInteger_var444
	sty sprite_xy_rightvarInteger_var444+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var447 =                  $56
	sta sprite_xy_rightvarInteger_var447
	sty sprite_xy_rightvarInteger_var447+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var447
sprite_xy_wordAdd445
	sta sprite_xy_rightvarInteger_var447
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var447+1
	tay
	lda sprite_xy_rightvarInteger_var447
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var444
sprite_xy_wordAdd442
	sta sprite_xy_rightvarInteger_var444
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var444+1
	tay
	lda sprite_xy_rightvarInteger_var444
	sta spr_p
	sty spr_p+1
	; LineNumber: 910
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy448
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy448
	; LineNumber: 912
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var451 = $54
	sta sprite_xy_rightvarInteger_var451
	sty sprite_xy_rightvarInteger_var451+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var454 =                  $56
	sta sprite_xy_rightvarInteger_var454
	sty sprite_xy_rightvarInteger_var454+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var457 =                  $58
	sta sprite_xy_rightvarInteger_var457
	sty sprite_xy_rightvarInteger_var457+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var457
sprite_xy_wordAdd455
	sta sprite_xy_rightvarInteger_var457
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var457+1
	tay
	lda sprite_xy_rightvarInteger_var457
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var454
sprite_xy_wordAdd452
	sta sprite_xy_rightvarInteger_var454
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var454+1
	tay
	lda sprite_xy_rightvarInteger_var454
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var451
sprite_xy_wordAdd449
	sta sprite_xy_rightvarInteger_var451
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var451+1
	tay
	lda sprite_xy_rightvarInteger_var451
	sta spr_p
	sty spr_p+1
	; LineNumber: 912
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy458
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy458
	; LineNumber: 914
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 922
	; LineNumber: 918
this_row	=                  $16
	; LineNumber: 918
target_strip	=                  $0B
	; LineNumber: 919
iteration	dc.b	0
	; LineNumber: 920
homeplate	dc.b	$d3
init_vars_block459
init_vars
	; LineNumber: 923
	jsr cls
	; LineNumber: 924
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 927
	; Assigning single variable : READY_TO_PLAY
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 931
	
; //	Key::SetupScreenCodes();
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 932
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 933
	; Assigning single variable : source_p
	ldx petscii_pointer+1
	sta source_p
	stx source_p+1
	; Assigning single variable : dest_p
	lda #<screenmemory
	ldx #>screenmemory
	sta dest_p
	stx dest_p+1
	jsr copy_8040_screen
	; LineNumber: 934
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 935
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 949
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop460
	; LineNumber: 939
	; LineNumber: 941
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy472
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy472
	; LineNumber: 942
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd473
	inc target_strip+1
init_vars_WordAdd473
	; LineNumber: 943
	; memcpyfast
	ldy #39
init_vars_memcpy474
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy474
	; LineNumber: 944
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd475
	inc target_strip+1
init_vars_WordAdd475
	; LineNumber: 947
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd476
	inc this_row+1
init_vars_WordAdd476
	; LineNumber: 948
init_vars_forloopcounter462
init_vars_loopstart463
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop460
init_vars_loopdone477: ;keep
init_vars_forloopend461
init_vars_loopend464
	; LineNumber: 951
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy478
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy478
	; LineNumber: 952
	; memcpy
	ldx #0
init_vars_memcpy479
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy479
	; LineNumber: 953
	; memcpy
	ldx #0
init_vars_memcpy480
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy480
	; LineNumber: 954
	; memcpy
	ldx #0
init_vars_memcpy481
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy481
	; LineNumber: 955
	; memcpy
	ldx #0
init_vars_memcpy482
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy482
	; LineNumber: 956
	; memcpy
	ldx #0
init_vars_memcpy483
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy483
	; LineNumber: 957
	; memcpy
	ldx #0
init_vars_memcpy484
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy484
	; LineNumber: 959
	; memcpy
	ldx #0
init_vars_memcpy485
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy485
	; LineNumber: 960
	; memcpy
	ldx #0
init_vars_memcpy486
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy486
	; LineNumber: 961
	; memcpy
	ldx #0
init_vars_memcpy487
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy487
	; LineNumber: 962
	; memcpy
	ldx #0
init_vars_memcpy488
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy488
	; LineNumber: 966
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 967
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock492
init_vars_ConditionalTrueBlock490: ;Main true block ;keep 
	; LineNumber: 966
	; LineNumber: 967
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 967
init_vars_elsedoneblock492
	; LineNumber: 969
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 970
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock498
init_vars_ConditionalTrueBlock496: ;Main true block ;keep 
	; LineNumber: 969
	; LineNumber: 970
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 970
init_vars_elsedoneblock498
	; LineNumber: 972
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 973
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 975
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 976
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock504
init_vars_ConditionalTrueBlock502: ;Main true block ;keep 
	; LineNumber: 975
	; LineNumber: 976
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 976
init_vars_elsedoneblock504
	; LineNumber: 978
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 979
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock510
init_vars_ConditionalTrueBlock508: ;Main true block ;keep 
	; LineNumber: 978
	; LineNumber: 979
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 979
init_vars_elsedoneblock510
	; LineNumber: 980
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 982
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 983
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 984
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 985
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 987
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock516
init_vars_ConditionalTrueBlock514: ;Main true block ;keep 
	; LineNumber: 986
	; LineNumber: 988
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 989
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 990
init_vars_elsedoneblock516
	; LineNumber: 992
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 993
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 994
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 995
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 997
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock522
init_vars_ConditionalTrueBlock520: ;Main true block ;keep 
	; LineNumber: 996
	; LineNumber: 998
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 999
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1000
init_vars_elsedoneblock522
	; LineNumber: 1003
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1004
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1005
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_localfailed530
	jmp init_vars_ConditionalTrueBlock526
init_vars_localfailed530
	jmp init_vars_elsedoneblock528
init_vars_ConditionalTrueBlock526: ;Main true block ;keep 
	; LineNumber: 1004
	; LineNumber: 1006
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1007
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1009
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1010
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1011
init_vars_elsedoneblock528
	; LineNumber: 1013
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1014
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1015
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1016
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 1018
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1019
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1021
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 1022
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1023
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1025
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 1026
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 1029
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1030
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1031
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1032
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1033
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1034
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1035
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1039
move_obstacles
	; LineNumber: 1042
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax534
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax534
	; LineNumber: 1043
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 1044
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 1048
move_traffic
	; LineNumber: 1051
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax537
	lda #$0
	sta traffic_x_rl
move_traffic_incmax537
	; LineNumber: 1052
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 1053
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 1060
	; LineNumber: 1058
char_under	dc.b	0
frog_ride_block538
frog_ride
	; LineNumber: 1061
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 1064
	cmp #$51 ;keep
	bne frog_ride_casenext540
	; LineNumber: 1067
	; LineNumber: 1068
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock545
frog_ride_ConditionalTrueBlock543: ;Main true block ;keep 
	; LineNumber: 1069
	; LineNumber: 1070
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 1071
frog_ride_elsedoneblock545
	; LineNumber: 1072
	jmp frog_ride_caseend539
frog_ride_casenext540
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext550
	; LineNumber: 1075
	; LineNumber: 1076
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock555
frog_ride_ConditionalTrueBlock553: ;Main true block ;keep 
	; LineNumber: 1077
	; LineNumber: 1078
	
; // (
	inc frog_x
	; LineNumber: 1079
frog_ride_elsedoneblock555
	; LineNumber: 1080
	jmp frog_ride_caseend539
frog_ride_casenext550
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext560
	; LineNumber: 1083
	; LineNumber: 1084
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock565
frog_ride_ConditionalTrueBlock563: ;Main true block ;keep 
	; LineNumber: 1085
	; LineNumber: 1086
	
; // ) 
	dec frog_x
	; LineNumber: 1087
frog_ride_elsedoneblock565
	; LineNumber: 1088
	jmp frog_ride_caseend539
frog_ride_casenext560
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext570
	; LineNumber: 1091
	; LineNumber: 1092
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock575
frog_ride_localsuccess578: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock575
frog_ride_ConditionalTrueBlock573: ;Main true block ;keep 
	; LineNumber: 1093
	; LineNumber: 1094
	
; // Crock body 
	inc frog_x
	; LineNumber: 1095
frog_ride_elsedoneblock575
	; LineNumber: 1097
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock584
frog_ride_localsuccess587: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock584
frog_ride_ConditionalTrueBlock582: ;Main true block ;keep 
	; LineNumber: 1098
	; LineNumber: 1099
	dec frog_x
	; LineNumber: 1100
frog_ride_elsedoneblock584
	; LineNumber: 1101
	jmp frog_ride_caseend539
frog_ride_casenext570
frog_ride_caseend539
	; LineNumber: 1103
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1110
	; LineNumber: 1107
strip_num	dc.b	0
	; LineNumber: 1107
this_strip	dc.b	0
	; LineNumber: 1108
this_source_offset	=                  $16
	; LineNumber: 1109
game_move	dc.b	0
show_obstacles_block590
show_obstacles
	; LineNumber: 1113
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var596 = $54
	sta show_obstacles_val_var596
	lda GAME_TICKS
	sec
show_obstacles_modulo597
	sbc show_obstacles_val_var596
	bcs show_obstacles_modulo597
	adc show_obstacles_val_var596
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock594
show_obstacles_ConditionalTrueBlock592: ;Main true block ;keep 
	; LineNumber: 1114
	; LineNumber: 1115
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 1116
show_obstacles_elsedoneblock594
	; LineNumber: 1119
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var605 = $54
	sta show_obstacles_val_var605
	lda GAME_TICKS
	sec
show_obstacles_modulo606
	sbc show_obstacles_val_var605
	bcs show_obstacles_modulo606
	adc show_obstacles_val_var605
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock601
show_obstacles_ConditionalTrueBlock600: ;Main true block ;keep 
	; LineNumber: 1120
	; LineNumber: 1122
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 1123
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 1125
	jmp show_obstacles_elsedoneblock602
show_obstacles_elseblock601
	; LineNumber: 1126
	; LineNumber: 1127
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 1128
show_obstacles_elsedoneblock602
	; LineNumber: 1151
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop609
	; LineNumber: 1132
	; LineNumber: 1133
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1134
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var637 = $54
	sta show_obstacles_rightvarInteger_var637
	sty show_obstacles_rightvarInteger_var637+1
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var637
show_obstacles_wordAdd635
	sta show_obstacles_rightvarInteger_var637
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var637+1
	tay
	lda show_obstacles_rightvarInteger_var637
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1136
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var640 = $54
	sta show_obstacles_rightvarInteger_var640
	sty show_obstacles_rightvarInteger_var640+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var640
show_obstacles_wordAdd638
	sta show_obstacles_rightvarInteger_var640
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var640+1
	tay
	lda show_obstacles_rightvarInteger_var640
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1138
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock643
show_obstacles_ConditionalTrueBlock642: ;Main true block ;keep 
	; LineNumber: 1139
	; LineNumber: 1140
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd650
	inc this_source_offset+1
show_obstacles_WordAdd650
	; LineNumber: 1142
	jmp show_obstacles_elsedoneblock644
show_obstacles_elseblock643
	; LineNumber: 1143
	; LineNumber: 1144
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd652
	inc this_source_offset+1
show_obstacles_WordAdd652
	; LineNumber: 1145
show_obstacles_elsedoneblock644
	; LineNumber: 1146
	; memcpyfast
	ldy #39
show_obstacles_memcpy653
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy653
	; LineNumber: 1150
show_obstacles_forloopcounter611
show_obstacles_loopstart612
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone654
show_obstacles_loopnotdone655
	jmp show_obstacles_forloop609
show_obstacles_loopdone654
show_obstacles_forloopend610
show_obstacles_loopend613
	; LineNumber: 1171
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop656
	; LineNumber: 1153
	; LineNumber: 1154
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1155
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var684 = $54
	sta show_obstacles_rightvarInteger_var684
	sty show_obstacles_rightvarInteger_var684+1
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda DETECTED_SCREEN_WIDTH
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var684
show_obstacles_wordAdd682
	sta show_obstacles_rightvarInteger_var684
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var684+1
	tay
	lda show_obstacles_rightvarInteger_var684
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1156
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var687 = $54
	sta show_obstacles_rightvarInteger_var687
	sty show_obstacles_rightvarInteger_var687+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var687
show_obstacles_wordAdd685
	sta show_obstacles_rightvarInteger_var687
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var687+1
	tay
	lda show_obstacles_rightvarInteger_var687
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1158
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock690
show_obstacles_ConditionalTrueBlock689: ;Main true block ;keep 
	; LineNumber: 1159
	; LineNumber: 1160
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd697
	inc this_source_offset+1
show_obstacles_WordAdd697
	; LineNumber: 1162
	jmp show_obstacles_elsedoneblock691
show_obstacles_elseblock690
	; LineNumber: 1163
	; LineNumber: 1164
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd699
	inc this_source_offset+1
show_obstacles_WordAdd699
	; LineNumber: 1165
show_obstacles_elsedoneblock691
	; LineNumber: 1166
	; memcpyfast
	ldy #39
show_obstacles_memcpy700
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy700
	; LineNumber: 1170
show_obstacles_forloopcounter658
show_obstacles_loopstart659
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone701
show_obstacles_loopnotdone702
	jmp show_obstacles_forloop656
show_obstacles_loopdone701
show_obstacles_forloopend657
show_obstacles_loopend660
	; LineNumber: 1173
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock706
show_obstacles_ConditionalTrueBlock704: ;Main true block ;keep 
	; LineNumber: 1174
	; LineNumber: 1177
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1178
show_obstacles_elsedoneblock706
	; LineNumber: 1181
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1183
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1186
kill_frog
	; LineNumber: 1187
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1188
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1189
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1190
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 1191
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1192
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1193
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1194
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1195
	jsr burp
	; LineNumber: 1196
	dec player_lives
	; LineNumber: 1197
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1202
check_collisions
	; LineNumber: 1204
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 1210
	cmp frogcharA ;keep
	bne check_collisions_casenext713
	; LineNumber: 1214
	; LineNumber: 1215
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock718
check_collisions_ConditionalTrueBlock716: ;Main true block ;keep 
	; LineNumber: 1216
	; LineNumber: 1217
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1218
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1219
check_collisions_elsedoneblock718
	; LineNumber: 1220
	jmp check_collisions_caseend712
check_collisions_casenext713
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext721
	; LineNumber: 1222
	; LineNumber: 1223
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock726
check_collisions_ConditionalTrueBlock724: ;Main true block ;keep 
	; LineNumber: 1224
	; LineNumber: 1225
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1226
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1227
check_collisions_elsedoneblock726
	; LineNumber: 1228
	jmp check_collisions_caseend712
check_collisions_casenext721
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext729
	; LineNumber: 1231
	; LineNumber: 1232
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock734
check_collisions_ConditionalTrueBlock732: ;Main true block ;keep 
	; LineNumber: 1233
	; LineNumber: 1234
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1235
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1236
check_collisions_elsedoneblock734
	; LineNumber: 1237
	jmp check_collisions_caseend712
check_collisions_casenext729
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext737
	; LineNumber: 1240
	; LineNumber: 1241
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1242
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1243
	jmp check_collisions_caseend712
check_collisions_casenext737
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext739
	; LineNumber: 1246
	; LineNumber: 1247
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1248
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1249
	jmp check_collisions_caseend712
check_collisions_casenext739
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext741
	; LineNumber: 1255
	; LineNumber: 1256
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock746
check_collisions_localsuccess748: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock746
check_collisions_ConditionalTrueBlock744: ;Main true block ;keep 
	; LineNumber: 1257
	; LineNumber: 1258
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1259
check_collisions_elsedoneblock746
	; LineNumber: 1260
	jmp check_collisions_caseend712
check_collisions_casenext741
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext750
	; LineNumber: 1265
	; LineNumber: 1266
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1267
	jmp check_collisions_caseend712
check_collisions_casenext750
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext752
	; LineNumber: 1270
	; LineNumber: 1271
	jsr kill_frog
	; LineNumber: 1272
	jmp check_collisions_caseend712
check_collisions_casenext752
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext754
	; LineNumber: 1275
	; LineNumber: 1276
	jsr kill_frog
	; LineNumber: 1278
	jmp check_collisions_caseend712
check_collisions_casenext754
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext756
	; LineNumber: 1280
	; LineNumber: 1281
	jsr kill_frog
	; LineNumber: 1283
	jmp check_collisions_caseend712
check_collisions_casenext756
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext758
	; LineNumber: 1286
	; LineNumber: 1287
	jsr kill_frog
	; LineNumber: 1289
	jmp check_collisions_caseend712
check_collisions_casenext758
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext760
	; LineNumber: 1292
	; LineNumber: 1293
	jsr kill_frog
	; LineNumber: 1295
	jmp check_collisions_caseend712
check_collisions_casenext760
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext762
	; LineNumber: 1298
	; LineNumber: 1299
	jsr kill_frog
	; LineNumber: 1301
	jmp check_collisions_caseend712
check_collisions_casenext762
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext764
	; LineNumber: 1304
	; LineNumber: 1305
	jsr kill_frog
	; LineNumber: 1307
	jmp check_collisions_caseend712
check_collisions_casenext764
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext766
	; LineNumber: 1310
	; LineNumber: 1311
	jsr kill_frog
	; LineNumber: 1313
	jmp check_collisions_caseend712
check_collisions_casenext766
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext768
	; LineNumber: 1317
	; LineNumber: 1318
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1320
	jmp check_collisions_caseend712
check_collisions_casenext768
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext770
	; LineNumber: 1323
	; LineNumber: 1324
	jsr kill_frog
	; LineNumber: 1325
	jmp check_collisions_caseend712
check_collisions_casenext770
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext772
	; LineNumber: 1330
	; LineNumber: 1331
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1332
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1333
	jmp check_collisions_caseend712
check_collisions_casenext772
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext774
	; LineNumber: 1336
	; LineNumber: 1337
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed791
	jmp check_collisions_ConditionalTrueBlock777
check_collisions_localfailed791: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock779
check_collisions_ConditionalTrueBlock777: ;Main true block ;keep 
	; LineNumber: 1338
	; LineNumber: 1339
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd793
	inc player_score+1
check_collisions_WordAdd793
	; LineNumber: 1340
	inc FROGS_SAVED
	; LineNumber: 1341
	jsr ping
	; LineNumber: 1343
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock797
check_collisions_ConditionalTrueBlock796: ;Main true block ;keep 
	; LineNumber: 1344
	; LineNumber: 1346
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1348
	jmp check_collisions_elsedoneblock798
check_collisions_elseblock797
	; LineNumber: 1349
	; LineNumber: 1350
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1351
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1352
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1353
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1354
check_collisions_elsedoneblock798
	; LineNumber: 1355
check_collisions_elsedoneblock779
	; LineNumber: 1356
	jmp check_collisions_caseend712
check_collisions_casenext774
	; LineNumber: 1360
	; LineNumber: 1363
check_collisions_caseend712
	; LineNumber: 1364
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1374
game_loop
	; LineNumber: 1383
game_loop_while805
game_loop_loopstart809
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed945
game_loop_localsuccess946: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed945
	jmp game_loop_ConditionalTrueBlock806
game_loop_localfailed945
	jmp game_loop_elsedoneblock808
game_loop_ConditionalTrueBlock806: ;Main true block ;keep 
	; LineNumber: 1384
	; LineNumber: 1386
	
; //	Key::SetupScreenCodes();
; // Unit constants
	jsr Key_Read
	; LineNumber: 1388
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1389
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1390
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed963
	jmp game_loop_ConditionalTrueBlock949
game_loop_localfailed963: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock951
game_loop_ConditionalTrueBlock949: ;Main true block ;keep 
	; LineNumber: 1391
	; LineNumber: 1392
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock968
game_loop_ConditionalTrueBlock966: ;Main true block ;keep 
	; LineNumber: 1393
	; LineNumber: 1394
	dec frog_y
	; LineNumber: 1395
	inc player_score
	bne game_loop_incdec974
	inc player_score +1
game_loop_incdec974
	; LineNumber: 1396
game_loop_elsedoneblock968
	; LineNumber: 1397
game_loop_elsedoneblock951
	; LineNumber: 1399
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed990
	jmp game_loop_ConditionalTrueBlock976
game_loop_localfailed990: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock978
game_loop_ConditionalTrueBlock976: ;Main true block ;keep 
	; LineNumber: 1400
	; LineNumber: 1401
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock995
game_loop_ConditionalTrueBlock993: ;Main true block ;keep 
	; LineNumber: 1402
	; LineNumber: 1403
	inc frog_x
	; LineNumber: 1404
	inc player_score
	bne game_loop_incdec1001
	inc player_score +1
game_loop_incdec1001
	; LineNumber: 1405
game_loop_elsedoneblock995
	; LineNumber: 1406
game_loop_elsedoneblock978
	; LineNumber: 1408
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed1017
	jmp game_loop_ConditionalTrueBlock1003
game_loop_localfailed1017: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock1005
game_loop_ConditionalTrueBlock1003: ;Main true block ;keep 
	; LineNumber: 1409
	; LineNumber: 1410
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock1022
game_loop_ConditionalTrueBlock1020: ;Main true block ;keep 
	; LineNumber: 1411
	; LineNumber: 1412
	inc frog_y
	; LineNumber: 1413
	inc player_score
	bne game_loop_incdec1028
	inc player_score +1
game_loop_incdec1028
	; LineNumber: 1414
game_loop_elsedoneblock1022
	; LineNumber: 1415
game_loop_elsedoneblock1005
	; LineNumber: 1416
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed1044
	jmp game_loop_ConditionalTrueBlock1030
game_loop_localfailed1044: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock1032
game_loop_ConditionalTrueBlock1030: ;Main true block ;keep 
	; LineNumber: 1417
	; LineNumber: 1418
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock1049
game_loop_ConditionalTrueBlock1047: ;Main true block ;keep 
	; LineNumber: 1419
	; LineNumber: 1420
	dec frog_x
	; LineNumber: 1421
	inc player_score
	bne game_loop_incdec1055
	inc player_score +1
game_loop_incdec1055
	; LineNumber: 1422
game_loop_elsedoneblock1049
	; LineNumber: 1423
game_loop_elsedoneblock1032
	; LineNumber: 1426
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax1057
	lda #$1
	sta GAME_TICKS
game_loop_incmax1057
	; LineNumber: 1429
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1432
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1435
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock1061
game_loop_ConditionalTrueBlock1059: ;Main true block ;keep 
	; LineNumber: 1436
	; LineNumber: 1438
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1440
game_loop_elsedoneblock1061
	; LineNumber: 1445
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed1069
	jmp game_loop_ConditionalTrueBlock1065
game_loop_localfailed1069: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock1067
game_loop_ConditionalTrueBlock1065: ;Main true block ;keep 
	; LineNumber: 1446
	; LineNumber: 1447
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1448
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1449
game_loop_elsedoneblock1067
	; LineNumber: 1452
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock1073
game_loop_ConditionalTrueBlock1072: ;Main true block ;keep 
	; LineNumber: 1453
	; LineNumber: 1454
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1456
	jmp game_loop_elsedoneblock1074
game_loop_elseblock1073
	; LineNumber: 1457
	; LineNumber: 1458
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1459
game_loop_elsedoneblock1074
	; LineNumber: 1464
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1464
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal1079
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1079
	; LineNumber: 1466
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1466
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal1080
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1080
	; LineNumber: 1470
	jmp game_loop_while805
game_loop_elsedoneblock808
game_loop_loopend810
	; LineNumber: 1472
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : intro_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1475
intro_loop
	; LineNumber: 1477
intro_loop_while1082
intro_loop_loopstart1086
	; Binary clause Simplified: NOTEQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$1;keep
	beq intro_loop_elsedoneblock1085
intro_loop_ConditionalTrueBlock1083: ;Main true block ;keep 
	; LineNumber: 1478
	; LineNumber: 1479
	jsr title_screen
	; LineNumber: 1480
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$2;keep
	bne intro_loop_elsedoneblock1099
intro_loop_ConditionalTrueBlock1097: ;Main true block ;keep 
	; LineNumber: 1479
	; LineNumber: 1480
	jsr help_screen
	; LineNumber: 1480
intro_loop_elsedoneblock1099
	; LineNumber: 1481
	jmp intro_loop_while1082
intro_loop_elsedoneblock1085
intro_loop_loopend1087
	; LineNumber: 1482
	rts
block1
	; LineNumber: 1486
	; Assigning single variable : is_80
	lda #$0
	; Calling storevariable
	sta is_80
	; LineNumber: 1487
	jsr uppercase
	; LineNumber: 1488
	; Assigning single variable : is_80
	jsr is_80_columns
	; Calling storevariable
	sta is_80
	; LineNumber: 1491
	; Binary clause Simplified: EQUALS
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock1105
MainProgram_ConditionalTrueBlock1103: ;Main true block ;keep 
	; LineNumber: 1492
	; LineNumber: 1493
	jsr cursor_down
	; LineNumber: 1494
	jsr cursor_return
	; LineNumber: 1495
	jsr cursor_graphic
	; LineNumber: 1497
	; Assigning single variable : DETECTED_SCREEN_WIDTH
	lda #$50
	; Calling storevariable
	sta DETECTED_SCREEN_WIDTH
	; LineNumber: 1498
	; Poke
	; Optimization: shift is zero
	sta p_SW
	; LineNumber: 1499
MainProgram_elsedoneblock1105
	; LineNumber: 1500
	; LineNumber: 1502
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1503
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1506
	jsr cls
	; LineNumber: 1508
MainProgram_while1108
MainProgram_loopstart1112
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock1111
MainProgram_ConditionalTrueBlock1109: ;Main true block ;keep 
	; LineNumber: 1509
	; LineNumber: 1511
	jsr intro_loop
	; LineNumber: 1512
	jsr init_vars
	; LineNumber: 1513
	jsr game_loop
	; LineNumber: 1514
	jsr score_screen
	; LineNumber: 1515
	jmp MainProgram_while1108
MainProgram_elsedoneblock1111
MainProgram_loopend1113
	; LineNumber: 1519
	; End of program
	; Ending memory block
EndBlock410
title_screen_stringassignstr332	.dc "1",0
title_screen_stringassignstr344	.dc "2",0
title_screen_stringassignstr356	.dc "3",0
