 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1433
	jmp block1
	; LineNumber: 7
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 8
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 9
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 12
Key_keyState	dc.b	0
	; LineNumber: 16
Key_temp	dc.b	0
	; LineNumber: 18
Key_KeyRow = $e810
	; LineNumber: 19
Key_KeyRead = $e812
	; LineNumber: 13
ti = $8f
	; LineNumber: 30
KEYPRESS	dc.w	$ff
	; LineNumber: 32
ks	dc.b	$00
	; LineNumber: 34
n_key_up	dc.w	0
	; LineNumber: 34
n_key_down	dc.w	0
	; LineNumber: 34
n_key_left	dc.w	0
	; LineNumber: 34
n_key_right	dc.w	0
	; LineNumber: 34
key_up	dc.w	0
	; LineNumber: 34
key_down	dc.w	0
	; LineNumber: 34
key_left	dc.w	0
	; LineNumber: 34
key_right	dc.w	0
	; LineNumber: 41
PLAY_SOUND	dc.b	$01
	; LineNumber: 42
GAME_SPEED	dc.b	$08
	; LineNumber: 43
ALIVE	dc.b	$01
	; LineNumber: 44
WON_GAME	dc.b	$00
	; LineNumber: 45
FROGS_SAVED	dc.b	$00
	; LineNumber: 46
GAME_TICKS	dc.b	$00
	; LineNumber: 47
READY_TO_PLAY	dc.b	$00
	; LineNumber: 51
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 52
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 53
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 54
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 55
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 56
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 57
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 58
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 59
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 60
is_80	dc.b	0
	; LineNumber: 63
sorry_80		dc.b	147
	dc.b	14
	dc.b	"80 COLUMNS DETECTED"
	dc.b	13
	dc.b	"PLEASE CHOOSE 40 COLUMNS AND REBOOT"
	dc.b	0
	; LineNumber: 65
help_screen_array	
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 78, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	77, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 16, 5, 20, 6, 18, 15, 7, 32
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 116
	dc.b	42, 32, 18, 5, 17, 21, 9, 18, 5
	dc.b	19, 32, 7, 18, 1, 16, 8, 9, 3
	dc.b	32, 11, 5, 25, 2, 15, 1, 18, 4
	dc.b	32, 32, 32, 103, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 116, 42, 32, 16, 12, 1
	dc.b	25, 32, 9, 14, 32, 52, 48, 32, 3
	dc.b	15, 12, 21, 13, 14, 32, 13, 15, 4
	dc.b	5, 32, 32, 32, 32, 32, 32, 103, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 116, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 103, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 116, 2, 18, 9, 14, 7, 32
	dc.b	25, 15, 21, 18, 32, 6, 18, 15, 7
	dc.b	7, 9, 5, 19, 32, 8, 15, 13, 5
	dc.b	33, 32, 32, 32, 32, 32, 103, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 116, 1, 22
	dc.b	15, 9, 4, 32, 20, 18, 1, 6, 6
	dc.b	9, 3, 32, 1, 14, 4, 32, 3, 18
	dc.b	15, 3, 32, 13, 15, 21, 20, 8, 19
	dc.b	32, 103, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 116, 2, 5, 20, 23, 5, 5, 14
	dc.b	32, 18, 9, 22, 5, 18, 32, 2, 1
	dc.b	14, 11, 19, 32, 9, 19, 32, 4, 5
	dc.b	1, 4, 12, 25, 32, 106, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 116, 18, 9, 4
	dc.b	5, 32, 12, 15, 7, 19, 44, 32, 3
	dc.b	18, 15, 3, 32, 2, 15, 4, 19, 32
	dc.b	43, 32, 20, 21, 18, 20, 12, 5, 19
	dc.b	103, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 230, 32, 7, 5
	dc.b	20, 32, 19, 9, 24, 32, 6, 18, 15
	dc.b	7, 19, 32, 15, 14, 32, 83, 32, 20
	dc.b	15, 32, 23, 9, 14, 33, 32, 102, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 77
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 32, 32, 32
	dc.b	32, 32, 111, 78, 108, 226, 123, 32, 98
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 97, 32, 32, 32, 254, 126, 32, 32
	dc.b	32, 32, 124, 32, 127, 32, 32, 32, 32
	dc.b	32, 32, 32, 98, 98, 98, 98, 98, 32
	dc.b	32, 85, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 64, 64, 64, 73, 251, 32, 32, 225
	dc.b	126, 32, 32, 108, 160, 123, 108, 160, 123
	dc.b	32, 32, 32, 32, 108, 160, 160, 160, 226
	dc.b	32, 32, 124, 123, 32, 93, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 93
	dc.b	225, 123, 32, 225, 123, 32, 32, 225, 254
	dc.b	252, 254, 254, 252, 123, 32, 32, 32, 254
	dc.b	226, 97, 108, 98, 160, 252, 32, 251, 32
	dc.b	93, 11, 5, 25, 19, 58, 32, 32, 32
	dc.b	32, 32, 32, 93, 32, 251, 123, 32, 252
	dc.b	32, 108, 160, 160, 160, 160, 252, 124, 160
	dc.b	32, 32, 32, 236, 254, 108, 160, 160, 236
	dc.b	225, 32, 124, 252, 93, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 93, 32
	dc.b	32, 124, 127, 255, 127, 123, 124, 251, 160
	dc.b	160, 126, 252, 160, 32, 32, 225, 126, 97
	dc.b	225, 160, 126, 254, 126, 32, 98, 236, 93
	dc.b	32, 32, 32, 32, 32, 23, 32, 32, 32
	dc.b	56, 32, 93, 32, 32, 32, 32, 124, 226
	dc.b	126, 32, 108, 108, 123, 108, 160, 160, 32
	dc.b	32, 160, 108, 97, 32, 226, 226, 32, 98
	dc.b	236, 126, 108, 93, 127, 123, 32, 32, 1
	dc.b	19, 4, 32, 52, 53, 54, 93, 32, 32
	dc.b	32, 32, 32, 32, 160, 252, 124, 226, 108
	dc.b	160, 251, 160, 32, 32, 97, 225, 32, 32
	dc.b	32, 98, 226, 126, 32, 255, 252, 74, 64
	dc.b	64, 64, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 75, 32, 32, 32, 32, 225, 123, 225
	dc.b	160, 160, 160, 160, 126, 254, 160, 32, 225
	dc.b	97, 160, 32, 254, 226, 126, 98, 160, 252
	dc.b	123, 108, 124, 32, 32, 97, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	252, 108, 97, 124, 160, 160, 98, 98, 254
	dc.b	160, 160, 32, 32, 251, 123, 251, 123, 32
	dc.b	160, 160, 160, 236, 126, 32, 32, 123, 126
	dc.b	97, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 108, 32, 160, 160, 123, 32
	dc.b	160, 160, 160, 160, 160, 160, 32, 32, 124
	dc.b	160, 123, 251, 123, 124, 226, 126, 32, 32
	dc.b	98, 236, 108, 226, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 226
	dc.b	251, 160, 160, 254, 254, 160, 160, 160, 160
	dc.b	160, 0
	; LineNumber: 109
frogcharA	dc.b	$d6
	; LineNumber: 110
frogcharB	dc.b	$56
	; LineNumber: 111
frog_x	dc.b	$14
	; LineNumber: 111
frog_old_x	dc.b	$14
	; LineNumber: 112
frog_y	dc.b	$18
	; LineNumber: 112
frog_old_y	dc.b	$18
	; LineNumber: 113
previous_tile	dc.b	$20
	; LineNumber: 114
next_tile	dc.b	0
	; LineNumber: 115
player_lives	dc.b	$00
	; LineNumber: 116
player_score	dc.w	$00
	; LineNumber: 118
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 119
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 121
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 122
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 125
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 126
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 128
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 129
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 131
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 132
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 134
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 135
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 137
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 138
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 142
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 143
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 144
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 145
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 153
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 154
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 155
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 156
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 161
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 162
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 164
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 167
traffic_x_rl	dc.b	0
	; LineNumber: 167
traffic_x_lr	dc.b	0
	; LineNumber: 168
obstacles_x_rl	dc.b	0
	; LineNumber: 168
obstacles_x_lr	dc.b	0
	; LineNumber: 172
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 180
title_screen_frog_pointer	= $02
	; LineNumber: 181
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 209
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 237
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 266
petscii_pointer	=    $04
	; LineNumber: 300
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 383
Key_Read
	; LineNumber: 385
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 414
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop5
	; LineNumber: 388
	; LineNumber: 390
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 392
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 413
Key_Read_forloopcounter7
Key_Read_loopstart8
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop5
Key_Read_loopdone12: ;keep
Key_Read_forloopend6
Key_Read_loopend9
	; LineNumber: 415
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 431
	; LineNumber: 430
Key_Pressed_block13
Key_Pressed
	; LineNumber: 433
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 441
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 344
cls
	; LineNumber: 345
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop16
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop16
	; LineNumber: 346
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 347
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 362
uppercase
	; LineNumber: 363
	; Poke
	; Optimization: shift is zero
	lda #$c
	sta $E84C
	; LineNumber: 364
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_home
	;    Procedure type : User-defined procedure
	; LineNumber: 367
cursor_home
	; LineNumber: 369
	; Assigning register : _a
	lda #$13
	; LineNumber: 370
	jsr $FFD2
	; LineNumber: 372
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 383
cursor_return
	; LineNumber: 385
	; Assigning register : _a
	lda #$d
	; LineNumber: 386
	jsr $FFD2
	; LineNumber: 388
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 391
cursor_down
	; LineNumber: 393
	; Assigning register : _a
	lda #$11
	; LineNumber: 394
	jsr $FFD2
	; LineNumber: 396
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 407
cursor_graphic
	; LineNumber: 409
	; Assigning register : _a
	lda #$8e
	; LineNumber: 410
	jsr $FFD2
	; LineNumber: 412
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : basic_print
	;    Procedure type : User-defined procedure
	; LineNumber: 417
	; LineNumber: 416
next_ch	dc.b	0
	; LineNumber: 414
_ptr	=    $08
basic_print_block22
basic_print
	; LineNumber: 419
	; Assigning single variable : next_ch
	lda #$0
	; Calling storevariable
	sta next_ch
	; LineNumber: 420
basic_print_while23
basic_print_loopstart27
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq basic_print_elsedoneblock26
basic_print_ConditionalTrueBlock24: ;Main true block ;keep 
	; LineNumber: 420
	; LineNumber: 422
	; Assigning register : _a
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; LineNumber: 423
	jsr $FFD2
	; LineNumber: 424
	inc next_ch
	; LineNumber: 425
	jmp basic_print_while23
basic_print_elsedoneblock26
basic_print_loopend28
	; LineNumber: 427
	jsr cursor_return
	; LineNumber: 428
	jsr cursor_down
	; LineNumber: 430
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 456
	; LineNumber: 453
char	dc.b	0
	; LineNumber: 454
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 455
screen_pointer	=    $08
is_80_columns_block33
is_80_columns
	; LineNumber: 458
	; Assigning single variable : screen_pointer
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 465
	; Assigning single variable : char
	lda #$0
	; Calling storevariable
	sta char
is_80_columns_forloop34
	; LineNumber: 461
	; LineNumber: 462
	; Assigning register : _a
	; Load Unknown type array
	ldx char
	lda test_string,x
	; LineNumber: 463
	jsr $FFD2
	; LineNumber: 464
is_80_columns_forloopcounter36
is_80_columns_loopstart37
	; Compare is onpage
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop34
is_80_columns_loopdone41: ;keep
is_80_columns_forloopend35
is_80_columns_loopend38
	; LineNumber: 466
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock44
is_80_columns_ConditionalTrueBlock43: ;Main true block ;keep 
	; LineNumber: 467
	; LineNumber: 468
	lda #$1
	rts
	; LineNumber: 470
	jmp is_80_columns_elsedoneblock45
is_80_columns_elseblock44
	; LineNumber: 471
	; LineNumber: 472
	lda #$0
	rts
	; LineNumber: 473
is_80_columns_elsedoneblock45
	; LineNumber: 475
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 531
	; LineNumber: 529
szp	=    $08
	; LineNumber: 527
sx	dc.b	0
	; LineNumber: 527
sy	dc.b	0
getat_block50
getat
	; LineNumber: 532
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var53 = $54
	sta getat_rightvarInteger_var53
	sty getat_rightvarInteger_var53+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var56 =    $56
	sta getat_rightvarInteger_var56
	sty getat_rightvarInteger_var56+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var56
getat_wordAdd54
	sta getat_rightvarInteger_var56
	; High-bit binop
	tya
	adc getat_rightvarInteger_var56+1
	tay
	lda getat_rightvarInteger_var56
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var53
getat_wordAdd51
	sta getat_rightvarInteger_var53
	; High-bit binop
	tya
	adc getat_rightvarInteger_var53+1
	tay
	lda getat_rightvarInteger_var53
	sta szp
	sty szp+1
	; LineNumber: 533
	; LineNumber: 534
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 540
	; LineNumber: 538
zp	=    $08
	; LineNumber: 536
x	dc.b	0
	; LineNumber: 536
y	dc.b	0
	; LineNumber: 536
this_str	=    $16
	; LineNumber: 536
str_len	dc.b	0
textat_block57
textat
	; LineNumber: 541
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var60 = $54
	sta textat_rightvarInteger_var60
	sty textat_rightvarInteger_var60+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var63 =    $56
	sta textat_rightvarInteger_var63
	sty textat_rightvarInteger_var63+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var63
textat_wordAdd61
	sta textat_rightvarInteger_var63
	; High-bit binop
	tya
	adc textat_rightvarInteger_var63+1
	tay
	lda textat_rightvarInteger_var63
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var60
textat_wordAdd58
	sta textat_rightvarInteger_var60
	; High-bit binop
	tya
	adc textat_rightvarInteger_var60+1
	tay
	lda textat_rightvarInteger_var60
	sta zp
	sty zp+1
	; LineNumber: 541
	; memcpyfast
	ldy str_len
	dey
textat_memcpy64
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy64
	; LineNumber: 543
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 562
	; LineNumber: 561
note_duration	dc.b	0
	; LineNumber: 559
note	dc.b	0
	; LineNumber: 559
note_len	dc.b	0
PlayNote_block65
PlayNote
	; LineNumber: 563
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock69
PlayNote_ConditionalTrueBlock67: ;Main true block ;keep 
	; LineNumber: 564
	; LineNumber: 565
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 567
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop80
	; LineNumber: 565
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter82
PlayNote_loopstart83
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop80
PlayNote_loopdone87: ;keep
PlayNote_forloopend81
PlayNote_loopend84
	; LineNumber: 567
PlayNote_elsedoneblock69
	; LineNumber: 568
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 571
burp
	; LineNumber: 572
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 573
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 574
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 575
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 576
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 579
ping
	; LineNumber: 580
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 581
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 582
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 583
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 584
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 585
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 586
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 587
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 595
	; LineNumber: 593
c_row	=    $08
	; LineNumber: 593
p_row	=    $16
	; LineNumber: 594
scroll	dc.b	0
	; LineNumber: 594
scrolls	dc.b	0
ScrollY_block90
ScrollY
	; LineNumber: 609
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop91
	; LineNumber: 596
	; LineNumber: 598
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 599
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 606
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop115
	; LineNumber: 601
	; LineNumber: 601
	; memcpyfast
	ldy #39
ScrollY_memcpy125
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy125
	; LineNumber: 603
	; Assigning single variable : p_row
	lda p_row
	clc
	adc #$28
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd126
	inc p_row+1
ScrollY_WordAdd126
	; LineNumber: 604
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 605
ScrollY_forloopcounter117
ScrollY_loopstart118
	; Compare is onpage
	inc scroll
	lda #$19
	cmp scroll ;keep
	bcs ScrollY_forloop115
ScrollY_loopdone128: ;keep
ScrollY_forloopend116
ScrollY_loopend119
	; LineNumber: 606
	ldy #$28 ; optimized, look out for bugs
	lda #$20
ScrollY_fill129
	sta (c_row),y
	dey
	bpl ScrollY_fill129
	; LineNumber: 607
	jsr Crt_WaitVblStart
	; LineNumber: 608
ScrollY_forloopcounter93
ScrollY_loopstart94
	; Compare is onpage
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	bne ScrollY_forloop91
ScrollY_loopdone130: ;keep
ScrollY_forloopend92
ScrollY_loopend95
	; LineNumber: 610
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 621
	; LineNumber: 615
hks	dc.b	0
	; LineNumber: 615
_ctr	dc.b	0
	; LineNumber: 616
help_screen_pointer	=    $08
	; LineNumber: 616
str_pointer	=    $16
	; LineNumber: 619
thanks_string	
	dc.b	$14, $08, $01, $0e, $0b, $13, $20, $00, $0c
	dc.b	$05, $15, $01, $14, $20, $26, $20, $14, $08
	dc.b	$05, $20, $14, $12, $13, $05, $20, $03, $0f
	dc.b	$0d, $0d, $15, $0e, $09, $14, $19, $20, $20
	dc.b	$20, $10, $12, $05, $13, $13, $20, $01, $0e
	dc.b	$19, $20, $0b, $05, $19, $20, $14, $0f, $20
	dc.b	$03, $0f, $0e, $14, $09, $0e, $15, $05, $20
	dc.b	$20, $14, $08, $01, $0e, $0b, $13, $20, $00
	dc.b	$0c, $05, $15, $01, $14, $20, $26, $20, $14
	dc.b	$08, $05, $20, $14, $12, $13, $05, $20, $03
	dc.b	$0f, $0d, $0d, $15, $0e, $09, $14, $19, $20
	dc.b	$20, $20, $10, $12, $05, $13, $13, $20, $01
	dc.b	$0e, $19, $20, $0b, $05, $19, $20, $14, $0f
	dc.b	$20, $03, $0f, $0e, $14, $09, $0e, $15, $05
	dc.b	$20, $20, 0
help_screen_block131
help_screen
	; LineNumber: 624
	
; //        10		20			30		40		  50		  60		<	
; //123456789_123456789_123456789_123456789_1234567890123456789_12345678901234567890	
; // Set up pointer to array:
	; Assigning single variable : help_screen_pointer
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 625
	; Assigning single variable : hks
	lda #$0
	; Calling storevariable
	sta hks
	; LineNumber: 626
	jsr cls
	; LineNumber: 627
	jsr cursor_home
	; LineNumber: 630
	
; // Draw the frog
	; Copy full screen
	lda help_screen_pointer
	sta $4c
	lda help_screen_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
help_screen_outer132
	ldy #0
help_screen_inner133
	lda ($4c),y
	sta ($4e),y
	dey
	bne help_screen_inner133
	inc $4c+1
	inc $4e+1
	dex
	bne help_screen_outer132
	ldy #0
help_screen_final134
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne help_screen_final134
	; LineNumber: 633
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 635
help_screen_while135
help_screen_loopstart139
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock138
help_screen_ConditionalTrueBlock136: ;Main true block ;keep 
	; LineNumber: 636
	; LineNumber: 637
	jsr Key_Read
	; LineNumber: 638
	; Assigning single variable : _ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	cmp #127
	bcc help_screen_abslabel145
	eor #$ff
	adc #$00
help_screen_abslabel145
	; Calling storevariable
	sta _ctr
	; LineNumber: 639
	; Assigning single variable : x
	lda #$c
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$2
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	; INTEGER optimization: a=b+c 
	lda #<thanks_string
	clc
	adc _ctr
	sta this_str+0
	lda #>thanks_string
	adc #0
	sta this_str+1
	; Assigning single variable : str_len
	lda #$11
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 640
	jmp help_screen_while135
help_screen_elsedoneblock138
help_screen_loopend140
	; LineNumber: 641
	; Assigning single variable : READY_TO_PLAY
	lda #$0
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 642
	jsr ScrollY
	; LineNumber: 643
	rts
	; LineNumber: 646
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 659
	; LineNumber: 650
ctr	dc.b	0
	; LineNumber: 650
slide	dc.b	0
	; LineNumber: 651
DIFFICULTY	
	dc.b	$04, $09, $06, $06, $09, $03, $15, $0c, $14
	dc.b	$19, 0
	; LineNumber: 652
DIFFICULTY1	
	dc.b	$31, $20, $05, $01, $13, $19, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 653
DIFFICULTY2	
	dc.b	$32, $20, $0d, $05, $04, $09, $15, $0d, $20
	dc.b	$20, 0
	; LineNumber: 654
DIFFICULTY3	
	dc.b	$33, $20, $08, $01, $12, $04, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 655
R1	dc.b	$b1
	; LineNumber: 656
R2	dc.b	$b2
	; LineNumber: 657
R3	dc.b	$b3
title_screen_block147
title_screen
	; LineNumber: 662
	
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 663
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 664
	jsr cls
	; LineNumber: 667
	
; // Draw the frog
	; Copy full screen
	lda title_screen_frog_pointer
	sta $4c
	lda title_screen_frog_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
title_screen_outer148
	ldy #0
title_screen_inner149
	lda ($4c),y
	sta ($4e),y
	dey
	bne title_screen_inner149
	inc $4c+1
	inc $4e+1
	dex
	bne title_screen_outer148
	ldy #0
title_screen_final150
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne title_screen_final150
	; LineNumber: 668
	; memcpyfast
	ldx #12
title_screen_memcpy151
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy151
	; LineNumber: 669
	; memcpyfast
	ldx #12
title_screen_memcpy152
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy152
	; LineNumber: 670
	; memcpyfast
	ldx #12
title_screen_memcpy153
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy153
	; LineNumber: 671
	; memcpyfast
	ldx #12
title_screen_memcpy154
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy154
	; LineNumber: 674
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 675
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 676
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 677
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$4
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY
	ldx #>DIFFICULTY
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 678
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY1
	ldx #>DIFFICULTY1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 679
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY2
	ldx #>DIFFICULTY2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 680
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY3
	ldx #>DIFFICULTY3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 685
	
; //	Key::SetupScreenCodes();
	jsr Key_Read
	; LineNumber: 688
title_screen_while155
title_screen_loopstart159
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed258
	jmp title_screen_ConditionalTrueBlock156
title_screen_localfailed258
	jmp title_screen_elsedoneblock158
title_screen_ConditionalTrueBlock156: ;Main true block ;keep 
	; LineNumber: 689
	; LineNumber: 691
	jsr Key_Read
	; LineNumber: 692
	; Assigning single variable : ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc title_screen_abslabel260
	eor #$ff
	adc #$00
title_screen_abslabel260
	; Calling storevariable
	sta ctr
	; LineNumber: 693
	cmp #$1 ;keep
	bne title_screen_casenext262
	; LineNumber: 693
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext262
	lda ctr
	cmp #$2 ;keep
	bne title_screen_casenext264
	; LineNumber: 694
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext264
	lda ctr
	cmp #$3 ;keep
	bne title_screen_casenext266
	; LineNumber: 695
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext266
	lda ctr
	cmp #$4 ;keep
	bne title_screen_casenext268
	; LineNumber: 696
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext268
	lda ctr
	cmp #$5 ;keep
	bne title_screen_casenext270
	; LineNumber: 697
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext270
	lda ctr
	cmp #$6 ;keep
	bne title_screen_casenext272
	; LineNumber: 698
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext272
	lda ctr
	cmp #$7 ;keep
	bne title_screen_casenext274
	; LineNumber: 699
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext274
	lda ctr
	cmp #$8 ;keep
	bne title_screen_casenext276
	; LineNumber: 700
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext276
	lda ctr
	cmp #$0 ;keep
	bne title_screen_casenext278
	; LineNumber: 701
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend261
title_screen_casenext278
title_screen_caseend261
	; LineNumber: 709
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed285
	jmp title_screen_ConditionalTrueBlock281
title_screen_localfailed285: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$08
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock283
title_screen_ConditionalTrueBlock281: ;Main true block ;keep 
	; LineNumber: 709
	; LineNumber: 711
	
; // hard 	GAME_SPEED:=4;
; // medium GAME_SPEED:=5;	
; // easy GAME_SPEED:=8;
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 712
title_screen_elsedoneblock283
	; LineNumber: 714
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$07
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed292
	jmp title_screen_ConditionalTrueBlock288
title_screen_localfailed292: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$07
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock290
title_screen_ConditionalTrueBlock288: ;Main true block ;keep 
	; LineNumber: 714
	; LineNumber: 716
	; Assigning single variable : GAME_SPEED
	lda #$5
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 717
title_screen_elsedoneblock290
	; LineNumber: 719
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed299
	jmp title_screen_ConditionalTrueBlock295
title_screen_localfailed299: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock297
title_screen_ConditionalTrueBlock295: ;Main true block ;keep 
	; LineNumber: 719
	; LineNumber: 721
	; Assigning single variable : GAME_SPEED
	lda #$4
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 722
title_screen_elsedoneblock297
	; LineNumber: 724
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$8;keep
	bne title_screen_elseblock303
title_screen_ConditionalTrueBlock302: ;Main true block ;keep 
	; LineNumber: 725
	; LineNumber: 726
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R1
	ldx #>R1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 728
	jmp title_screen_elsedoneblock304
title_screen_elseblock303
	; LineNumber: 729
	; LineNumber: 730
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr311
	sta this_str
	lda #>title_screen_stringassignstr311
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 731
title_screen_elsedoneblock304
	; LineNumber: 733
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bne title_screen_elseblock315
title_screen_ConditionalTrueBlock314: ;Main true block ;keep 
	; LineNumber: 734
	; LineNumber: 735
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R2
	ldx #>R2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 737
	jmp title_screen_elsedoneblock316
title_screen_elseblock315
	; LineNumber: 738
	; LineNumber: 739
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr323
	sta this_str
	lda #>title_screen_stringassignstr323
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 740
title_screen_elsedoneblock316
	; LineNumber: 742
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne title_screen_elseblock327
title_screen_ConditionalTrueBlock326: ;Main true block ;keep 
	; LineNumber: 743
	; LineNumber: 744
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R3
	ldx #>R3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 746
	jmp title_screen_elsedoneblock328
title_screen_elseblock327
	; LineNumber: 747
	; LineNumber: 748
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr335
	sta this_str
	lda #>title_screen_stringassignstr335
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 749
title_screen_elsedoneblock328
	; LineNumber: 752
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock340
title_screen_ConditionalTrueBlock338: ;Main true block ;keep 
	; LineNumber: 752
	; LineNumber: 756
	
; // GRAPHIC KEYBOARD
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 757
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 758
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 759
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 762
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 763
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 764
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 765
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 767
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 768
	jsr ScrollY
	; LineNumber: 769
title_screen_elsedoneblock340
	; LineNumber: 772
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$08
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock346
title_screen_ConditionalTrueBlock344: ;Main true block ;keep 
	; LineNumber: 773
	; LineNumber: 775
	
; // BUSINESS KEYBOARD			
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$16
	lda #$00
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 776
	; Assigning single variable : n_key_down
	; Integer constant assigning
	ldy #$80
	lda #$02
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 777
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 778
	; Assigning single variable : n_key_right
	; Integer constant assigning
	lda #$03
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 781
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$02
	lda #$04
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 782
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$02
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 783
	; Assigning single variable : key_left
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 784
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 786
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 787
	jsr ScrollY
	; LineNumber: 788
title_screen_elsedoneblock346
	; LineNumber: 791
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$05
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_localfailed354
	jmp title_screen_ConditionalTrueBlock350
title_screen_localfailed354: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$02
	ldy #$08
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock352
title_screen_ConditionalTrueBlock350: ;Main true block ;keep 
	; LineNumber: 791
	; LineNumber: 793
	; Assigning single variable : READY_TO_PLAY
	lda #$2
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 794
	jsr ScrollY
	; LineNumber: 795
title_screen_elsedoneblock352
	; LineNumber: 800
	jmp title_screen_while155
title_screen_elsedoneblock158
title_screen_loopend160
	; LineNumber: 803
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 808
score_screen
	; LineNumber: 809
	jsr cls
	; LineNumber: 811
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock359
score_screen_ConditionalTrueBlock358: ;Main true block ;keep 
	; LineNumber: 811
	; LineNumber: 813
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 815
	jmp score_screen_elsedoneblock360
score_screen_elseblock359
	; LineNumber: 815
	; LineNumber: 817
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 818
score_screen_elsedoneblock360
	; LineNumber: 819
	; Copy full screen
	lda petscii_pointer
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
score_screen_outer365
	ldy #0
score_screen_inner366
	lda ($4c),y
	sta ($4e),y
	dey
	bne score_screen_inner366
	inc $4c+1
	inc $4e+1
	dex
	bne score_screen_outer365
	ldy #0
score_screen_final367
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne score_screen_final367
	; LineNumber: 820
	; memcpyfast
	ldx #12
score_screen_memcpy368
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy368
	; LineNumber: 821
	; memcpyfast
	ldx #12
score_screen_memcpy369
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy369
	; LineNumber: 822
	; memcpyfast
	ldx #12
score_screen_memcpy370
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy370
	; LineNumber: 823
	; memcpyfast
	ldx #12
score_screen_memcpy371
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy371
	; LineNumber: 826
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 827
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 829
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 830
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 832
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 832
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal376
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal376
	; LineNumber: 835
	jsr Key_Read
	; LineNumber: 838
score_screen_while377
score_screen_loopstart381
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_elsedoneblock380
score_screen_ConditionalTrueBlock378: ;Main true block ;keep 
	; LineNumber: 839
	; LineNumber: 840
	jsr Key_Read
	; LineNumber: 843
	; Binary clause Simplified: GREATEREQUAL
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc score_screen_abslabel400
	eor #$ff
	adc #$00
score_screen_abslabel400
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc score_screen_elseblock396
score_screen_ConditionalTrueBlock395: ;Main true block ;keep 
	; LineNumber: 844
	; LineNumber: 845
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 847
	jmp score_screen_elsedoneblock397
score_screen_elseblock396
	; LineNumber: 847
	; LineNumber: 849
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 850
score_screen_elsedoneblock397
	; LineNumber: 851
	jmp score_screen_while377
score_screen_elsedoneblock380
score_screen_loopend382
	; LineNumber: 852
	jsr ScrollY
	; LineNumber: 853
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 859
	; LineNumber: 857
spr_p	=    $08
	; LineNumber: 855
spr_x	dc.b	0
	; LineNumber: 855
spr_y	dc.b	0
	; LineNumber: 855
source_str	=    $16
	; LineNumber: 855
spr_len	dc.b	0
sprite_xy_block403
sprite_xy
	; LineNumber: 860
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var406 = $54
	sta sprite_xy_rightvarInteger_var406
	sty sprite_xy_rightvarInteger_var406+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var409 =    $56
	sta sprite_xy_rightvarInteger_var409
	sty sprite_xy_rightvarInteger_var409+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var409
sprite_xy_wordAdd407
	sta sprite_xy_rightvarInteger_var409
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var409+1
	tay
	lda sprite_xy_rightvarInteger_var409
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var406
sprite_xy_wordAdd404
	sta sprite_xy_rightvarInteger_var406
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var406+1
	tay
	lda sprite_xy_rightvarInteger_var406
	sta spr_p
	sty spr_p+1
	; LineNumber: 860
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy410
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy410
	; LineNumber: 862
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var413 = $54
	sta sprite_xy_rightvarInteger_var413
	sty sprite_xy_rightvarInteger_var413+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var416 =    $56
	sta sprite_xy_rightvarInteger_var416
	sty sprite_xy_rightvarInteger_var416+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var419 =    $58
	sta sprite_xy_rightvarInteger_var419
	sty sprite_xy_rightvarInteger_var419+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var419
sprite_xy_wordAdd417
	sta sprite_xy_rightvarInteger_var419
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var419+1
	tay
	lda sprite_xy_rightvarInteger_var419
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var416
sprite_xy_wordAdd414
	sta sprite_xy_rightvarInteger_var416
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var416+1
	tay
	lda sprite_xy_rightvarInteger_var416
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var413
sprite_xy_wordAdd411
	sta sprite_xy_rightvarInteger_var413
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var413+1
	tay
	lda sprite_xy_rightvarInteger_var413
	sta spr_p
	sty spr_p+1
	; LineNumber: 862
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy420
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy420
	; LineNumber: 864
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 872
	; LineNumber: 868
this_row	=    $08
	; LineNumber: 868
target_strip	=    $16
	; LineNumber: 869
iteration	dc.b	0
	; LineNumber: 870
homeplate	dc.b	$d3
init_vars_block421
init_vars
	; LineNumber: 873
	jsr cls
	; LineNumber: 874
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 877
	; Assigning single variable : READY_TO_PLAY
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 881
	
; //	Key::SetupScreenCodes();
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 882
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 883
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
init_vars_outer422
	ldy #0
init_vars_inner423
	lda ($4c),y
	sta ($4e),y
	dey
	bne init_vars_inner423
	inc $4c+1
	inc $4e+1
	dex
	bne init_vars_outer422
	ldy #0
init_vars_final424
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne init_vars_final424
	; LineNumber: 884
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 885
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 899
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop425
	; LineNumber: 889
	; LineNumber: 891
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy437
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy437
	; LineNumber: 892
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd438
	inc target_strip+1
init_vars_WordAdd438
	; LineNumber: 893
	; memcpyfast
	ldy #39
init_vars_memcpy439
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy439
	; LineNumber: 894
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd440
	inc target_strip+1
init_vars_WordAdd440
	; LineNumber: 897
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd441
	inc this_row+1
init_vars_WordAdd441
	; LineNumber: 898
init_vars_forloopcounter427
init_vars_loopstart428
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop425
init_vars_loopdone442: ;keep
init_vars_forloopend426
init_vars_loopend429
	; LineNumber: 901
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy443
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy443
	; LineNumber: 902
	; memcpy
	ldx #0
init_vars_memcpy444
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy444
	; LineNumber: 903
	; memcpy
	ldx #0
init_vars_memcpy445
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy445
	; LineNumber: 904
	; memcpy
	ldx #0
init_vars_memcpy446
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy446
	; LineNumber: 905
	; memcpy
	ldx #0
init_vars_memcpy447
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy447
	; LineNumber: 906
	; memcpy
	ldx #0
init_vars_memcpy448
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy448
	; LineNumber: 907
	; memcpy
	ldx #0
init_vars_memcpy449
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy449
	; LineNumber: 909
	; memcpy
	ldx #0
init_vars_memcpy450
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy450
	; LineNumber: 910
	; memcpy
	ldx #0
init_vars_memcpy451
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy451
	; LineNumber: 911
	; memcpy
	ldx #0
init_vars_memcpy452
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy452
	; LineNumber: 912
	; memcpy
	ldx #0
init_vars_memcpy453
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy453
	; LineNumber: 916
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 917
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock457
init_vars_ConditionalTrueBlock455: ;Main true block ;keep 
	; LineNumber: 916
	; LineNumber: 917
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 917
init_vars_elsedoneblock457
	; LineNumber: 919
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 920
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock463
init_vars_ConditionalTrueBlock461: ;Main true block ;keep 
	; LineNumber: 919
	; LineNumber: 920
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 920
init_vars_elsedoneblock463
	; LineNumber: 922
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 923
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 925
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 926
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock469
init_vars_ConditionalTrueBlock467: ;Main true block ;keep 
	; LineNumber: 925
	; LineNumber: 926
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 926
init_vars_elsedoneblock469
	; LineNumber: 928
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 929
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock475
init_vars_ConditionalTrueBlock473: ;Main true block ;keep 
	; LineNumber: 928
	; LineNumber: 929
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 929
init_vars_elsedoneblock475
	; LineNumber: 930
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 932
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 933
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 934
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 935
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 937
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock481
init_vars_ConditionalTrueBlock479: ;Main true block ;keep 
	; LineNumber: 936
	; LineNumber: 938
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 939
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 940
init_vars_elsedoneblock481
	; LineNumber: 942
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 943
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 944
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 945
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 947
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock487
init_vars_ConditionalTrueBlock485: ;Main true block ;keep 
	; LineNumber: 946
	; LineNumber: 948
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 949
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 950
init_vars_elsedoneblock487
	; LineNumber: 953
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 954
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 955
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_localfailed495
	jmp init_vars_ConditionalTrueBlock491
init_vars_localfailed495
	jmp init_vars_elsedoneblock493
init_vars_ConditionalTrueBlock491: ;Main true block ;keep 
	; LineNumber: 954
	; LineNumber: 956
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 957
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 959
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 960
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 961
init_vars_elsedoneblock493
	; LineNumber: 963
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 964
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 965
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 966
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 968
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 969
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 971
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 972
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 973
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 975
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 976
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 979
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 980
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 981
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 982
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 983
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 984
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 985
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 989
move_obstacles
	; LineNumber: 992
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax499
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax499
	; LineNumber: 993
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 994
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 998
move_traffic
	; LineNumber: 1001
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax502
	lda #$0
	sta traffic_x_rl
move_traffic_incmax502
	; LineNumber: 1002
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 1003
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 1010
	; LineNumber: 1008
char_under	dc.b	0
frog_ride_block503
frog_ride
	; LineNumber: 1011
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 1014
	cmp #$51 ;keep
	bne frog_ride_casenext505
	; LineNumber: 1017
	; LineNumber: 1018
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock510
frog_ride_ConditionalTrueBlock508: ;Main true block ;keep 
	; LineNumber: 1019
	; LineNumber: 1020
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 1021
frog_ride_elsedoneblock510
	; LineNumber: 1022
	jmp frog_ride_caseend504
frog_ride_casenext505
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext515
	; LineNumber: 1025
	; LineNumber: 1026
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock520
frog_ride_ConditionalTrueBlock518: ;Main true block ;keep 
	; LineNumber: 1027
	; LineNumber: 1028
	
; // (
	inc frog_x
	; LineNumber: 1029
frog_ride_elsedoneblock520
	; LineNumber: 1030
	jmp frog_ride_caseend504
frog_ride_casenext515
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext525
	; LineNumber: 1033
	; LineNumber: 1034
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock530
frog_ride_ConditionalTrueBlock528: ;Main true block ;keep 
	; LineNumber: 1035
	; LineNumber: 1036
	
; // ) 
	dec frog_x
	; LineNumber: 1037
frog_ride_elsedoneblock530
	; LineNumber: 1038
	jmp frog_ride_caseend504
frog_ride_casenext525
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext535
	; LineNumber: 1041
	; LineNumber: 1042
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock540
frog_ride_localsuccess543: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock540
frog_ride_ConditionalTrueBlock538: ;Main true block ;keep 
	; LineNumber: 1043
	; LineNumber: 1044
	
; // Crock body 
	inc frog_x
	; LineNumber: 1045
frog_ride_elsedoneblock540
	; LineNumber: 1047
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock549
frog_ride_localsuccess552: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock549
frog_ride_ConditionalTrueBlock547: ;Main true block ;keep 
	; LineNumber: 1048
	; LineNumber: 1049
	dec frog_x
	; LineNumber: 1050
frog_ride_elsedoneblock549
	; LineNumber: 1051
	jmp frog_ride_caseend504
frog_ride_casenext535
frog_ride_caseend504
	; LineNumber: 1053
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1060
	; LineNumber: 1057
strip_num	dc.b	0
	; LineNumber: 1057
this_strip	dc.b	0
	; LineNumber: 1058
this_source_offset	=    $08
	; LineNumber: 1059
game_move	dc.b	0
show_obstacles_block555
show_obstacles
	; LineNumber: 1063
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var561 = $54
	sta show_obstacles_val_var561
	lda GAME_TICKS
	sec
show_obstacles_modulo562
	sbc show_obstacles_val_var561
	bcs show_obstacles_modulo562
	adc show_obstacles_val_var561
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock559
show_obstacles_ConditionalTrueBlock557: ;Main true block ;keep 
	; LineNumber: 1064
	; LineNumber: 1065
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 1066
show_obstacles_elsedoneblock559
	; LineNumber: 1069
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var570 = $54
	sta show_obstacles_val_var570
	lda GAME_TICKS
	sec
show_obstacles_modulo571
	sbc show_obstacles_val_var570
	bcs show_obstacles_modulo571
	adc show_obstacles_val_var570
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock566
show_obstacles_ConditionalTrueBlock565: ;Main true block ;keep 
	; LineNumber: 1070
	; LineNumber: 1072
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 1073
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 1075
	jmp show_obstacles_elsedoneblock567
show_obstacles_elseblock566
	; LineNumber: 1076
	; LineNumber: 1077
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 1078
show_obstacles_elsedoneblock567
	; LineNumber: 1101
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop574
	; LineNumber: 1082
	; LineNumber: 1083
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1084
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var602 = $54
	sta show_obstacles_rightvarInteger_var602
	sty show_obstacles_rightvarInteger_var602+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var602
show_obstacles_wordAdd600
	sta show_obstacles_rightvarInteger_var602
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var602+1
	tay
	lda show_obstacles_rightvarInteger_var602
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1086
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var605 = $54
	sta show_obstacles_rightvarInteger_var605
	sty show_obstacles_rightvarInteger_var605+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var605
show_obstacles_wordAdd603
	sta show_obstacles_rightvarInteger_var605
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var605+1
	tay
	lda show_obstacles_rightvarInteger_var605
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1088
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock608
show_obstacles_ConditionalTrueBlock607: ;Main true block ;keep 
	; LineNumber: 1089
	; LineNumber: 1090
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd615
	inc this_source_offset+1
show_obstacles_WordAdd615
	; LineNumber: 1092
	jmp show_obstacles_elsedoneblock609
show_obstacles_elseblock608
	; LineNumber: 1093
	; LineNumber: 1094
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd617
	inc this_source_offset+1
show_obstacles_WordAdd617
	; LineNumber: 1095
show_obstacles_elsedoneblock609
	; LineNumber: 1096
	; memcpyfast
	ldy #39
show_obstacles_memcpy618
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy618
	; LineNumber: 1100
show_obstacles_forloopcounter576
show_obstacles_loopstart577
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone619
show_obstacles_loopnotdone620
	jmp show_obstacles_forloop574
show_obstacles_loopdone619
show_obstacles_forloopend575
show_obstacles_loopend578
	; LineNumber: 1121
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop621
	; LineNumber: 1103
	; LineNumber: 1104
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1105
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var649 = $54
	sta show_obstacles_rightvarInteger_var649
	sty show_obstacles_rightvarInteger_var649+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var649
show_obstacles_wordAdd647
	sta show_obstacles_rightvarInteger_var649
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var649+1
	tay
	lda show_obstacles_rightvarInteger_var649
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1106
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var652 = $54
	sta show_obstacles_rightvarInteger_var652
	sty show_obstacles_rightvarInteger_var652+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var652
show_obstacles_wordAdd650
	sta show_obstacles_rightvarInteger_var652
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var652+1
	tay
	lda show_obstacles_rightvarInteger_var652
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1108
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock655
show_obstacles_ConditionalTrueBlock654: ;Main true block ;keep 
	; LineNumber: 1109
	; LineNumber: 1110
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd662
	inc this_source_offset+1
show_obstacles_WordAdd662
	; LineNumber: 1112
	jmp show_obstacles_elsedoneblock656
show_obstacles_elseblock655
	; LineNumber: 1113
	; LineNumber: 1114
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd664
	inc this_source_offset+1
show_obstacles_WordAdd664
	; LineNumber: 1115
show_obstacles_elsedoneblock656
	; LineNumber: 1116
	; memcpyfast
	ldy #39
show_obstacles_memcpy665
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy665
	; LineNumber: 1120
show_obstacles_forloopcounter623
show_obstacles_loopstart624
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone666
show_obstacles_loopnotdone667
	jmp show_obstacles_forloop621
show_obstacles_loopdone666
show_obstacles_forloopend622
show_obstacles_loopend625
	; LineNumber: 1122
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock671
show_obstacles_ConditionalTrueBlock669: ;Main true block ;keep 
	; LineNumber: 1123
	; LineNumber: 1126
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1127
show_obstacles_elsedoneblock671
	; LineNumber: 1130
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1132
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1135
kill_frog
	; LineNumber: 1136
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1137
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1138
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1139
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 1140
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1141
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1142
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1143
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1144
	jsr burp
	; LineNumber: 1145
	dec player_lives
	; LineNumber: 1146
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1151
check_collisions
	; LineNumber: 1153
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 1159
	cmp frogcharA ;keep
	bne check_collisions_casenext678
	; LineNumber: 1163
	; LineNumber: 1164
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock683
check_collisions_ConditionalTrueBlock681: ;Main true block ;keep 
	; LineNumber: 1165
	; LineNumber: 1166
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1167
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1168
check_collisions_elsedoneblock683
	; LineNumber: 1169
	jmp check_collisions_caseend677
check_collisions_casenext678
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext686
	; LineNumber: 1171
	; LineNumber: 1172
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock691
check_collisions_ConditionalTrueBlock689: ;Main true block ;keep 
	; LineNumber: 1173
	; LineNumber: 1174
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1175
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1176
check_collisions_elsedoneblock691
	; LineNumber: 1177
	jmp check_collisions_caseend677
check_collisions_casenext686
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext694
	; LineNumber: 1180
	; LineNumber: 1181
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock699
check_collisions_ConditionalTrueBlock697: ;Main true block ;keep 
	; LineNumber: 1182
	; LineNumber: 1183
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1184
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1185
check_collisions_elsedoneblock699
	; LineNumber: 1186
	jmp check_collisions_caseend677
check_collisions_casenext694
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext702
	; LineNumber: 1189
	; LineNumber: 1190
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1191
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1192
	jmp check_collisions_caseend677
check_collisions_casenext702
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext704
	; LineNumber: 1195
	; LineNumber: 1196
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1197
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1198
	jmp check_collisions_caseend677
check_collisions_casenext704
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext706
	; LineNumber: 1204
	; LineNumber: 1205
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock711
check_collisions_localsuccess713: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock711
check_collisions_ConditionalTrueBlock709: ;Main true block ;keep 
	; LineNumber: 1206
	; LineNumber: 1207
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1208
check_collisions_elsedoneblock711
	; LineNumber: 1209
	jmp check_collisions_caseend677
check_collisions_casenext706
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext715
	; LineNumber: 1214
	; LineNumber: 1215
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1216
	jmp check_collisions_caseend677
check_collisions_casenext715
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext717
	; LineNumber: 1219
	; LineNumber: 1220
	jsr kill_frog
	; LineNumber: 1221
	jmp check_collisions_caseend677
check_collisions_casenext717
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext719
	; LineNumber: 1224
	; LineNumber: 1225
	jsr kill_frog
	; LineNumber: 1227
	jmp check_collisions_caseend677
check_collisions_casenext719
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext721
	; LineNumber: 1229
	; LineNumber: 1230
	jsr kill_frog
	; LineNumber: 1232
	jmp check_collisions_caseend677
check_collisions_casenext721
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext723
	; LineNumber: 1235
	; LineNumber: 1236
	jsr kill_frog
	; LineNumber: 1238
	jmp check_collisions_caseend677
check_collisions_casenext723
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext725
	; LineNumber: 1241
	; LineNumber: 1242
	jsr kill_frog
	; LineNumber: 1244
	jmp check_collisions_caseend677
check_collisions_casenext725
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext727
	; LineNumber: 1247
	; LineNumber: 1248
	jsr kill_frog
	; LineNumber: 1250
	jmp check_collisions_caseend677
check_collisions_casenext727
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext729
	; LineNumber: 1253
	; LineNumber: 1254
	jsr kill_frog
	; LineNumber: 1256
	jmp check_collisions_caseend677
check_collisions_casenext729
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext731
	; LineNumber: 1259
	; LineNumber: 1260
	jsr kill_frog
	; LineNumber: 1262
	jmp check_collisions_caseend677
check_collisions_casenext731
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext733
	; LineNumber: 1266
	; LineNumber: 1267
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1269
	jmp check_collisions_caseend677
check_collisions_casenext733
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext735
	; LineNumber: 1272
	; LineNumber: 1273
	jsr kill_frog
	; LineNumber: 1274
	jmp check_collisions_caseend677
check_collisions_casenext735
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext737
	; LineNumber: 1279
	; LineNumber: 1280
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1281
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1282
	jmp check_collisions_caseend677
check_collisions_casenext737
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext739
	; LineNumber: 1285
	; LineNumber: 1286
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed756
	jmp check_collisions_ConditionalTrueBlock742
check_collisions_localfailed756: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock744
check_collisions_ConditionalTrueBlock742: ;Main true block ;keep 
	; LineNumber: 1287
	; LineNumber: 1288
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd758
	inc player_score+1
check_collisions_WordAdd758
	; LineNumber: 1289
	inc FROGS_SAVED
	; LineNumber: 1290
	jsr ping
	; LineNumber: 1292
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock762
check_collisions_ConditionalTrueBlock761: ;Main true block ;keep 
	; LineNumber: 1293
	; LineNumber: 1295
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1297
	jmp check_collisions_elsedoneblock763
check_collisions_elseblock762
	; LineNumber: 1298
	; LineNumber: 1299
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1300
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1301
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1302
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1303
check_collisions_elsedoneblock763
	; LineNumber: 1304
check_collisions_elsedoneblock744
	; LineNumber: 1305
	jmp check_collisions_caseend677
check_collisions_casenext739
	; LineNumber: 1309
	; LineNumber: 1312
check_collisions_caseend677
	; LineNumber: 1313
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1323
game_loop
	; LineNumber: 1332
game_loop_while770
game_loop_loopstart774
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed910
game_loop_localsuccess911: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed910
	jmp game_loop_ConditionalTrueBlock771
game_loop_localfailed910
	jmp game_loop_elsedoneblock773
game_loop_ConditionalTrueBlock771: ;Main true block ;keep 
	; LineNumber: 1333
	; LineNumber: 1335
	
; //	Key::SetupScreenCodes();
; // Unit constants
	jsr Key_Read
	; LineNumber: 1337
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1338
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1339
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed928
	jmp game_loop_ConditionalTrueBlock914
game_loop_localfailed928: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock916
game_loop_ConditionalTrueBlock914: ;Main true block ;keep 
	; LineNumber: 1340
	; LineNumber: 1341
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock933
game_loop_ConditionalTrueBlock931: ;Main true block ;keep 
	; LineNumber: 1342
	; LineNumber: 1343
	dec frog_y
	; LineNumber: 1344
	inc player_score
	bne game_loop_incdec939
	inc player_score +1
game_loop_incdec939
	; LineNumber: 1345
game_loop_elsedoneblock933
	; LineNumber: 1346
game_loop_elsedoneblock916
	; LineNumber: 1348
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed955
	jmp game_loop_ConditionalTrueBlock941
game_loop_localfailed955: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock943
game_loop_ConditionalTrueBlock941: ;Main true block ;keep 
	; LineNumber: 1349
	; LineNumber: 1350
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock960
game_loop_ConditionalTrueBlock958: ;Main true block ;keep 
	; LineNumber: 1351
	; LineNumber: 1352
	inc frog_x
	; LineNumber: 1353
	inc player_score
	bne game_loop_incdec966
	inc player_score +1
game_loop_incdec966
	; LineNumber: 1354
game_loop_elsedoneblock960
	; LineNumber: 1355
game_loop_elsedoneblock943
	; LineNumber: 1357
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed982
	jmp game_loop_ConditionalTrueBlock968
game_loop_localfailed982: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock970
game_loop_ConditionalTrueBlock968: ;Main true block ;keep 
	; LineNumber: 1358
	; LineNumber: 1359
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock987
game_loop_ConditionalTrueBlock985: ;Main true block ;keep 
	; LineNumber: 1360
	; LineNumber: 1361
	inc frog_y
	; LineNumber: 1362
	inc player_score
	bne game_loop_incdec993
	inc player_score +1
game_loop_incdec993
	; LineNumber: 1363
game_loop_elsedoneblock987
	; LineNumber: 1364
game_loop_elsedoneblock970
	; LineNumber: 1365
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed1009
	jmp game_loop_ConditionalTrueBlock995
game_loop_localfailed1009: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock997
game_loop_ConditionalTrueBlock995: ;Main true block ;keep 
	; LineNumber: 1366
	; LineNumber: 1367
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock1014
game_loop_ConditionalTrueBlock1012: ;Main true block ;keep 
	; LineNumber: 1368
	; LineNumber: 1369
	dec frog_x
	; LineNumber: 1370
	inc player_score
	bne game_loop_incdec1020
	inc player_score +1
game_loop_incdec1020
	; LineNumber: 1371
game_loop_elsedoneblock1014
	; LineNumber: 1372
game_loop_elsedoneblock997
	; LineNumber: 1375
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax1022
	lda #$1
	sta GAME_TICKS
game_loop_incmax1022
	; LineNumber: 1378
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1381
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1384
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock1026
game_loop_ConditionalTrueBlock1024: ;Main true block ;keep 
	; LineNumber: 1385
	; LineNumber: 1387
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1389
game_loop_elsedoneblock1026
	; LineNumber: 1394
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed1034
	jmp game_loop_ConditionalTrueBlock1030
game_loop_localfailed1034: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock1032
game_loop_ConditionalTrueBlock1030: ;Main true block ;keep 
	; LineNumber: 1395
	; LineNumber: 1396
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1397
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1398
game_loop_elsedoneblock1032
	; LineNumber: 1401
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock1038
game_loop_ConditionalTrueBlock1037: ;Main true block ;keep 
	; LineNumber: 1402
	; LineNumber: 1403
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1405
	jmp game_loop_elsedoneblock1039
game_loop_elseblock1038
	; LineNumber: 1406
	; LineNumber: 1407
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1408
game_loop_elsedoneblock1039
	; LineNumber: 1413
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1413
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal1044
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1044
	; LineNumber: 1415
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1415
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal1045
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1045
	; LineNumber: 1419
	jmp game_loop_while770
game_loop_elsedoneblock773
game_loop_loopend775
	; LineNumber: 1421
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : intro_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1424
intro_loop
	; LineNumber: 1426
intro_loop_while1047
intro_loop_loopstart1051
	; Binary clause Simplified: NOTEQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$1;keep
	beq intro_loop_elsedoneblock1050
intro_loop_ConditionalTrueBlock1048: ;Main true block ;keep 
	; LineNumber: 1427
	; LineNumber: 1428
	jsr title_screen
	; LineNumber: 1429
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$2;keep
	bne intro_loop_elsedoneblock1064
intro_loop_ConditionalTrueBlock1062: ;Main true block ;keep 
	; LineNumber: 1428
	; LineNumber: 1429
	jsr help_screen
	; LineNumber: 1429
intro_loop_elsedoneblock1064
	; LineNumber: 1430
	jmp intro_loop_while1047
intro_loop_elsedoneblock1050
intro_loop_loopend1052
	; LineNumber: 1431
	rts
block1
	; LineNumber: 1436
	; Assigning single variable : is_80
	lda #$0
	; Calling storevariable
	sta is_80
	; LineNumber: 1437
	; Assigning single variable : is_80
	jsr is_80_columns
	; Calling storevariable
	sta is_80
	; LineNumber: 1440
	; Binary clause Simplified: EQUALS
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock1070
MainProgram_ConditionalTrueBlock1068: ;Main true block ;keep 
	; LineNumber: 1441
	; LineNumber: 1442
	jsr cursor_down
	; LineNumber: 1443
	jsr cursor_return
	; LineNumber: 1444
	jsr uppercase
	; LineNumber: 1445
	jsr cursor_graphic
	; LineNumber: 1446
	; Assigning single variable : _ptr
	lda #<sorry_80
	ldx #>sorry_80
	sta _ptr
	stx _ptr+1
	jsr basic_print
	; LineNumber: 1447
	jmp * ; loop like (�/%
	; LineNumber: 1448
MainProgram_elsedoneblock1070
	; LineNumber: 1449
	; LineNumber: 1451
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1452
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1455
	jsr cls
	; LineNumber: 1457
MainProgram_while1073
MainProgram_loopstart1077
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock1076
MainProgram_ConditionalTrueBlock1074: ;Main true block ;keep 
	; LineNumber: 1458
	; LineNumber: 1460
	jsr intro_loop
	; LineNumber: 1461
	jsr init_vars
	; LineNumber: 1462
	jsr game_loop
	; LineNumber: 1463
	jsr score_screen
	; LineNumber: 1464
	jmp MainProgram_while1073
MainProgram_elsedoneblock1076
MainProgram_loopend1078
	; LineNumber: 1468
	; End of program
	; Ending memory block
EndBlock410
title_screen_stringassignstr311	.dc "1",0
title_screen_stringassignstr323	.dc "2",0
title_screen_stringassignstr335	.dc "3",0
