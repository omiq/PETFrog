 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1407
	jmp block1
	; LineNumber: 3
Key_temp	dc.b	0
	; LineNumber: 5
Key_keyState	dc.b	0
	; LineNumber: 7
Key_KeyRow = $e810
	; LineNumber: 8
Key_KeyRead = $e812
	; LineNumber: 9
Key_KeyInterrupt = $e813
	; LineNumber: 12
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 13
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 14
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 144
Key_screencodes	
	dc.b	$21, $23, $25, $26, 40, 69, 72, 74, 34
	dc.b	$24, $27, , 41, 255, 73, 75, $11, $05
	dc.b	$14, $15, $0f, 70, $37, $39, $17, $12, $19
	dc.b	$09, $10, 255, $38, $2f, $01, $04, $07, $0a
	dc.b	$0c, 255, $34, $36, $13, $06, $08, $0b, $3a
	dc.b	255, $35, $2a, $1a, $03, $02, $0d, $3b, 71
	dc.b	$31, $33, $18, $16, $0e, 44, $3f, 255, $32
	dc.b	$2b, 255, $00, $1d, 255, $3e, 255, $30, $2d
	dc.b	67, $1b, $20, $3c, 68, 255, $2e, $3d, 0
	; LineNumber: 13
ti = $8f
	; LineNumber: 30
KEYPRESS	dc.w	$ff
	; LineNumber: 32
ks	dc.b	$00
	; LineNumber: 34
n_key_up	dc.w	0
	; LineNumber: 34
n_key_down	dc.w	0
	; LineNumber: 34
n_key_left	dc.w	0
	; LineNumber: 34
n_key_right	dc.w	0
	; LineNumber: 34
key_up	dc.w	0
	; LineNumber: 34
key_down	dc.w	0
	; LineNumber: 34
key_left	dc.w	0
	; LineNumber: 34
key_right	dc.w	0
	; LineNumber: 41
PLAY_SOUND	dc.b	$01
	; LineNumber: 42
GAME_SPEED	dc.b	$08
	; LineNumber: 43
ALIVE	dc.b	$01
	; LineNumber: 44
WON_GAME	dc.b	$00
	; LineNumber: 45
FROGS_SAVED	dc.b	$00
	; LineNumber: 46
GAME_TICKS	dc.b	$00
	; LineNumber: 47
READY_TO_PLAY	dc.b	$00
	; LineNumber: 51
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 52
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 53
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 54
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 55
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 56
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 57
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 58
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 59
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 60
is_80	dc.b	0
	; LineNumber: 63
sorry_80		dc.b	147
	dc.b	14
	dc.b	"80 COLUMNS DETECTED"
	dc.b	13
	dc.b	"PLEASE CHOOSE 40 COLUMNS AND REBOOT"
	dc.b	0
	; LineNumber: 65
help_screen_array	
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 78, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	77, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 16, 5, 20, 6, 18, 15, 7, 32
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 116
	dc.b	42, 32, 18, 5, 17, 21, 9, 18, 5
	dc.b	19, 32, 7, 18, 1, 16, 8, 9, 3
	dc.b	32, 11, 5, 25, 2, 15, 1, 18, 4
	dc.b	32, 32, 32, 103, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 116, 42, 32, 16, 12, 1
	dc.b	25, 32, 9, 14, 32, 52, 48, 32, 3
	dc.b	15, 12, 21, 13, 14, 32, 13, 15, 4
	dc.b	5, 32, 32, 32, 32, 32, 32, 103, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 116, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 103, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 116, 2, 18, 9, 14, 7, 32
	dc.b	25, 15, 21, 18, 32, 6, 18, 15, 7
	dc.b	7, 9, 5, 19, 32, 8, 15, 13, 5
	dc.b	33, 32, 32, 32, 32, 32, 103, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 116, 1, 22
	dc.b	15, 9, 4, 32, 20, 18, 1, 6, 6
	dc.b	9, 3, 32, 1, 14, 4, 32, 3, 18
	dc.b	15, 3, 32, 13, 15, 21, 20, 8, 19
	dc.b	32, 103, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 116, 2, 5, 20, 23, 5, 5, 14
	dc.b	32, 18, 9, 22, 5, 18, 32, 2, 1
	dc.b	14, 11, 19, 32, 9, 19, 32, 4, 5
	dc.b	1, 4, 12, 25, 32, 106, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 116, 18, 9, 4
	dc.b	5, 32, 12, 15, 7, 19, 44, 32, 3
	dc.b	18, 15, 3, 32, 2, 15, 4, 19, 32
	dc.b	43, 32, 20, 21, 18, 20, 12, 5, 19
	dc.b	103, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 230, 32, 7, 5
	dc.b	20, 32, 19, 9, 24, 32, 6, 18, 15
	dc.b	7, 19, 32, 15, 14, 32, 83, 32, 20
	dc.b	15, 32, 23, 9, 14, 33, 32, 102, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 77
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 32, 32, 32
	dc.b	32, 32, 111, 78, 108, 226, 123, 32, 98
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 97, 32, 32, 32, 254, 126, 32, 32
	dc.b	32, 32, 124, 32, 127, 32, 32, 32, 32
	dc.b	32, 32, 32, 98, 98, 98, 98, 98, 32
	dc.b	32, 85, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 64, 64, 64, 73, 251, 32, 32, 225
	dc.b	126, 32, 32, 108, 160, 123, 108, 160, 123
	dc.b	32, 32, 32, 32, 108, 160, 160, 160, 226
	dc.b	32, 32, 124, 123, 32, 93, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 93
	dc.b	225, 123, 32, 225, 123, 32, 32, 225, 254
	dc.b	252, 254, 254, 252, 123, 32, 32, 32, 254
	dc.b	226, 97, 108, 98, 160, 252, 32, 251, 32
	dc.b	93, 11, 5, 25, 19, 58, 32, 32, 32
	dc.b	32, 32, 32, 93, 32, 251, 123, 32, 252
	dc.b	32, 108, 160, 160, 160, 160, 252, 124, 160
	dc.b	32, 32, 32, 236, 254, 108, 160, 160, 236
	dc.b	225, 32, 124, 252, 93, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 93, 32
	dc.b	32, 124, 127, 255, 127, 123, 124, 251, 160
	dc.b	160, 126, 252, 160, 32, 32, 225, 126, 97
	dc.b	225, 160, 126, 254, 126, 32, 98, 236, 93
	dc.b	32, 32, 32, 32, 32, 23, 32, 32, 32
	dc.b	56, 32, 93, 32, 32, 32, 32, 124, 226
	dc.b	126, 32, 108, 108, 123, 108, 160, 160, 32
	dc.b	32, 160, 108, 97, 32, 226, 226, 32, 98
	dc.b	236, 126, 108, 93, 127, 123, 32, 32, 1
	dc.b	19, 4, 32, 52, 53, 54, 93, 32, 32
	dc.b	32, 32, 32, 32, 160, 252, 124, 226, 108
	dc.b	160, 251, 160, 32, 32, 97, 225, 32, 32
	dc.b	32, 98, 226, 126, 32, 255, 252, 74, 64
	dc.b	64, 64, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 75, 32, 32, 32, 32, 225, 123, 225
	dc.b	160, 160, 160, 160, 126, 254, 160, 32, 225
	dc.b	97, 160, 32, 254, 226, 126, 98, 160, 252
	dc.b	123, 108, 124, 32, 32, 97, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	252, 108, 97, 124, 160, 160, 98, 98, 254
	dc.b	160, 160, 32, 32, 251, 123, 251, 123, 32
	dc.b	160, 160, 160, 236, 126, 32, 32, 123, 126
	dc.b	97, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 108, 32, 160, 160, 123, 32
	dc.b	160, 160, 160, 160, 160, 160, 32, 32, 124
	dc.b	160, 123, 251, 123, 124, 226, 126, 32, 32
	dc.b	98, 236, 108, 226, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 226
	dc.b	251, 160, 160, 254, 254, 160, 160, 160, 160
	dc.b	160, 0
	; LineNumber: 109
frogcharA	dc.b	$d6
	; LineNumber: 110
frogcharB	dc.b	$56
	; LineNumber: 111
frog_x	dc.b	$14
	; LineNumber: 111
frog_old_x	dc.b	$14
	; LineNumber: 112
frog_y	dc.b	$18
	; LineNumber: 112
frog_old_y	dc.b	$18
	; LineNumber: 113
previous_tile	dc.b	$20
	; LineNumber: 114
next_tile	dc.b	0
	; LineNumber: 115
player_lives	dc.b	$00
	; LineNumber: 116
player_score	dc.w	$00
	; LineNumber: 118
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 119
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 121
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 122
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 125
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 126
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 128
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 129
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 131
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 132
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 134
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 135
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 137
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 138
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 142
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 143
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 144
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 145
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 153
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 154
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 155
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 156
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 161
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 162
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 164
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 167
traffic_x_rl	dc.b	0
	; LineNumber: 167
traffic_x_lr	dc.b	0
	; LineNumber: 168
obstacles_x_rl	dc.b	0
	; LineNumber: 168
obstacles_x_lr	dc.b	0
	; LineNumber: 172
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 180
title_screen_frog_pointer	= $02
	; LineNumber: 181
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 209
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 237
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 266
petscii_pointer	= $04
	; LineNumber: 300
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key__GetKeyOffset
	;    Procedure type : User-defined procedure
	; LineNumber: 175
	; LineNumber: 174
	; LineNumber: 174
Key__GetKeyOffset_block4
Key__GetKeyOffset
	; LineNumber: 178
	; ****** Inline assembler section
	
	; pass with _a containing key to check 1, 2, 4, 8, 16, 32, 64, 128
	; and y the row offset 0 - 9
	tax ; temp store key
	
	tya ; multiply row offset by 8 to find starting pos in array
	asl
	asl
	asl ; *8
	sta TEMP_VAR1
	
	; use temporary variable as a pointer
	lda #>Key_screencodes
	sta TEMP_VAR2+1 ; high byte
	lda #<Key_screencodes
	sta TEMP_VAR2 ; low byte
	
	clc
	adc TEMP_VAR1
	sta TEMP_VAR2
	bcc getKey_NoOverflow
	inc TEMP_VAR2+1 ; byte overflow, update high byte
	
getKey_NoOverflow
	; then work out the offest 0 - 7
	txa ; the key
	
	ldy #0  ; count the number of shifts
	ldx #8	; test all 8 bits
getKey_testLoop
	lsr ; bit put in carry
	bcs getKey_foundBit
	iny	; counter for next bit to test
	dex	; 
	bne getKey_testLoop
	
getKey_foundBit
	; x has the bit 0-7 or 8 if not found
	cpy #8
	beq getKey_NotFound
	
	lda (TEMP_VAR2),y  ; load screencode + bit offset
	rts 
	
getKey_NotFound
	lda #KEY_NOKEY ; not found
	
	; LineNumber: 230
	rts
	;*
; //Read the full 10 row keyboard matrix 
; //and populate the keyboard flags
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 261
Key_Read
	; LineNumber: 263
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 292
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop6
	; LineNumber: 266
	; LineNumber: 268
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 270
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 291
Key_Read_forloopcounter8
Key_Read_loopstart9
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop6
Key_Read_loopdone13: ;keep
Key_Read_forloopend7
Key_Read_loopend10
	; LineNumber: 293
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 309
	; LineNumber: 308
Key_Pressed_block14
Key_Pressed
	; LineNumber: 311
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 319
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_SetupScreenCodes
	;    Procedure type : User-defined procedure
	; LineNumber: 342
Key_SetupScreenCodes
	; LineNumber: 344
	; Assigning memory location
	; Assigning single variable : $5e
	; Load Unknown type array
	ldx #$0
	lda Key_screencodes,x
	; Calling storevariable
	sta $5e
	; LineNumber: 346
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 344
cls
	; LineNumber: 345
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop18
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop18
	; LineNumber: 346
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 347
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : _ti
	;    Procedure type : User-defined procedure
	; LineNumber: 352
	; LineNumber: 351
ti_temp	dc.w	0
_ti_block19
_ti
	; LineNumber: 353
	; Assigning single variable : ti_temp
	ldy #0
	lda #$0
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 354
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var22 = $54
	sta _ti_rightvarInteger_var22
	sty _ti_rightvarInteger_var22+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8D + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	sta mul16x8_num1
	sty mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var22
_ti_wordAdd20
	sta _ti_rightvarInteger_var22
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var22+1
	tay
	lda _ti_rightvarInteger_var22
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 355
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var25 = $54
	sta _ti_rightvarInteger_var25
	sty _ti_rightvarInteger_var25+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8E + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var25
_ti_wordAdd23
	sta _ti_rightvarInteger_var25
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var25+1
	tay
	lda _ti_rightvarInteger_var25
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 356
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var28 = $54
	sta _ti_rightvarInteger_var28
	sty _ti_rightvarInteger_var28+1
	; Peek
	lda $8F + $0
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var28
_ti_wordAdd26
	sta _ti_rightvarInteger_var28
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var28+1
	tay
	lda _ti_rightvarInteger_var28
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 358
	; LineNumber: 359
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 362
uppercase
	; LineNumber: 363
	; Poke
	; Optimization: shift is zero
	lda #$c
	sta $E84C
	; LineNumber: 364
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_home
	;    Procedure type : User-defined procedure
	; LineNumber: 367
cursor_home
	; LineNumber: 369
	; Assigning register : _a
	lda #$13
	; LineNumber: 370
	jsr $FFD2
	; LineNumber: 372
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 383
cursor_return
	; LineNumber: 385
	; Assigning register : _a
	lda #$d
	; LineNumber: 386
	jsr $FFD2
	; LineNumber: 388
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 391
cursor_down
	; LineNumber: 393
	; Assigning register : _a
	lda #$11
	; LineNumber: 394
	jsr $FFD2
	; LineNumber: 396
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 407
cursor_graphic
	; LineNumber: 409
	; Assigning register : _a
	lda #$8e
	; LineNumber: 410
	jsr $FFD2
	; LineNumber: 412
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : basic_print
	;    Procedure type : User-defined procedure
	; LineNumber: 417
	; LineNumber: 416
next_ch	dc.b	0
	; LineNumber: 414
_ptr	= $08
basic_print_block34
basic_print
	; LineNumber: 419
	; Assigning single variable : next_ch
	lda #$0
	; Calling storevariable
	sta next_ch
	; LineNumber: 420
basic_print_while35
basic_print_loopstart39
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq basic_print_elsedoneblock38
basic_print_ConditionalTrueBlock36: ;Main true block ;keep 
	; LineNumber: 420
	; LineNumber: 422
	; Assigning register : _a
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; LineNumber: 423
	jsr $FFD2
	; LineNumber: 424
	inc next_ch
	; LineNumber: 425
	jmp basic_print_while35
basic_print_elsedoneblock38
basic_print_loopend40
	; LineNumber: 427
	jsr cursor_return
	; LineNumber: 428
	jsr cursor_down
	; LineNumber: 430
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 456
	; LineNumber: 453
char	dc.b	0
	; LineNumber: 454
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 455
screen_pointer	= $08
is_80_columns_block45
is_80_columns
	; LineNumber: 458
	; Assigning single variable : screen_pointer
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 465
	; Assigning single variable : char
	lda #$0
	; Calling storevariable
	sta char
is_80_columns_forloop46
	; LineNumber: 461
	; LineNumber: 462
	; Assigning register : _a
	; Load Unknown type array
	ldx char
	lda test_string,x
	; LineNumber: 463
	jsr $FFD2
	; LineNumber: 464
is_80_columns_forloopcounter48
is_80_columns_loopstart49
	; Compare is onpage
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop46
is_80_columns_loopdone53: ;keep
is_80_columns_forloopend47
is_80_columns_loopend50
	; LineNumber: 466
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock56
is_80_columns_ConditionalTrueBlock55: ;Main true block ;keep 
	; LineNumber: 467
	; LineNumber: 468
	lda #$1
	rts
	; LineNumber: 470
	jmp is_80_columns_elsedoneblock57
is_80_columns_elseblock56
	; LineNumber: 471
	; LineNumber: 472
	lda #$0
	rts
	; LineNumber: 473
is_80_columns_elsedoneblock57
	; LineNumber: 475
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 531
	; LineNumber: 529
szp	= $08
	; LineNumber: 527
sx	dc.b	0
	; LineNumber: 527
sy	dc.b	0
getat_block62
getat
	; LineNumber: 532
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var65 = $54
	sta getat_rightvarInteger_var65
	sty getat_rightvarInteger_var65+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var68 = $56
	sta getat_rightvarInteger_var68
	sty getat_rightvarInteger_var68+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var68
getat_wordAdd66
	sta getat_rightvarInteger_var68
	; High-bit binop
	tya
	adc getat_rightvarInteger_var68+1
	tay
	lda getat_rightvarInteger_var68
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var65
getat_wordAdd63
	sta getat_rightvarInteger_var65
	; High-bit binop
	tya
	adc getat_rightvarInteger_var65+1
	tay
	lda getat_rightvarInteger_var65
	sta szp
	sty szp+1
	; LineNumber: 533
	; LineNumber: 534
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 540
	; LineNumber: 538
zp	= $08
	; LineNumber: 536
x	dc.b	0
	; LineNumber: 536
y	dc.b	0
	; LineNumber: 536
this_str	= $16
	; LineNumber: 536
str_len	dc.b	0
textat_block69
textat
	; LineNumber: 541
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var72 = $54
	sta textat_rightvarInteger_var72
	sty textat_rightvarInteger_var72+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var75 = $56
	sta textat_rightvarInteger_var75
	sty textat_rightvarInteger_var75+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var75
textat_wordAdd73
	sta textat_rightvarInteger_var75
	; High-bit binop
	tya
	adc textat_rightvarInteger_var75+1
	tay
	lda textat_rightvarInteger_var75
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var72
textat_wordAdd70
	sta textat_rightvarInteger_var72
	; High-bit binop
	tya
	adc textat_rightvarInteger_var72+1
	tay
	lda textat_rightvarInteger_var72
	sta zp
	sty zp+1
	; LineNumber: 541
	; memcpyfast
	ldy str_len
	dey
textat_memcpy76
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy76
	; LineNumber: 543
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 562
	; LineNumber: 561
note_duration	dc.b	0
	; LineNumber: 559
note	dc.b	0
	; LineNumber: 559
note_len	dc.b	0
PlayNote_block77
PlayNote
	; LineNumber: 563
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock81
PlayNote_ConditionalTrueBlock79: ;Main true block ;keep 
	; LineNumber: 564
	; LineNumber: 565
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 567
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop92
	; LineNumber: 565
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter94
PlayNote_loopstart95
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop92
PlayNote_loopdone99: ;keep
PlayNote_forloopend93
PlayNote_loopend96
	; LineNumber: 567
PlayNote_elsedoneblock81
	; LineNumber: 568
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 571
burp
	; LineNumber: 572
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 573
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 574
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 575
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 576
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 579
ping
	; LineNumber: 580
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 581
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 582
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 583
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 584
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 585
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 586
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 587
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 595
	; LineNumber: 593
c_row	= $08
	; LineNumber: 593
p_row	= $16
	; LineNumber: 594
scroll	dc.b	0
	; LineNumber: 594
scrolls	dc.b	0
ScrollY_block102
ScrollY
	; LineNumber: 609
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop103
	; LineNumber: 596
	; LineNumber: 598
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 599
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 606
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop127
	; LineNumber: 601
	; LineNumber: 601
	; memcpyfast
	ldy #39
ScrollY_memcpy137
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy137
	; LineNumber: 603
	; Assigning single variable : p_row
	lda p_row
	clc
	adc #$28
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd138
	inc p_row+1
ScrollY_WordAdd138
	; LineNumber: 604
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 605
ScrollY_forloopcounter129
ScrollY_loopstart130
	; Compare is onpage
	inc scroll
	lda #$19
	cmp scroll ;keep
	bcs ScrollY_forloop127
ScrollY_loopdone140: ;keep
ScrollY_forloopend128
ScrollY_loopend131
	; LineNumber: 606
	ldy #$28 ; optimized, look out for bugs
	lda #$20
ScrollY_fill141
	sta (c_row),y
	dey
	bpl ScrollY_fill141
	; LineNumber: 607
	jsr Crt_WaitVblStart
	; LineNumber: 608
ScrollY_forloopcounter105
ScrollY_loopstart106
	; Compare is onpage
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	bne ScrollY_forloop103
ScrollY_loopdone142: ;keep
ScrollY_forloopend104
ScrollY_loopend107
	; LineNumber: 610
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 621
	; LineNumber: 615
hks	dc.b	0
	; LineNumber: 615
_ctr	dc.b	0
	; LineNumber: 616
help_screen_pointer	= $08
	; LineNumber: 616
str_pointer	= $16
	; LineNumber: 619
thanks_string	
	dc.b	$14, $08, $01, $0e, $0b, $13, $20, $00, $0c
	dc.b	$05, $15, $01, $14, $20, $26, $20, $14, $08
	dc.b	$05, $20, $14, $12, $13, $05, $20, $03, $0f
	dc.b	$0d, $0d, $15, $0e, $09, $14, $19, $20, $20
	dc.b	$20, $10, $12, $05, $13, $13, $20, $01, $0e
	dc.b	$19, $20, $0b, $05, $19, $20, $14, $0f, $20
	dc.b	$03, $0f, $0e, $14, $09, $0e, $15, $05, $20
	dc.b	$20, $14, $08, $01, $0e, $0b, $13, $20, $00
	dc.b	$0c, $05, $15, $01, $14, $20, $26, $20, $14
	dc.b	$08, $05, $20, $14, $12, $13, $05, $20, $03
	dc.b	$0f, $0d, $0d, $15, $0e, $09, $14, $19, $20
	dc.b	$20, $20, $10, $12, $05, $13, $13, $20, $01
	dc.b	$0e, $19, $20, $0b, $05, $19, $20, $14, $0f
	dc.b	$20, $03, $0f, $0e, $14, $09, $0e, $15, $05
	dc.b	$20, $20, 0
help_screen_block143
help_screen
	; LineNumber: 624
	
; //        10		20			30		40		  50		  60		<	
; //123456789_123456789_123456789_123456789_1234567890123456789_12345678901234567890	
; // Set up pointer to array:
	; Assigning single variable : help_screen_pointer
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 625
	; Assigning single variable : hks
	lda #$0
	; Calling storevariable
	sta hks
	; LineNumber: 626
	jsr cls
	; LineNumber: 627
	jsr cursor_home
	; LineNumber: 630
	
; // Draw the frog
	; Copy full screen
	lda help_screen_pointer
	sta $4c
	lda help_screen_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
help_screen_outer144
	ldy #0
help_screen_inner145
	lda ($4c),y
	sta ($4e),y
	dey
	bne help_screen_inner145
	inc $4c+1
	inc $4e+1
	dex
	bne help_screen_outer144
	ldy #0
help_screen_final146
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne help_screen_final146
	; LineNumber: 632
	jsr Key_SetupScreenCodes
	; LineNumber: 633
	jsr Key_Read
	; LineNumber: 635
help_screen_while147
help_screen_loopstart151
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock150
help_screen_ConditionalTrueBlock148: ;Main true block ;keep 
	; LineNumber: 636
	; LineNumber: 637
	jsr Key_Read
	; LineNumber: 638
	; Assigning single variable : _ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	cmp #127
	bcc help_screen_abslabel157
	eor #$ff
	adc #$00
help_screen_abslabel157
	; Calling storevariable
	sta _ctr
	; LineNumber: 639
	; Assigning single variable : x
	lda #$c
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$2
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	; INTEGER optimization: a=b+c 
	lda #<thanks_string
	clc
	adc _ctr
	sta this_str+0
	lda #>thanks_string
	adc #0
	sta this_str+1
	; Assigning single variable : str_len
	lda #$11
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 640
	jmp help_screen_while147
help_screen_elsedoneblock150
help_screen_loopend152
	; LineNumber: 641
	; Assigning single variable : READY_TO_PLAY
	lda #$0
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 642
	jsr ScrollY
	; LineNumber: 643
	rts
	; LineNumber: 646
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 659
	; LineNumber: 650
ctr	dc.b	0
	; LineNumber: 650
slide	dc.b	0
	; LineNumber: 651
DIFFICULTY	
	dc.b	$04, $09, $06, $06, $09, $03, $15, $0c, $14
	dc.b	$19, 0
	; LineNumber: 652
DIFFICULTY1	
	dc.b	$31, $20, $05, $01, $13, $19, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 653
DIFFICULTY2	
	dc.b	$32, $20, $0d, $05, $04, $09, $15, $0d, $20
	dc.b	$20, 0
	; LineNumber: 654
DIFFICULTY3	
	dc.b	$33, $20, $08, $01, $12, $04, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 655
R1	dc.b	$b1
	; LineNumber: 656
R2	dc.b	$b2
	; LineNumber: 657
R3	dc.b	$b3
title_screen_block159
title_screen
	; LineNumber: 662
	
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 663
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 664
	jsr cls
	; LineNumber: 667
	
; // Draw the frog
	; Copy full screen
	lda title_screen_frog_pointer
	sta $4c
	lda title_screen_frog_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
title_screen_outer160
	ldy #0
title_screen_inner161
	lda ($4c),y
	sta ($4e),y
	dey
	bne title_screen_inner161
	inc $4c+1
	inc $4e+1
	dex
	bne title_screen_outer160
	ldy #0
title_screen_final162
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne title_screen_final162
	; LineNumber: 668
	; memcpyfast
	ldx #12
title_screen_memcpy163
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy163
	; LineNumber: 669
	; memcpyfast
	ldx #12
title_screen_memcpy164
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy164
	; LineNumber: 670
	; memcpyfast
	ldx #12
title_screen_memcpy165
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy165
	; LineNumber: 671
	; memcpyfast
	ldx #12
title_screen_memcpy166
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy166
	; LineNumber: 674
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 675
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 676
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 677
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$4
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY
	ldx #>DIFFICULTY
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 678
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY1
	ldx #>DIFFICULTY1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 679
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY2
	ldx #>DIFFICULTY2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 680
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<DIFFICULTY3
	ldx #>DIFFICULTY3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 684
	jsr Key_SetupScreenCodes
	; LineNumber: 685
	jsr Key_Read
	; LineNumber: 688
title_screen_while167
title_screen_loopstart171
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed260
	jmp title_screen_ConditionalTrueBlock168
title_screen_localfailed260
	jmp title_screen_elsedoneblock170
title_screen_ConditionalTrueBlock168: ;Main true block ;keep 
	; LineNumber: 689
	; LineNumber: 691
	jsr Key_Read
	; LineNumber: 692
	; Assigning single variable : ctr
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc title_screen_abslabel262
	eor #$ff
	adc #$00
title_screen_abslabel262
	; Calling storevariable
	sta ctr
	; LineNumber: 693
	cmp #$1 ;keep
	bne title_screen_casenext264
	; LineNumber: 693
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext264
	lda ctr
	cmp #$2 ;keep
	bne title_screen_casenext266
	; LineNumber: 694
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext266
	lda ctr
	cmp #$3 ;keep
	bne title_screen_casenext268
	; LineNumber: 695
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext268
	lda ctr
	cmp #$4 ;keep
	bne title_screen_casenext270
	; LineNumber: 696
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext270
	lda ctr
	cmp #$5 ;keep
	bne title_screen_casenext272
	; LineNumber: 697
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext272
	lda ctr
	cmp #$6 ;keep
	bne title_screen_casenext274
	; LineNumber: 698
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext274
	lda ctr
	cmp #$7 ;keep
	bne title_screen_casenext276
	; LineNumber: 699
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext276
	lda ctr
	cmp #$8 ;keep
	bne title_screen_casenext278
	; LineNumber: 700
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext278
	lda ctr
	cmp #$0 ;keep
	bne title_screen_casenext280
	; LineNumber: 701
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend263
title_screen_casenext280
title_screen_caseend263
	; LineNumber: 709
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock285
title_screen_ConditionalTrueBlock283: ;Main true block ;keep 
	; LineNumber: 709
	; LineNumber: 711
	
; // hard 	GAME_SPEED:=4;
; // medium GAME_SPEED:=5;	
; // easy GAME_SPEED:=8;
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 712
title_screen_elsedoneblock285
	; LineNumber: 714
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$07
	ldy #$40
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock291
title_screen_ConditionalTrueBlock289: ;Main true block ;keep 
	; LineNumber: 714
	; LineNumber: 716
	; Assigning single variable : GAME_SPEED
	lda #$5
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 717
title_screen_elsedoneblock291
	; LineNumber: 719
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$06
	ldy #$80
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock297
title_screen_ConditionalTrueBlock295: ;Main true block ;keep 
	; LineNumber: 719
	; LineNumber: 721
	; Assigning single variable : GAME_SPEED
	lda #$4
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 722
title_screen_elsedoneblock297
	; LineNumber: 724
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$8;keep
	bne title_screen_elseblock302
title_screen_ConditionalTrueBlock301: ;Main true block ;keep 
	; LineNumber: 725
	; LineNumber: 726
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R1
	ldx #>R1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 728
	jmp title_screen_elsedoneblock303
title_screen_elseblock302
	; LineNumber: 729
	; LineNumber: 730
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$5
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr310
	sta this_str
	lda #>title_screen_stringassignstr310
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 731
title_screen_elsedoneblock303
	; LineNumber: 733
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bne title_screen_elseblock314
title_screen_ConditionalTrueBlock313: ;Main true block ;keep 
	; LineNumber: 734
	; LineNumber: 735
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R2
	ldx #>R2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 737
	jmp title_screen_elsedoneblock315
title_screen_elseblock314
	; LineNumber: 738
	; LineNumber: 739
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$6
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr322
	sta this_str
	lda #>title_screen_stringassignstr322
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 740
title_screen_elsedoneblock315
	; LineNumber: 742
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne title_screen_elseblock326
title_screen_ConditionalTrueBlock325: ;Main true block ;keep 
	; LineNumber: 743
	; LineNumber: 744
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<R3
	ldx #>R3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 746
	jmp title_screen_elsedoneblock327
title_screen_elseblock326
	; LineNumber: 747
	; LineNumber: 748
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$7
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<title_screen_stringassignstr334
	sta this_str
	lda #>title_screen_stringassignstr334
	sta this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 749
title_screen_elsedoneblock327
	; LineNumber: 752
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock339
title_screen_ConditionalTrueBlock337: ;Main true block ;keep 
	; LineNumber: 752
	; LineNumber: 754
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 755
	jsr ScrollY
	; LineNumber: 756
title_screen_elsedoneblock339
	; LineNumber: 758
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$05
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elsedoneblock345
title_screen_ConditionalTrueBlock343: ;Main true block ;keep 
	; LineNumber: 758
	; LineNumber: 760
	; Assigning single variable : READY_TO_PLAY
	lda #$2
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 761
	jsr ScrollY
	; LineNumber: 762
title_screen_elsedoneblock345
	; LineNumber: 764
	jmp title_screen_while167
title_screen_elsedoneblock170
title_screen_loopend172
	; LineNumber: 767
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 772
score_screen
	; LineNumber: 773
	jsr cls
	; LineNumber: 775
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock351
score_screen_ConditionalTrueBlock350: ;Main true block ;keep 
	; LineNumber: 775
	; LineNumber: 777
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 779
	jmp score_screen_elsedoneblock352
score_screen_elseblock351
	; LineNumber: 779
	; LineNumber: 781
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 782
score_screen_elsedoneblock352
	; LineNumber: 783
	; Copy full screen
	lda petscii_pointer
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
score_screen_outer357
	ldy #0
score_screen_inner358
	lda ($4c),y
	sta ($4e),y
	dey
	bne score_screen_inner358
	inc $4c+1
	inc $4e+1
	dex
	bne score_screen_outer357
	ldy #0
score_screen_final359
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne score_screen_final359
	; LineNumber: 784
	; memcpyfast
	ldx #12
score_screen_memcpy360
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy360
	; LineNumber: 785
	; memcpyfast
	ldx #12
score_screen_memcpy361
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy361
	; LineNumber: 786
	; memcpyfast
	ldx #12
score_screen_memcpy362
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy362
	; LineNumber: 787
	; memcpyfast
	ldx #12
score_screen_memcpy363
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy363
	; LineNumber: 790
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 791
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 793
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 794
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 796
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 796
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal368
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal368
	; LineNumber: 799
	jsr Key_Read
	; LineNumber: 802
score_screen_while369
score_screen_loopstart373
	; Binary clause Simplified: EQUALS
	lda Key_keyState
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_elsedoneblock372
score_screen_ConditionalTrueBlock370: ;Main true block ;keep 
	; LineNumber: 803
	; LineNumber: 804
	jsr Key_Read
	; LineNumber: 807
	; Binary clause Simplified: GREATEREQUAL
	; abs(x) byte
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	lsr
	cmp #127
	bcc score_screen_abslabel392
	eor #$ff
	adc #$00
score_screen_abslabel392
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc score_screen_elseblock388
score_screen_ConditionalTrueBlock387: ;Main true block ;keep 
	; LineNumber: 808
	; LineNumber: 809
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 811
	jmp score_screen_elsedoneblock389
score_screen_elseblock388
	; LineNumber: 811
	; LineNumber: 813
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 814
score_screen_elsedoneblock389
	; LineNumber: 815
	jmp score_screen_while369
score_screen_elsedoneblock372
score_screen_loopend374
	; LineNumber: 816
	jsr ScrollY
	; LineNumber: 817
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 823
	; LineNumber: 821
spr_p	= $08
	; LineNumber: 819
spr_x	dc.b	0
	; LineNumber: 819
spr_y	dc.b	0
	; LineNumber: 819
source_str	= $16
	; LineNumber: 819
spr_len	dc.b	0
sprite_xy_block395
sprite_xy
	; LineNumber: 824
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var398 = $54
	sta sprite_xy_rightvarInteger_var398
	sty sprite_xy_rightvarInteger_var398+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var401 = $56
	sta sprite_xy_rightvarInteger_var401
	sty sprite_xy_rightvarInteger_var401+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var401
sprite_xy_wordAdd399
	sta sprite_xy_rightvarInteger_var401
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var401+1
	tay
	lda sprite_xy_rightvarInteger_var401
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var398
sprite_xy_wordAdd396
	sta sprite_xy_rightvarInteger_var398
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var398+1
	tay
	lda sprite_xy_rightvarInteger_var398
	sta spr_p
	sty spr_p+1
	; LineNumber: 824
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy402
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy402
	; LineNumber: 826
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var405 = $54
	sta sprite_xy_rightvarInteger_var405
	sty sprite_xy_rightvarInteger_var405+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var408 = $56
	sta sprite_xy_rightvarInteger_var408
	sty sprite_xy_rightvarInteger_var408+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var411 = $58
	sta sprite_xy_rightvarInteger_var411
	sty sprite_xy_rightvarInteger_var411+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var411
sprite_xy_wordAdd409
	sta sprite_xy_rightvarInteger_var411
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var411+1
	tay
	lda sprite_xy_rightvarInteger_var411
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var408
sprite_xy_wordAdd406
	sta sprite_xy_rightvarInteger_var408
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var408+1
	tay
	lda sprite_xy_rightvarInteger_var408
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var405
sprite_xy_wordAdd403
	sta sprite_xy_rightvarInteger_var405
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var405+1
	tay
	lda sprite_xy_rightvarInteger_var405
	sta spr_p
	sty spr_p+1
	; LineNumber: 826
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy412
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy412
	; LineNumber: 828
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 836
	; LineNumber: 832
this_row	= $08
	; LineNumber: 832
target_strip	= $16
	; LineNumber: 833
iteration	dc.b	0
	; LineNumber: 834
homeplate	dc.b	$d3
init_vars_block413
init_vars
	; LineNumber: 837
	jsr cls
	; LineNumber: 838
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 841
	; Assigning single variable : READY_TO_PLAY
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 842
	jsr Key_SetupScreenCodes
	; LineNumber: 845
	
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 846
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 847
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
init_vars_outer414
	ldy #0
init_vars_inner415
	lda ($4c),y
	sta ($4e),y
	dey
	bne init_vars_inner415
	inc $4c+1
	inc $4e+1
	dex
	bne init_vars_outer414
	ldy #0
init_vars_final416
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne init_vars_final416
	; LineNumber: 848
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 849
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 863
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop417
	; LineNumber: 853
	; LineNumber: 855
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy429
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy429
	; LineNumber: 856
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd430
	inc target_strip+1
init_vars_WordAdd430
	; LineNumber: 857
	; memcpyfast
	ldy #39
init_vars_memcpy431
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy431
	; LineNumber: 858
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd432
	inc target_strip+1
init_vars_WordAdd432
	; LineNumber: 861
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd433
	inc this_row+1
init_vars_WordAdd433
	; LineNumber: 862
init_vars_forloopcounter419
init_vars_loopstart420
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop417
init_vars_loopdone434: ;keep
init_vars_forloopend418
init_vars_loopend421
	; LineNumber: 865
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy435
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy435
	; LineNumber: 866
	; memcpy
	ldx #0
init_vars_memcpy436
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy436
	; LineNumber: 867
	; memcpy
	ldx #0
init_vars_memcpy437
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy437
	; LineNumber: 868
	; memcpy
	ldx #0
init_vars_memcpy438
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy438
	; LineNumber: 869
	; memcpy
	ldx #0
init_vars_memcpy439
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy439
	; LineNumber: 870
	; memcpy
	ldx #0
init_vars_memcpy440
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy440
	; LineNumber: 871
	; memcpy
	ldx #0
init_vars_memcpy441
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy441
	; LineNumber: 873
	; memcpy
	ldx #0
init_vars_memcpy442
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy442
	; LineNumber: 874
	; memcpy
	ldx #0
init_vars_memcpy443
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy443
	; LineNumber: 875
	; memcpy
	ldx #0
init_vars_memcpy444
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy444
	; LineNumber: 876
	; memcpy
	ldx #0
init_vars_memcpy445
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy445
	; LineNumber: 880
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 881
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock449
init_vars_ConditionalTrueBlock447: ;Main true block ;keep 
	; LineNumber: 880
	; LineNumber: 881
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 881
init_vars_elsedoneblock449
	; LineNumber: 883
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 884
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock455
init_vars_ConditionalTrueBlock453: ;Main true block ;keep 
	; LineNumber: 883
	; LineNumber: 884
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 884
init_vars_elsedoneblock455
	; LineNumber: 886
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 887
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 889
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 890
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock461
init_vars_ConditionalTrueBlock459: ;Main true block ;keep 
	; LineNumber: 889
	; LineNumber: 890
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 890
init_vars_elsedoneblock461
	; LineNumber: 892
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 893
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc init_vars_elsedoneblock467
init_vars_ConditionalTrueBlock465: ;Main true block ;keep 
	; LineNumber: 892
	; LineNumber: 893
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 893
init_vars_elsedoneblock467
	; LineNumber: 894
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 896
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 897
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 898
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 899
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 901
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock473
init_vars_ConditionalTrueBlock471: ;Main true block ;keep 
	; LineNumber: 900
	; LineNumber: 902
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 903
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 904
init_vars_elsedoneblock473
	; LineNumber: 906
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 907
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 908
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 909
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 911
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_elsedoneblock479
init_vars_ConditionalTrueBlock477: ;Main true block ;keep 
	; LineNumber: 910
	; LineNumber: 912
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 913
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 914
init_vars_elsedoneblock479
	; LineNumber: 917
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 918
	; Assigning single variable : spr_x
	lda #$0
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 919
	; Binary clause Simplified: EQUALS
	lda GAME_SPEED
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne init_vars_localfailed487
	jmp init_vars_ConditionalTrueBlock483
init_vars_localfailed487
	jmp init_vars_elsedoneblock485
init_vars_ConditionalTrueBlock483: ;Main true block ;keep 
	; LineNumber: 918
	; LineNumber: 920
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 921
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 923
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 924
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 925
init_vars_elsedoneblock485
	; LineNumber: 927
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 928
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 929
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 930
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 932
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 933
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 935
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 936
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 937
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 939
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 940
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 943
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 944
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 945
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 946
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 947
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 948
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 949
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 953
move_obstacles
	; LineNumber: 956
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax491
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax491
	; LineNumber: 957
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 958
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 962
move_traffic
	; LineNumber: 965
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax494
	lda #$0
	sta traffic_x_rl
move_traffic_incmax494
	; LineNumber: 966
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 967
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 974
	; LineNumber: 972
char_under	dc.b	0
frog_ride_block495
frog_ride
	; LineNumber: 975
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 978
	cmp #$51 ;keep
	bne frog_ride_casenext497
	; LineNumber: 981
	; LineNumber: 982
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock502
frog_ride_ConditionalTrueBlock500: ;Main true block ;keep 
	; LineNumber: 983
	; LineNumber: 984
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 985
frog_ride_elsedoneblock502
	; LineNumber: 986
	jmp frog_ride_caseend496
frog_ride_casenext497
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext507
	; LineNumber: 989
	; LineNumber: 990
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock512
frog_ride_ConditionalTrueBlock510: ;Main true block ;keep 
	; LineNumber: 991
	; LineNumber: 992
	
; // (
	inc frog_x
	; LineNumber: 993
frog_ride_elsedoneblock512
	; LineNumber: 994
	jmp frog_ride_caseend496
frog_ride_casenext507
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext517
	; LineNumber: 997
	; LineNumber: 998
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock522
frog_ride_ConditionalTrueBlock520: ;Main true block ;keep 
	; LineNumber: 999
	; LineNumber: 1000
	
; // ) 
	dec frog_x
	; LineNumber: 1001
frog_ride_elsedoneblock522
	; LineNumber: 1002
	jmp frog_ride_caseend496
frog_ride_casenext517
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext527
	; LineNumber: 1005
	; LineNumber: 1006
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock532
frog_ride_localsuccess535: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock532
frog_ride_ConditionalTrueBlock530: ;Main true block ;keep 
	; LineNumber: 1007
	; LineNumber: 1008
	
; // Crock body 
	inc frog_x
	; LineNumber: 1009
frog_ride_elsedoneblock532
	; LineNumber: 1011
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock541
frog_ride_localsuccess544: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock541
frog_ride_ConditionalTrueBlock539: ;Main true block ;keep 
	; LineNumber: 1012
	; LineNumber: 1013
	dec frog_x
	; LineNumber: 1014
frog_ride_elsedoneblock541
	; LineNumber: 1015
	jmp frog_ride_caseend496
frog_ride_casenext527
frog_ride_caseend496
	; LineNumber: 1017
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 1024
	; LineNumber: 1021
strip_num	dc.b	0
	; LineNumber: 1021
this_strip	dc.b	0
	; LineNumber: 1022
this_source_offset	= $08
	; LineNumber: 1023
game_move	dc.b	0
show_obstacles_block547
show_obstacles
	; LineNumber: 1027
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var553 = $54
	sta show_obstacles_val_var553
	lda GAME_TICKS
	sec
show_obstacles_modulo554
	sbc show_obstacles_val_var553
	bcs show_obstacles_modulo554
	adc show_obstacles_val_var553
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock551
show_obstacles_ConditionalTrueBlock549: ;Main true block ;keep 
	; LineNumber: 1028
	; LineNumber: 1029
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 1030
show_obstacles_elsedoneblock551
	; LineNumber: 1033
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var562 = $54
	sta show_obstacles_val_var562
	lda GAME_TICKS
	sec
show_obstacles_modulo563
	sbc show_obstacles_val_var562
	bcs show_obstacles_modulo563
	adc show_obstacles_val_var562
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock558
show_obstacles_ConditionalTrueBlock557: ;Main true block ;keep 
	; LineNumber: 1034
	; LineNumber: 1036
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 1037
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 1039
	jmp show_obstacles_elsedoneblock559
show_obstacles_elseblock558
	; LineNumber: 1040
	; LineNumber: 1041
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 1042
show_obstacles_elsedoneblock559
	; LineNumber: 1065
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop566
	; LineNumber: 1046
	; LineNumber: 1047
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1048
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var594 = $54
	sta show_obstacles_rightvarInteger_var594
	sty show_obstacles_rightvarInteger_var594+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var594
show_obstacles_wordAdd592
	sta show_obstacles_rightvarInteger_var594
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var594+1
	tay
	lda show_obstacles_rightvarInteger_var594
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1050
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var597 = $54
	sta show_obstacles_rightvarInteger_var597
	sty show_obstacles_rightvarInteger_var597+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var597
show_obstacles_wordAdd595
	sta show_obstacles_rightvarInteger_var597
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var597+1
	tay
	lda show_obstacles_rightvarInteger_var597
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1052
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock600
show_obstacles_ConditionalTrueBlock599: ;Main true block ;keep 
	; LineNumber: 1053
	; LineNumber: 1054
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd607
	inc this_source_offset+1
show_obstacles_WordAdd607
	; LineNumber: 1056
	jmp show_obstacles_elsedoneblock601
show_obstacles_elseblock600
	; LineNumber: 1057
	; LineNumber: 1058
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd609
	inc this_source_offset+1
show_obstacles_WordAdd609
	; LineNumber: 1059
show_obstacles_elsedoneblock601
	; LineNumber: 1060
	; memcpyfast
	ldy #39
show_obstacles_memcpy610
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy610
	; LineNumber: 1064
show_obstacles_forloopcounter568
show_obstacles_loopstart569
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone611
show_obstacles_loopnotdone612
	jmp show_obstacles_forloop566
show_obstacles_loopdone611
show_obstacles_forloopend567
show_obstacles_loopend570
	; LineNumber: 1085
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop613
	; LineNumber: 1067
	; LineNumber: 1068
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1069
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var641 = $54
	sta show_obstacles_rightvarInteger_var641
	sty show_obstacles_rightvarInteger_var641+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var641
show_obstacles_wordAdd639
	sta show_obstacles_rightvarInteger_var641
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var641+1
	tay
	lda show_obstacles_rightvarInteger_var641
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1070
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var644 = $54
	sta show_obstacles_rightvarInteger_var644
	sty show_obstacles_rightvarInteger_var644+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var644
show_obstacles_wordAdd642
	sta show_obstacles_rightvarInteger_var644
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var644+1
	tay
	lda show_obstacles_rightvarInteger_var644
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1072
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock647
show_obstacles_ConditionalTrueBlock646: ;Main true block ;keep 
	; LineNumber: 1073
	; LineNumber: 1074
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd654
	inc this_source_offset+1
show_obstacles_WordAdd654
	; LineNumber: 1076
	jmp show_obstacles_elsedoneblock648
show_obstacles_elseblock647
	; LineNumber: 1077
	; LineNumber: 1078
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd656
	inc this_source_offset+1
show_obstacles_WordAdd656
	; LineNumber: 1079
show_obstacles_elsedoneblock648
	; LineNumber: 1080
	; memcpyfast
	ldy #39
show_obstacles_memcpy657
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy657
	; LineNumber: 1084
show_obstacles_forloopcounter615
show_obstacles_loopstart616
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone658
show_obstacles_loopnotdone659
	jmp show_obstacles_forloop613
show_obstacles_loopdone658
show_obstacles_forloopend614
show_obstacles_loopend617
	; LineNumber: 1086
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock663
show_obstacles_ConditionalTrueBlock661: ;Main true block ;keep 
	; LineNumber: 1087
	; LineNumber: 1090
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1091
show_obstacles_elsedoneblock663
	; LineNumber: 1094
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1096
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1099
kill_frog
	; LineNumber: 1100
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1101
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1102
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1103
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 1104
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1105
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1106
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1107
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1108
	jsr burp
	; LineNumber: 1109
	dec player_lives
	; LineNumber: 1110
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1115
check_collisions
	; LineNumber: 1117
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 1123
	cmp frogcharA ;keep
	bne check_collisions_casenext670
	; LineNumber: 1127
	; LineNumber: 1128
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock675
check_collisions_ConditionalTrueBlock673: ;Main true block ;keep 
	; LineNumber: 1129
	; LineNumber: 1130
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1131
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1132
check_collisions_elsedoneblock675
	; LineNumber: 1133
	jmp check_collisions_caseend669
check_collisions_casenext670
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext678
	; LineNumber: 1135
	; LineNumber: 1136
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock683
check_collisions_ConditionalTrueBlock681: ;Main true block ;keep 
	; LineNumber: 1137
	; LineNumber: 1138
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1139
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1140
check_collisions_elsedoneblock683
	; LineNumber: 1141
	jmp check_collisions_caseend669
check_collisions_casenext678
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext686
	; LineNumber: 1144
	; LineNumber: 1145
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock691
check_collisions_ConditionalTrueBlock689: ;Main true block ;keep 
	; LineNumber: 1146
	; LineNumber: 1147
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1148
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1149
check_collisions_elsedoneblock691
	; LineNumber: 1150
	jmp check_collisions_caseend669
check_collisions_casenext686
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext694
	; LineNumber: 1153
	; LineNumber: 1154
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1155
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1156
	jmp check_collisions_caseend669
check_collisions_casenext694
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext696
	; LineNumber: 1159
	; LineNumber: 1160
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1161
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1162
	jmp check_collisions_caseend669
check_collisions_casenext696
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext698
	; LineNumber: 1168
	; LineNumber: 1169
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock703
check_collisions_localsuccess705: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock703
check_collisions_ConditionalTrueBlock701: ;Main true block ;keep 
	; LineNumber: 1170
	; LineNumber: 1171
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1172
check_collisions_elsedoneblock703
	; LineNumber: 1173
	jmp check_collisions_caseend669
check_collisions_casenext698
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext707
	; LineNumber: 1178
	; LineNumber: 1179
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1180
	jmp check_collisions_caseend669
check_collisions_casenext707
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext709
	; LineNumber: 1183
	; LineNumber: 1184
	jsr kill_frog
	; LineNumber: 1185
	jmp check_collisions_caseend669
check_collisions_casenext709
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext711
	; LineNumber: 1188
	; LineNumber: 1189
	jsr kill_frog
	; LineNumber: 1191
	jmp check_collisions_caseend669
check_collisions_casenext711
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext713
	; LineNumber: 1193
	; LineNumber: 1194
	jsr kill_frog
	; LineNumber: 1196
	jmp check_collisions_caseend669
check_collisions_casenext713
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext715
	; LineNumber: 1199
	; LineNumber: 1200
	jsr kill_frog
	; LineNumber: 1202
	jmp check_collisions_caseend669
check_collisions_casenext715
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext717
	; LineNumber: 1205
	; LineNumber: 1206
	jsr kill_frog
	; LineNumber: 1208
	jmp check_collisions_caseend669
check_collisions_casenext717
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext719
	; LineNumber: 1211
	; LineNumber: 1212
	jsr kill_frog
	; LineNumber: 1214
	jmp check_collisions_caseend669
check_collisions_casenext719
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext721
	; LineNumber: 1217
	; LineNumber: 1218
	jsr kill_frog
	; LineNumber: 1220
	jmp check_collisions_caseend669
check_collisions_casenext721
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext723
	; LineNumber: 1223
	; LineNumber: 1224
	jsr kill_frog
	; LineNumber: 1226
	jmp check_collisions_caseend669
check_collisions_casenext723
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext725
	; LineNumber: 1230
	; LineNumber: 1231
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1233
	jmp check_collisions_caseend669
check_collisions_casenext725
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext727
	; LineNumber: 1236
	; LineNumber: 1237
	jsr kill_frog
	; LineNumber: 1238
	jmp check_collisions_caseend669
check_collisions_casenext727
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext729
	; LineNumber: 1243
	; LineNumber: 1244
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1245
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1246
	jmp check_collisions_caseend669
check_collisions_casenext729
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext731
	; LineNumber: 1249
	; LineNumber: 1250
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed748
	jmp check_collisions_ConditionalTrueBlock734
check_collisions_localfailed748: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock736
check_collisions_ConditionalTrueBlock734: ;Main true block ;keep 
	; LineNumber: 1251
	; LineNumber: 1252
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd750
	inc player_score+1
check_collisions_WordAdd750
	; LineNumber: 1253
	inc FROGS_SAVED
	; LineNumber: 1254
	jsr ping
	; LineNumber: 1256
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock754
check_collisions_ConditionalTrueBlock753: ;Main true block ;keep 
	; LineNumber: 1257
	; LineNumber: 1259
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1261
	jmp check_collisions_elsedoneblock755
check_collisions_elseblock754
	; LineNumber: 1262
	; LineNumber: 1263
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1264
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1265
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1266
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1267
check_collisions_elsedoneblock755
	; LineNumber: 1268
check_collisions_elsedoneblock736
	; LineNumber: 1269
	jmp check_collisions_caseend669
check_collisions_casenext731
	; LineNumber: 1273
	; LineNumber: 1276
check_collisions_caseend669
	; LineNumber: 1277
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1287
game_loop
	; LineNumber: 1289
	jsr Key_SetupScreenCodes
	; LineNumber: 1294
	
; // Unit constants
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 1295
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 1296
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 1297
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 1300
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 1301
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 1302
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 1303
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 1306
game_loop_while762
game_loop_loopstart766
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed902
game_loop_localsuccess903: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed902
	jmp game_loop_ConditionalTrueBlock763
game_loop_localfailed902
	jmp game_loop_elsedoneblock765
game_loop_ConditionalTrueBlock763: ;Main true block ;keep 
	; LineNumber: 1307
	; LineNumber: 1309
	jsr Key_Read
	; LineNumber: 1311
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1312
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1313
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed920
	jmp game_loop_ConditionalTrueBlock906
game_loop_localfailed920: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock908
game_loop_ConditionalTrueBlock906: ;Main true block ;keep 
	; LineNumber: 1314
	; LineNumber: 1315
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock925
game_loop_ConditionalTrueBlock923: ;Main true block ;keep 
	; LineNumber: 1316
	; LineNumber: 1317
	dec frog_y
	; LineNumber: 1318
	inc player_score
	bne game_loop_incdec931
	inc player_score +1
game_loop_incdec931
	; LineNumber: 1319
game_loop_elsedoneblock925
	; LineNumber: 1320
game_loop_elsedoneblock908
	; LineNumber: 1322
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed947
	jmp game_loop_ConditionalTrueBlock933
game_loop_localfailed947: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock935
game_loop_ConditionalTrueBlock933: ;Main true block ;keep 
	; LineNumber: 1323
	; LineNumber: 1324
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock952
game_loop_ConditionalTrueBlock950: ;Main true block ;keep 
	; LineNumber: 1325
	; LineNumber: 1326
	inc frog_x
	; LineNumber: 1327
	inc player_score
	bne game_loop_incdec958
	inc player_score +1
game_loop_incdec958
	; LineNumber: 1328
game_loop_elsedoneblock952
	; LineNumber: 1329
game_loop_elsedoneblock935
	; LineNumber: 1331
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed974
	jmp game_loop_ConditionalTrueBlock960
game_loop_localfailed974: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock962
game_loop_ConditionalTrueBlock960: ;Main true block ;keep 
	; LineNumber: 1332
	; LineNumber: 1333
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock979
game_loop_ConditionalTrueBlock977: ;Main true block ;keep 
	; LineNumber: 1334
	; LineNumber: 1335
	inc frog_y
	; LineNumber: 1336
	inc player_score
	bne game_loop_incdec985
	inc player_score +1
game_loop_incdec985
	; LineNumber: 1337
game_loop_elsedoneblock979
	; LineNumber: 1338
game_loop_elsedoneblock962
	; LineNumber: 1339
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed1001
	jmp game_loop_ConditionalTrueBlock987
game_loop_localfailed1001: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock989
game_loop_ConditionalTrueBlock987: ;Main true block ;keep 
	; LineNumber: 1340
	; LineNumber: 1341
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock1006
game_loop_ConditionalTrueBlock1004: ;Main true block ;keep 
	; LineNumber: 1342
	; LineNumber: 1343
	dec frog_x
	; LineNumber: 1344
	inc player_score
	bne game_loop_incdec1012
	inc player_score +1
game_loop_incdec1012
	; LineNumber: 1345
game_loop_elsedoneblock1006
	; LineNumber: 1346
game_loop_elsedoneblock989
	; LineNumber: 1349
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax1014
	lda #$1
	sta GAME_TICKS
game_loop_incmax1014
	; LineNumber: 1352
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1355
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1358
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock1018
game_loop_ConditionalTrueBlock1016: ;Main true block ;keep 
	; LineNumber: 1359
	; LineNumber: 1361
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1363
game_loop_elsedoneblock1018
	; LineNumber: 1368
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed1026
	jmp game_loop_ConditionalTrueBlock1022
game_loop_localfailed1026: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock1024
game_loop_ConditionalTrueBlock1022: ;Main true block ;keep 
	; LineNumber: 1369
	; LineNumber: 1370
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1371
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1372
game_loop_elsedoneblock1024
	; LineNumber: 1375
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock1030
game_loop_ConditionalTrueBlock1029: ;Main true block ;keep 
	; LineNumber: 1376
	; LineNumber: 1377
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1379
	jmp game_loop_elsedoneblock1031
game_loop_elseblock1030
	; LineNumber: 1380
	; LineNumber: 1381
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1382
game_loop_elsedoneblock1031
	; LineNumber: 1387
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1387
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal1036
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1036
	; LineNumber: 1389
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1389
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal1037
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal1037
	; LineNumber: 1393
	jmp game_loop_while762
game_loop_elsedoneblock765
game_loop_loopend767
	; LineNumber: 1395
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : intro_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1398
intro_loop
	; LineNumber: 1400
intro_loop_while1039
intro_loop_loopstart1043
	; Binary clause Simplified: NOTEQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$1;keep
	beq intro_loop_elsedoneblock1042
intro_loop_ConditionalTrueBlock1040: ;Main true block ;keep 
	; LineNumber: 1401
	; LineNumber: 1402
	jsr title_screen
	; LineNumber: 1403
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$2;keep
	bne intro_loop_elsedoneblock1056
intro_loop_ConditionalTrueBlock1054: ;Main true block ;keep 
	; LineNumber: 1402
	; LineNumber: 1403
	jsr help_screen
	; LineNumber: 1403
intro_loop_elsedoneblock1056
	; LineNumber: 1404
	jmp intro_loop_while1039
intro_loop_elsedoneblock1042
intro_loop_loopend1044
	; LineNumber: 1405
	rts
block1
	; LineNumber: 1410
	; Assigning single variable : is_80
	lda #$0
	; Calling storevariable
	sta is_80
	; LineNumber: 1411
	; Assigning single variable : is_80
	jsr is_80_columns
	; Calling storevariable
	sta is_80
	; LineNumber: 1414
	; Binary clause Simplified: EQUALS
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock1062
MainProgram_ConditionalTrueBlock1060: ;Main true block ;keep 
	; LineNumber: 1415
	; LineNumber: 1416
	jsr cursor_down
	; LineNumber: 1417
	jsr cursor_return
	; LineNumber: 1418
	jsr uppercase
	; LineNumber: 1419
	jsr cursor_graphic
	; LineNumber: 1420
	; Assigning single variable : _ptr
	lda #<sorry_80
	ldx #>sorry_80
	sta _ptr
	stx _ptr+1
	jsr basic_print
	; LineNumber: 1421
	jmp * ; loop like (�/%
	; LineNumber: 1422
MainProgram_elsedoneblock1062
	; LineNumber: 1423
	; LineNumber: 1425
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1426
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1429
	jsr cls
	; LineNumber: 1431
MainProgram_while1065
MainProgram_loopstart1069
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock1068
MainProgram_ConditionalTrueBlock1066: ;Main true block ;keep 
	; LineNumber: 1432
	; LineNumber: 1434
	jsr intro_loop
	; LineNumber: 1435
	jsr init_vars
	; LineNumber: 1436
	jsr game_loop
	; LineNumber: 1437
	jsr score_screen
	; LineNumber: 1438
	jmp MainProgram_while1065
MainProgram_elsedoneblock1068
MainProgram_loopend1070
	; LineNumber: 1442
	; End of program
	; Ending memory block
EndBlock410
title_screen_stringassignstr310	.dc "1",0
title_screen_stringassignstr322	.dc "2",0
title_screen_stringassignstr334	.dc "3",0
