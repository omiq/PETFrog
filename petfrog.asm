 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1192
	jmp block1
	; LineNumber: 3
Key_temp	dc.b	0
	; LineNumber: 5
Key_keyState	dc.b	0
	; LineNumber: 7
Key_KeyRow = $e810
	; LineNumber: 8
Key_KeyRead = $e812
	; LineNumber: 9
Key_KeyInterrupt = $e813
	; LineNumber: 12
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 13
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 14
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 144
Key_screencodes	
	dc.b	$21, $23, $25, $26, 40, 69, 72, 74, 34
	dc.b	$24, $27, , 41, 255, 73, 75, $11, $05
	dc.b	$14, $15, $0f, 70, $37, $39, $17, $12, $19
	dc.b	$09, $10, 255, $38, $2f, $01, $04, $07, $0a
	dc.b	$0c, 255, $34, $36, $13, $06, $08, $0b, $3a
	dc.b	255, $35, $2a, $1a, $03, $02, $0d, $3b, 71
	dc.b	$31, $33, $18, $16, $0e, 44, $3f, 255, $32
	dc.b	$2b, 255, $00, $1d, 255, $3e, 255, $30, $2d
	dc.b	67, $1b, $20, $3c, 68, 255, $2e, $3d, 0
	; LineNumber: 30
KEYPRESS	dc.w	$ff
	; LineNumber: 33
n_key_up	dc.w	0
	; LineNumber: 33
n_key_down	dc.w	0
	; LineNumber: 33
n_key_left	dc.w	0
	; LineNumber: 33
n_key_right	dc.w	0
	; LineNumber: 33
key_up	dc.w	0
	; LineNumber: 33
key_down	dc.w	0
	; LineNumber: 33
key_left	dc.w	0
	; LineNumber: 33
key_right	dc.w	0
	; LineNumber: 40
PLAY_SOUND	dc.b	$01
	; LineNumber: 41
GAME_SPEED	dc.b	$00
	; LineNumber: 42
ALIVE	dc.b	$01
	; LineNumber: 43
WON_GAME	dc.b	$00
	; LineNumber: 44
FROGS_SAVED	dc.b	$00
	; LineNumber: 45
GAME_TICKS	dc.b	$00
	; LineNumber: 49
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 50
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 51
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 52
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 53
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 54
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 55
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 56
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 57
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 72
frogcharA	dc.b	$d6
	; LineNumber: 73
frogcharB	dc.b	$56
	; LineNumber: 74
frog_x	dc.b	$14
	; LineNumber: 74
frog_old_x	dc.b	$14
	; LineNumber: 75
frog_y	dc.b	$18
	; LineNumber: 75
frog_old_y	dc.b	$18
	; LineNumber: 76
previous_tile	dc.b	$20
	; LineNumber: 77
next_tile	dc.b	0
	; LineNumber: 78
player_lives	dc.b	$00
	; LineNumber: 79
player_score	dc.w	$00
	; LineNumber: 81
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 82
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 84
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 85
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 88
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 89
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 91
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 92
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 94
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 95
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 97
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 98
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 100
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 101
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 105
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 106
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 107
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 108
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 116
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 117
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 118
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 119
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 124
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 125
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 127
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 130
traffic_x_rl	dc.b	0
	; LineNumber: 130
traffic_x_lr	dc.b	0
	; LineNumber: 131
obstacles_x_rl	dc.b	0
	; LineNumber: 131
obstacles_x_lr	dc.b	0
	; LineNumber: 135
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 143
title_screen_frog_pointer	= $02
	; LineNumber: 144
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 172
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 200
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 229
petscii_pointer	= $04
	; LineNumber: 263
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key__GetKeyOffset
	;    Procedure type : User-defined procedure
	; LineNumber: 175
	; LineNumber: 174
	; LineNumber: 174
Key__GetKeyOffset_block4
Key__GetKeyOffset
	; LineNumber: 178
	; ****** Inline assembler section
	
	; pass with _a containing key to check 1, 2, 4, 8, 16, 32, 64, 128
	; and y the row offset 0 - 9
	tax ; temp store key
	
	tya ; multiply row offset by 8 to find starting pos in array
	asl
	asl
	asl ; *8
	sta TEMP_VAR1
	
	; use temporary variable as a pointer
	lda #>Key_screencodes
	sta TEMP_VAR2+1 ; high byte
	lda #<Key_screencodes
	sta TEMP_VAR2 ; low byte
	
	clc
	adc TEMP_VAR1
	sta TEMP_VAR2
	bcc getKey_NoOverflow
	inc TEMP_VAR2+1 ; byte overflow, update high byte
	
getKey_NoOverflow
	; then work out the offest 0 - 7
	txa ; the key
	
	ldy #0  ; count the number of shifts
	ldx #8	; test all 8 bits
getKey_testLoop
	lsr ; bit put in carry
	bcs getKey_foundBit
	iny	; counter for next bit to test
	dex	; 
	bne getKey_testLoop
	
getKey_foundBit
	; x has the bit 0-7 or 8 if not found
	cpy #8
	beq getKey_NotFound
	
	lda (TEMP_VAR2),y  ; load screencode + bit offset
	rts 
	
getKey_NotFound
	lda #KEY_NOKEY ; not found
	
	; LineNumber: 230
	rts
	;*
; //Read the full 10 row keyboard matrix 
; //and populate the keyboard flags
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 261
Key_Read
	; LineNumber: 263
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 292
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop6
	; LineNumber: 266
	; LineNumber: 268
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 270
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 291
Key_Read_forloopcounter8
Key_Read_loopstart9
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop6
Key_Read_loopdone13: ;keep
Key_Read_forloopend7
Key_Read_loopend10
	; LineNumber: 293
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 309
	; LineNumber: 308
Key_Pressed_block14
Key_Pressed
	; LineNumber: 311
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 319
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_SetupScreenCodes
	;    Procedure type : User-defined procedure
	; LineNumber: 342
Key_SetupScreenCodes
	; LineNumber: 344
	; Assigning memory location
	; Assigning single variable : $5e
	; Load Unknown type array
	ldx #$0
	lda Key_screencodes,x
	; Calling storevariable
	sta $5e
	; LineNumber: 346
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 306
cls
	; LineNumber: 307
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop18
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop18
	; LineNumber: 308
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 309
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : _ti
	;    Procedure type : User-defined procedure
	; LineNumber: 314
	; LineNumber: 313
ti_temp	dc.w	0
_ti_block19
_ti
	; LineNumber: 315
	; Assigning single variable : ti_temp
	ldy #0
	lda #$0
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 316
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var22 = $54
	sta _ti_rightvarInteger_var22
	sty _ti_rightvarInteger_var22+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8D + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	sta mul16x8_num1
	sty mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var22
_ti_wordAdd20
	sta _ti_rightvarInteger_var22
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var22+1
	tay
	lda _ti_rightvarInteger_var22
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 317
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var25 = $54
	sta _ti_rightvarInteger_var25
	sty _ti_rightvarInteger_var25+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8E + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var25
_ti_wordAdd23
	sta _ti_rightvarInteger_var25
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var25+1
	tay
	lda _ti_rightvarInteger_var25
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 318
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var28 = $54
	sta _ti_rightvarInteger_var28
	sty _ti_rightvarInteger_var28+1
	; Peek
	lda $8F + $0
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var28
_ti_wordAdd26
	sta _ti_rightvarInteger_var28
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var28+1
	tay
	lda _ti_rightvarInteger_var28
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 320
	; LineNumber: 321
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sleep_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 327
	; LineNumber: 325
_old_ti	dc.w	0
	; LineNumber: 325
_new_ti	dc.w	0
sleep_delay_block29
sleep_delay
	; LineNumber: 329
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	lda ti_temp
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 330
	; Assigning single variable : _old_ti
	; integer assignment NodeVar
	ldy _new_ti+1 ; Next one
	; Calling storevariable
	sta _old_ti
	sty _old_ti+1
	; LineNumber: 332
sleep_delay_while30
sleep_delay_loopstart34
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda _new_ti+1   ; compare high bytes
	cmp _old_ti+1 ;keep
	bne sleep_delay_elsedoneblock33
	lda _new_ti
	cmp _old_ti ;keep
	bne sleep_delay_elsedoneblock33
	jmp sleep_delay_ConditionalTrueBlock31
sleep_delay_ConditionalTrueBlock31: ;Main true block ;keep 
	; LineNumber: 333
	; LineNumber: 334
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 335
	jmp sleep_delay_while30
sleep_delay_elsedoneblock33
sleep_delay_loopend35
	; LineNumber: 337
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frame_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 342
	; LineNumber: 341
sleepx	dc.b	0
frame_delay_block38
frame_delay
	; LineNumber: 347
	; Assigning single variable : sleepx
	lda #$1
	; Calling storevariable
	sta sleepx
frame_delay_forloop39
	; LineNumber: 344
	; LineNumber: 345
	jsr sleep_delay
	; LineNumber: 346
frame_delay_forloopcounter41
frame_delay_loopstart42
	; Compare is onpage
	inc sleepx
	lda #$2
	cmp sleepx ;keep
	bcs frame_delay_forloop39
frame_delay_loopdone46: ;keep
frame_delay_forloopend40
frame_delay_loopend43
	; LineNumber: 348
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 377
	; LineNumber: 375
szp	= $08
	; LineNumber: 373
sx	dc.b	0
	; LineNumber: 373
sy	dc.b	0
getat_block47
getat
	; LineNumber: 378
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var50 = $54
	sta getat_rightvarInteger_var50
	sty getat_rightvarInteger_var50+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var53 = $56
	sta getat_rightvarInteger_var53
	sty getat_rightvarInteger_var53+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var53
getat_wordAdd51
	sta getat_rightvarInteger_var53
	; High-bit binop
	tya
	adc getat_rightvarInteger_var53+1
	tay
	lda getat_rightvarInteger_var53
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var50
getat_wordAdd48
	sta getat_rightvarInteger_var50
	; High-bit binop
	tya
	adc getat_rightvarInteger_var50+1
	tay
	lda getat_rightvarInteger_var50
	sta szp
	sty szp+1
	; LineNumber: 379
	; LineNumber: 380
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 386
	; LineNumber: 384
zp	= $08
	; LineNumber: 382
x	dc.b	0
	; LineNumber: 382
y	dc.b	0
	; LineNumber: 382
this_str	= $16
	; LineNumber: 382
str_len	dc.b	0
textat_block54
textat
	; LineNumber: 387
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var57 = $54
	sta textat_rightvarInteger_var57
	sty textat_rightvarInteger_var57+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var60 = $56
	sta textat_rightvarInteger_var60
	sty textat_rightvarInteger_var60+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var60
textat_wordAdd58
	sta textat_rightvarInteger_var60
	; High-bit binop
	tya
	adc textat_rightvarInteger_var60+1
	tay
	lda textat_rightvarInteger_var60
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var57
textat_wordAdd55
	sta textat_rightvarInteger_var57
	; High-bit binop
	tya
	adc textat_rightvarInteger_var57+1
	tay
	lda textat_rightvarInteger_var57
	sta zp
	sty zp+1
	; LineNumber: 387
	; memcpyfast
	ldy str_len
	dey
textat_memcpy61
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy61
	; LineNumber: 389
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 408
	; LineNumber: 407
note_duration	dc.b	0
	; LineNumber: 405
note	dc.b	0
	; LineNumber: 405
note_len	dc.b	0
PlayNote_block62
PlayNote
	; LineNumber: 409
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock66
PlayNote_ConditionalTrueBlock64: ;Main true block ;keep 
	; LineNumber: 410
	; LineNumber: 411
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 413
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop77
	; LineNumber: 411
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter79
PlayNote_loopstart80
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop77
PlayNote_loopdone84: ;keep
PlayNote_forloopend78
PlayNote_loopend81
	; LineNumber: 413
PlayNote_elsedoneblock66
	; LineNumber: 414
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 417
burp
	; LineNumber: 418
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 419
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 420
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 421
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 422
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 425
ping
	; LineNumber: 426
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 427
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 428
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 429
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 430
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 431
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 432
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 433
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 441
	; LineNumber: 439
c_row	= $08
	; LineNumber: 439
p_row	= $16
	; LineNumber: 440
scroll	dc.b	0
	; LineNumber: 440
scrolls	dc.b	0
ScrollY_block87
ScrollY
	; LineNumber: 455
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop88
	; LineNumber: 442
	; LineNumber: 444
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 445
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 452
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop112
	; LineNumber: 447
	; LineNumber: 447
	; memcpyfast
	ldy #39
ScrollY_memcpy122
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy122
	; LineNumber: 449
	; Assigning single variable : p_row
	lda p_row
	clc
	adc #$28
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd123
	inc p_row+1
ScrollY_WordAdd123
	; LineNumber: 450
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 451
ScrollY_forloopcounter114
ScrollY_loopstart115
	; Compare is onpage
	inc scroll
	lda #$19
	cmp scroll ;keep
	bcs ScrollY_forloop112
ScrollY_loopdone125: ;keep
ScrollY_forloopend113
ScrollY_loopend116
	; LineNumber: 452
	ldy #$28 ; optimized, look out for bugs
	lda #$20
ScrollY_fill126
	sta (c_row),y
	dey
	bpl ScrollY_fill126
	; LineNumber: 453
	jsr Crt_WaitVblStart
	; LineNumber: 454
ScrollY_forloopcounter90
ScrollY_loopstart91
	; Compare is onpage
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	bne ScrollY_forloop88
ScrollY_loopdone127: ;keep
ScrollY_forloopend89
ScrollY_loopend92
	; LineNumber: 456
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 471
	; LineNumber: 461
ks	dc.b	0
	; LineNumber: 461
ctr	dc.b	0
	; LineNumber: 461
slide	dc.b	0
	; LineNumber: 463
inst0	
	dc.b	98, 98, 98, 98, 98, 98, 32, 0
	; LineNumber: 464
inst1	
	dc.b	220, 139, 133, 153, 147, 186, 98, 98, 98
	dc.b	32, 0
	; LineNumber: 465
inst2	
	dc.b	220, 160, 160, 160, 160, 151, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 466
inst3	
	dc.b	220, 160, 160, 160, 129, 147, 132, 221, 160
	dc.b	32, 0
	; LineNumber: 467
inst4	
	dc.b	220, 160, 160, 160, 192, 192, 192, 253, 160
	dc.b	32, 0
	; LineNumber: 468
inst5	
	dc.b	220, 160, 160, 160, 160, 184, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 469
inst6	
	dc.b	220, 160, 160, 160, 180, 181, 182, 221, 160
	dc.b	32, 0
	; LineNumber: 470
inst7	
	dc.b	32, 32, 32, 124, 226, 226, 226, 226, 32
	dc.b	32, 0
title_screen_block128
title_screen
	; LineNumber: 474
	
; //12345678901234567890
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 475
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 476
	jsr cls
	; LineNumber: 479
	
; // Draw the frog
	; Copy full screen
	lda title_screen_frog_pointer
	sta $4c
	lda title_screen_frog_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
title_screen_outer129
	ldy #0
title_screen_inner130
	lda ($4c),y
	sta ($4e),y
	dey
	bne title_screen_inner130
	inc $4c+1
	inc $4e+1
	dex
	bne title_screen_outer129
	ldy #0
title_screen_final131
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne title_screen_final131
	; LineNumber: 480
	; memcpyfast
	ldx #12
title_screen_memcpy132
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy132
	; LineNumber: 481
	; memcpyfast
	ldx #12
title_screen_memcpy133
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy133
	; LineNumber: 482
	; memcpyfast
	ldx #12
title_screen_memcpy134
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy134
	; LineNumber: 483
	; memcpyfast
	ldx #12
title_screen_memcpy135
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy135
	; LineNumber: 486
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$d
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst0
	ldx #>inst0
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$7
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 487
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$e
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst1
	ldx #>inst1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 488
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$f
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst2
	ldx #>inst2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 489
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$10
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst3
	ldx #>inst3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 490
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$11
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst4
	ldx #>inst4
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 491
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$12
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst5
	ldx #>inst5
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 492
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$13
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst6
	ldx #>inst6
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 493
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$14
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst7
	ldx #>inst7
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 495
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 496
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 497
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 500
	jsr Key_SetupScreenCodes
	; LineNumber: 501
	jsr Key_Read
	; LineNumber: 502
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 503
title_screen_while136
title_screen_loopstart140
	; Binary clause Simplified: EQUALS
	lda ks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed227
	jmp title_screen_ConditionalTrueBlock137
title_screen_localfailed227
	jmp title_screen_elsedoneblock139
title_screen_ConditionalTrueBlock137: ;Main true block ;keep 
	; LineNumber: 504
	; LineNumber: 506
	jsr Key_Read
	; LineNumber: 522
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop229
	; LineNumber: 508
	; LineNumber: 509
	inc ctr
	lda ctr
	cmp #$64 ; keep
	bne title_screen_incmax247
	lda #$1
	sta ctr
title_screen_incmax247
	; LineNumber: 510
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 512
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock250
title_screen_ConditionalTrueBlock249: ;Main true block ;keep 
	; LineNumber: 513
	; LineNumber: 514
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 516
	jmp title_screen_elsedoneblock251
title_screen_elseblock250
	; LineNumber: 516
	; LineNumber: 518
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 519
title_screen_elsedoneblock251
	; LineNumber: 520
	jsr sleep_delay
	; LineNumber: 521
title_screen_forloopcounter231
title_screen_loopstart232
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop229
title_screen_loopdone256: ;keep
title_screen_forloopend230
title_screen_loopend233
	; LineNumber: 522
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 523
	jsr sleep_delay
	; LineNumber: 524
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 525
	jsr sleep_delay
	; LineNumber: 526
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 527
	jsr sleep_delay
	; LineNumber: 544
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop257
	; LineNumber: 530
	; LineNumber: 531
	inc ctr
	lda ctr
	cmp #$64 ; keep
	bne title_screen_incmax275
	lda #$1
	sta ctr
title_screen_incmax275
	; LineNumber: 532
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 534
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock278
title_screen_ConditionalTrueBlock277: ;Main true block ;keep 
	; LineNumber: 535
	; LineNumber: 536
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 538
	jmp title_screen_elsedoneblock279
title_screen_elseblock278
	; LineNumber: 538
	; LineNumber: 540
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 541
title_screen_elsedoneblock279
	; LineNumber: 542
	jsr sleep_delay
	; LineNumber: 543
title_screen_forloopcounter259
title_screen_loopstart260
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop257
title_screen_loopdone284: ;keep
title_screen_forloopend258
title_screen_loopend261
	; LineNumber: 544
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 545
	jsr sleep_delay
	; LineNumber: 546
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 547
	jsr sleep_delay
	; LineNumber: 548
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 549
	jsr sleep_delay
	; LineNumber: 566
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop285
	; LineNumber: 552
	; LineNumber: 553
	inc ctr
	lda ctr
	cmp #$c8 ; keep
	bne title_screen_incmax303
	lda #$1
	sta ctr
title_screen_incmax303
	; LineNumber: 554
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 556
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock306
title_screen_ConditionalTrueBlock305: ;Main true block ;keep 
	; LineNumber: 557
	; LineNumber: 558
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 560
	jmp title_screen_elsedoneblock307
title_screen_elseblock306
	; LineNumber: 560
	; LineNumber: 562
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 563
title_screen_elsedoneblock307
	; LineNumber: 564
	jsr sleep_delay
	; LineNumber: 565
title_screen_forloopcounter287
title_screen_loopstart288
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop285
title_screen_loopdone312: ;keep
title_screen_forloopend286
title_screen_loopend289
	; LineNumber: 566
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 567
	jsr sleep_delay
	; LineNumber: 568
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 569
	jsr sleep_delay
	; LineNumber: 570
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 571
	jsr sleep_delay
	; LineNumber: 573
	jmp title_screen_while136
title_screen_elsedoneblock139
title_screen_loopend141
	; LineNumber: 575
	jsr ScrollY
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 580
score_screen
	; LineNumber: 581
	jsr cls
	; LineNumber: 583
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock316
score_screen_ConditionalTrueBlock315: ;Main true block ;keep 
	; LineNumber: 583
	; LineNumber: 585
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 587
	jmp score_screen_elsedoneblock317
score_screen_elseblock316
	; LineNumber: 587
	; LineNumber: 589
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 590
score_screen_elsedoneblock317
	; LineNumber: 591
	; Copy full screen
	lda petscii_pointer
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
score_screen_outer322
	ldy #0
score_screen_inner323
	lda ($4c),y
	sta ($4e),y
	dey
	bne score_screen_inner323
	inc $4c+1
	inc $4e+1
	dex
	bne score_screen_outer322
	ldy #0
score_screen_final324
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne score_screen_final324
	; LineNumber: 592
	; memcpyfast
	ldx #12
score_screen_memcpy325
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy325
	; LineNumber: 593
	; memcpyfast
	ldx #12
score_screen_memcpy326
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy326
	; LineNumber: 594
	; memcpyfast
	ldx #12
score_screen_memcpy327
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy327
	; LineNumber: 595
	; memcpyfast
	ldx #12
score_screen_memcpy328
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy328
	; LineNumber: 598
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 599
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 601
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 602
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 604
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 604
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal333
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal333
	; LineNumber: 607
	jsr Key_Read
	; LineNumber: 608
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 610
score_screen_while334
score_screen_loopstart338
	; Binary clause Simplified: EQUALS
	lda ks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_localfailed345
	jmp score_screen_ConditionalTrueBlock335
score_screen_localfailed345
	jmp score_screen_elsedoneblock337
score_screen_ConditionalTrueBlock335: ;Main true block ;keep 
	; LineNumber: 611
	; LineNumber: 612
	jsr Key_Read
	; LineNumber: 613
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 614
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 615
	jsr frame_delay
	; LineNumber: 616
	jsr Key_Read
	; LineNumber: 617
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 618
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 619
	jsr frame_delay
	; LineNumber: 620
	jsr Key_Read
	; LineNumber: 621
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 622
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<score_screen_stringassignstr347
	sta this_str
	lda #>score_screen_stringassignstr347
	sta this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 623
	jsr frame_delay
	; LineNumber: 624
	jsr Key_Read
	; LineNumber: 625
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 626
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<score_screen_stringassignstr349
	sta this_str
	lda #>score_screen_stringassignstr349
	sta this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 627
	jsr frame_delay
	; LineNumber: 628
	jmp score_screen_while334
score_screen_elsedoneblock337
score_screen_loopend339
	; LineNumber: 629
	jsr ScrollY
	; LineNumber: 630
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 636
	; LineNumber: 634
spr_p	= $08
	; LineNumber: 632
spr_x	dc.b	0
	; LineNumber: 632
spr_y	dc.b	0
	; LineNumber: 632
source_str	= $16
	; LineNumber: 632
spr_len	dc.b	0
sprite_xy_block351
sprite_xy
	; LineNumber: 637
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var354 = $54
	sta sprite_xy_rightvarInteger_var354
	sty sprite_xy_rightvarInteger_var354+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var357 = $56
	sta sprite_xy_rightvarInteger_var357
	sty sprite_xy_rightvarInteger_var357+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var357
sprite_xy_wordAdd355
	sta sprite_xy_rightvarInteger_var357
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var357+1
	tay
	lda sprite_xy_rightvarInteger_var357
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var354
sprite_xy_wordAdd352
	sta sprite_xy_rightvarInteger_var354
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var354+1
	tay
	lda sprite_xy_rightvarInteger_var354
	sta spr_p
	sty spr_p+1
	; LineNumber: 637
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy358
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy358
	; LineNumber: 639
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var361 = $54
	sta sprite_xy_rightvarInteger_var361
	sty sprite_xy_rightvarInteger_var361+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var364 = $56
	sta sprite_xy_rightvarInteger_var364
	sty sprite_xy_rightvarInteger_var364+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var367 = $58
	sta sprite_xy_rightvarInteger_var367
	sty sprite_xy_rightvarInteger_var367+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var367
sprite_xy_wordAdd365
	sta sprite_xy_rightvarInteger_var367
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var367+1
	tay
	lda sprite_xy_rightvarInteger_var367
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var364
sprite_xy_wordAdd362
	sta sprite_xy_rightvarInteger_var364
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var364+1
	tay
	lda sprite_xy_rightvarInteger_var364
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var361
sprite_xy_wordAdd359
	sta sprite_xy_rightvarInteger_var361
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var361+1
	tay
	lda sprite_xy_rightvarInteger_var361
	sta spr_p
	sty spr_p+1
	; LineNumber: 639
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy368
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy368
	; LineNumber: 641
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 649
	; LineNumber: 645
this_row	= $08
	; LineNumber: 645
target_strip	= $16
	; LineNumber: 646
iteration	dc.b	0
	; LineNumber: 647
homeplate	dc.b	$d3
init_vars_block369
init_vars
	; LineNumber: 650
	jsr cls
	; LineNumber: 651
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 652
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 653
	jsr Key_SetupScreenCodes
	; LineNumber: 656
	
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 657
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 658
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
init_vars_outer370
	ldy #0
init_vars_inner371
	lda ($4c),y
	sta ($4e),y
	dey
	bne init_vars_inner371
	inc $4c+1
	inc $4e+1
	dex
	bne init_vars_outer370
	ldy #0
init_vars_final372
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne init_vars_final372
	; LineNumber: 659
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 660
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 674
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop373
	; LineNumber: 664
	; LineNumber: 666
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy385
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy385
	; LineNumber: 667
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd386
	inc target_strip+1
init_vars_WordAdd386
	; LineNumber: 668
	; memcpyfast
	ldy #39
init_vars_memcpy387
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy387
	; LineNumber: 669
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd388
	inc target_strip+1
init_vars_WordAdd388
	; LineNumber: 672
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd389
	inc this_row+1
init_vars_WordAdd389
	; LineNumber: 673
init_vars_forloopcounter375
init_vars_loopstart376
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop373
init_vars_loopdone390: ;keep
init_vars_forloopend374
init_vars_loopend377
	; LineNumber: 676
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy391
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy391
	; LineNumber: 677
	; memcpy
	ldx #0
init_vars_memcpy392
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy392
	; LineNumber: 678
	; memcpy
	ldx #0
init_vars_memcpy393
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy393
	; LineNumber: 679
	; memcpy
	ldx #0
init_vars_memcpy394
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy394
	; LineNumber: 680
	; memcpy
	ldx #0
init_vars_memcpy395
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy395
	; LineNumber: 681
	; memcpy
	ldx #0
init_vars_memcpy396
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy396
	; LineNumber: 682
	; memcpy
	ldx #0
init_vars_memcpy397
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy397
	; LineNumber: 684
	; memcpy
	ldx #0
init_vars_memcpy398
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy398
	; LineNumber: 685
	; memcpy
	ldx #0
init_vars_memcpy399
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy399
	; LineNumber: 686
	; memcpy
	ldx #0
init_vars_memcpy400
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy400
	; LineNumber: 687
	; memcpy
	ldx #0
init_vars_memcpy401
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy401
	; LineNumber: 691
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 692
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 694
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 695
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 697
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 698
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 700
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 701
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 703
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 704
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 705
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 707
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 708
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 710
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 711
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 713
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 714
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 715
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 716
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 719
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 720
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 722
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 723
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 724
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 725
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 727
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 728
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 730
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 731
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 732
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 734
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 735
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 738
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 739
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 740
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 741
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 742
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 743
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 744
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 748
move_obstacles
	; LineNumber: 751
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax404
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax404
	; LineNumber: 752
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 753
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 757
move_traffic
	; LineNumber: 760
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax407
	lda #$0
	sta traffic_x_rl
move_traffic_incmax407
	; LineNumber: 761
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 762
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 769
	; LineNumber: 767
char_under	dc.b	0
frog_ride_block408
frog_ride
	; LineNumber: 770
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 773
	cmp #$51 ;keep
	bne frog_ride_casenext410
	; LineNumber: 776
	; LineNumber: 777
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock415
frog_ride_ConditionalTrueBlock413: ;Main true block ;keep 
	; LineNumber: 778
	; LineNumber: 779
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 780
frog_ride_elsedoneblock415
	; LineNumber: 781
	jmp frog_ride_caseend409
frog_ride_casenext410
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext420
	; LineNumber: 784
	; LineNumber: 785
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock425
frog_ride_ConditionalTrueBlock423: ;Main true block ;keep 
	; LineNumber: 786
	; LineNumber: 787
	
; // (
	inc frog_x
	; LineNumber: 788
frog_ride_elsedoneblock425
	; LineNumber: 789
	jmp frog_ride_caseend409
frog_ride_casenext420
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext430
	; LineNumber: 792
	; LineNumber: 793
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock435
frog_ride_ConditionalTrueBlock433: ;Main true block ;keep 
	; LineNumber: 794
	; LineNumber: 795
	
; // ) 
	dec frog_x
	; LineNumber: 796
frog_ride_elsedoneblock435
	; LineNumber: 797
	jmp frog_ride_caseend409
frog_ride_casenext430
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext440
	; LineNumber: 800
	; LineNumber: 801
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock445
frog_ride_localsuccess448: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock445
frog_ride_ConditionalTrueBlock443: ;Main true block ;keep 
	; LineNumber: 802
	; LineNumber: 803
	
; // Crock body 
	inc frog_x
	; LineNumber: 804
frog_ride_elsedoneblock445
	; LineNumber: 806
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock454
frog_ride_localsuccess457: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock454
frog_ride_ConditionalTrueBlock452: ;Main true block ;keep 
	; LineNumber: 807
	; LineNumber: 808
	dec frog_x
	; LineNumber: 809
frog_ride_elsedoneblock454
	; LineNumber: 810
	jmp frog_ride_caseend409
frog_ride_casenext440
frog_ride_caseend409
	; LineNumber: 812
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 819
	; LineNumber: 816
strip_num	dc.b	0
	; LineNumber: 816
this_strip	dc.b	0
	; LineNumber: 817
this_source_offset	= $08
	; LineNumber: 818
game_move	dc.b	0
show_obstacles_block460
show_obstacles
	; LineNumber: 822
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var466 = $54
	sta show_obstacles_val_var466
	lda GAME_TICKS
	sec
show_obstacles_modulo467
	sbc show_obstacles_val_var466
	bcs show_obstacles_modulo467
	adc show_obstacles_val_var466
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock464
show_obstacles_ConditionalTrueBlock462: ;Main true block ;keep 
	; LineNumber: 823
	; LineNumber: 824
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 825
show_obstacles_elsedoneblock464
	; LineNumber: 828
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var475 = $54
	sta show_obstacles_val_var475
	lda GAME_TICKS
	sec
show_obstacles_modulo476
	sbc show_obstacles_val_var475
	bcs show_obstacles_modulo476
	adc show_obstacles_val_var475
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock471
show_obstacles_ConditionalTrueBlock470: ;Main true block ;keep 
	; LineNumber: 829
	; LineNumber: 831
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 832
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 834
	jmp show_obstacles_elsedoneblock472
show_obstacles_elseblock471
	; LineNumber: 835
	; LineNumber: 836
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 837
show_obstacles_elsedoneblock472
	; LineNumber: 860
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop479
	; LineNumber: 841
	; LineNumber: 842
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 843
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var507 = $54
	sta show_obstacles_rightvarInteger_var507
	sty show_obstacles_rightvarInteger_var507+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var507
show_obstacles_wordAdd505
	sta show_obstacles_rightvarInteger_var507
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var507+1
	tay
	lda show_obstacles_rightvarInteger_var507
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 845
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var510 = $54
	sta show_obstacles_rightvarInteger_var510
	sty show_obstacles_rightvarInteger_var510+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var510
show_obstacles_wordAdd508
	sta show_obstacles_rightvarInteger_var510
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var510+1
	tay
	lda show_obstacles_rightvarInteger_var510
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 847
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock513
show_obstacles_ConditionalTrueBlock512: ;Main true block ;keep 
	; LineNumber: 848
	; LineNumber: 849
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd520
	inc this_source_offset+1
show_obstacles_WordAdd520
	; LineNumber: 851
	jmp show_obstacles_elsedoneblock514
show_obstacles_elseblock513
	; LineNumber: 852
	; LineNumber: 853
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd522
	inc this_source_offset+1
show_obstacles_WordAdd522
	; LineNumber: 854
show_obstacles_elsedoneblock514
	; LineNumber: 855
	; memcpyfast
	ldy #39
show_obstacles_memcpy523
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy523
	; LineNumber: 859
show_obstacles_forloopcounter481
show_obstacles_loopstart482
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone524
show_obstacles_loopnotdone525
	jmp show_obstacles_forloop479
show_obstacles_loopdone524
show_obstacles_forloopend480
show_obstacles_loopend483
	; LineNumber: 880
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop526
	; LineNumber: 862
	; LineNumber: 863
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 864
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var554 = $54
	sta show_obstacles_rightvarInteger_var554
	sty show_obstacles_rightvarInteger_var554+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var554
show_obstacles_wordAdd552
	sta show_obstacles_rightvarInteger_var554
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var554+1
	tay
	lda show_obstacles_rightvarInteger_var554
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 865
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var557 = $54
	sta show_obstacles_rightvarInteger_var557
	sty show_obstacles_rightvarInteger_var557+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var557
show_obstacles_wordAdd555
	sta show_obstacles_rightvarInteger_var557
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var557+1
	tay
	lda show_obstacles_rightvarInteger_var557
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 867
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock560
show_obstacles_ConditionalTrueBlock559: ;Main true block ;keep 
	; LineNumber: 868
	; LineNumber: 869
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd567
	inc this_source_offset+1
show_obstacles_WordAdd567
	; LineNumber: 871
	jmp show_obstacles_elsedoneblock561
show_obstacles_elseblock560
	; LineNumber: 872
	; LineNumber: 873
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd569
	inc this_source_offset+1
show_obstacles_WordAdd569
	; LineNumber: 874
show_obstacles_elsedoneblock561
	; LineNumber: 875
	; memcpyfast
	ldy #39
show_obstacles_memcpy570
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy570
	; LineNumber: 879
show_obstacles_forloopcounter528
show_obstacles_loopstart529
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone571
show_obstacles_loopnotdone572
	jmp show_obstacles_forloop526
show_obstacles_loopdone571
show_obstacles_forloopend527
show_obstacles_loopend530
	; LineNumber: 881
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock576
show_obstacles_ConditionalTrueBlock574: ;Main true block ;keep 
	; LineNumber: 882
	; LineNumber: 885
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 886
show_obstacles_elsedoneblock576
	; LineNumber: 889
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 891
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 894
kill_frog
	; LineNumber: 895
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 896
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 897
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 898
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 899
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 900
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 901
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 902
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 903
	jsr burp
	; LineNumber: 904
	dec player_lives
	; LineNumber: 905
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 910
check_collisions
	; LineNumber: 912
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 918
	cmp frogcharA ;keep
	bne check_collisions_casenext583
	; LineNumber: 922
	; LineNumber: 923
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock588
check_collisions_ConditionalTrueBlock586: ;Main true block ;keep 
	; LineNumber: 924
	; LineNumber: 925
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 926
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 927
check_collisions_elsedoneblock588
	; LineNumber: 928
	jmp check_collisions_caseend582
check_collisions_casenext583
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext591
	; LineNumber: 930
	; LineNumber: 931
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock596
check_collisions_ConditionalTrueBlock594: ;Main true block ;keep 
	; LineNumber: 932
	; LineNumber: 933
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 934
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 935
check_collisions_elsedoneblock596
	; LineNumber: 936
	jmp check_collisions_caseend582
check_collisions_casenext591
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext599
	; LineNumber: 939
	; LineNumber: 940
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock604
check_collisions_ConditionalTrueBlock602: ;Main true block ;keep 
	; LineNumber: 941
	; LineNumber: 942
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 943
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 944
check_collisions_elsedoneblock604
	; LineNumber: 945
	jmp check_collisions_caseend582
check_collisions_casenext599
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext607
	; LineNumber: 948
	; LineNumber: 949
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 950
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 951
	jmp check_collisions_caseend582
check_collisions_casenext607
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext609
	; LineNumber: 954
	; LineNumber: 955
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 956
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 957
	jmp check_collisions_caseend582
check_collisions_casenext609
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext611
	; LineNumber: 963
	; LineNumber: 964
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock616
check_collisions_localsuccess618: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock616
check_collisions_ConditionalTrueBlock614: ;Main true block ;keep 
	; LineNumber: 965
	; LineNumber: 966
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 967
check_collisions_elsedoneblock616
	; LineNumber: 968
	jmp check_collisions_caseend582
check_collisions_casenext611
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext620
	; LineNumber: 973
	; LineNumber: 974
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 975
	jmp check_collisions_caseend582
check_collisions_casenext620
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext622
	; LineNumber: 978
	; LineNumber: 979
	jsr kill_frog
	; LineNumber: 980
	jmp check_collisions_caseend582
check_collisions_casenext622
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext624
	; LineNumber: 983
	; LineNumber: 984
	jsr kill_frog
	; LineNumber: 986
	jmp check_collisions_caseend582
check_collisions_casenext624
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext626
	; LineNumber: 988
	; LineNumber: 989
	jsr kill_frog
	; LineNumber: 991
	jmp check_collisions_caseend582
check_collisions_casenext626
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext628
	; LineNumber: 994
	; LineNumber: 995
	jsr kill_frog
	; LineNumber: 997
	jmp check_collisions_caseend582
check_collisions_casenext628
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext630
	; LineNumber: 1000
	; LineNumber: 1001
	jsr kill_frog
	; LineNumber: 1003
	jmp check_collisions_caseend582
check_collisions_casenext630
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext632
	; LineNumber: 1006
	; LineNumber: 1007
	jsr kill_frog
	; LineNumber: 1009
	jmp check_collisions_caseend582
check_collisions_casenext632
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext634
	; LineNumber: 1012
	; LineNumber: 1013
	jsr kill_frog
	; LineNumber: 1015
	jmp check_collisions_caseend582
check_collisions_casenext634
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext636
	; LineNumber: 1018
	; LineNumber: 1019
	jsr kill_frog
	; LineNumber: 1021
	jmp check_collisions_caseend582
check_collisions_casenext636
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext638
	; LineNumber: 1025
	; LineNumber: 1026
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1028
	jmp check_collisions_caseend582
check_collisions_casenext638
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext640
	; LineNumber: 1031
	; LineNumber: 1032
	jsr kill_frog
	; LineNumber: 1033
	jmp check_collisions_caseend582
check_collisions_casenext640
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext642
	; LineNumber: 1038
	; LineNumber: 1039
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1040
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1041
	jmp check_collisions_caseend582
check_collisions_casenext642
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext644
	; LineNumber: 1044
	; LineNumber: 1045
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed661
	jmp check_collisions_ConditionalTrueBlock647
check_collisions_localfailed661: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock649
check_collisions_ConditionalTrueBlock647: ;Main true block ;keep 
	; LineNumber: 1046
	; LineNumber: 1047
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd663
	inc player_score+1
check_collisions_WordAdd663
	; LineNumber: 1048
	inc FROGS_SAVED
	; LineNumber: 1049
	jsr ping
	; LineNumber: 1051
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock667
check_collisions_ConditionalTrueBlock666: ;Main true block ;keep 
	; LineNumber: 1052
	; LineNumber: 1054
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1056
	jmp check_collisions_elsedoneblock668
check_collisions_elseblock667
	; LineNumber: 1057
	; LineNumber: 1058
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1059
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1060
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1061
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1062
check_collisions_elsedoneblock668
	; LineNumber: 1063
check_collisions_elsedoneblock649
	; LineNumber: 1064
	jmp check_collisions_caseend582
check_collisions_casenext644
	; LineNumber: 1068
	; LineNumber: 1071
check_collisions_caseend582
	; LineNumber: 1072
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1082
game_loop
	; LineNumber: 1084
	jsr Key_SetupScreenCodes
	; LineNumber: 1089
	
; // Unit constants
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 1090
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 1091
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 1092
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 1095
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 1096
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 1097
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 1098
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 1101
game_loop_while675
game_loop_loopstart679
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed815
game_loop_localsuccess816: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed815
	jmp game_loop_ConditionalTrueBlock676
game_loop_localfailed815
	jmp game_loop_elsedoneblock678
game_loop_ConditionalTrueBlock676: ;Main true block ;keep 
	; LineNumber: 1102
	; LineNumber: 1104
	jsr Key_Read
	; LineNumber: 1106
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1107
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1108
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed833
	jmp game_loop_ConditionalTrueBlock819
game_loop_localfailed833: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock821
game_loop_ConditionalTrueBlock819: ;Main true block ;keep 
	; LineNumber: 1109
	; LineNumber: 1110
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock838
game_loop_ConditionalTrueBlock836: ;Main true block ;keep 
	; LineNumber: 1111
	; LineNumber: 1112
	dec frog_y
	; LineNumber: 1113
	inc player_score
	bne game_loop_incdec844
	inc player_score +1
game_loop_incdec844
	; LineNumber: 1114
game_loop_elsedoneblock838
	; LineNumber: 1115
game_loop_elsedoneblock821
	; LineNumber: 1117
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed860
	jmp game_loop_ConditionalTrueBlock846
game_loop_localfailed860: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock848
game_loop_ConditionalTrueBlock846: ;Main true block ;keep 
	; LineNumber: 1118
	; LineNumber: 1119
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock865
game_loop_ConditionalTrueBlock863: ;Main true block ;keep 
	; LineNumber: 1120
	; LineNumber: 1121
	inc frog_x
	; LineNumber: 1122
	inc player_score
	bne game_loop_incdec871
	inc player_score +1
game_loop_incdec871
	; LineNumber: 1123
game_loop_elsedoneblock865
	; LineNumber: 1124
game_loop_elsedoneblock848
	; LineNumber: 1126
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed887
	jmp game_loop_ConditionalTrueBlock873
game_loop_localfailed887: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock875
game_loop_ConditionalTrueBlock873: ;Main true block ;keep 
	; LineNumber: 1127
	; LineNumber: 1128
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock892
game_loop_ConditionalTrueBlock890: ;Main true block ;keep 
	; LineNumber: 1129
	; LineNumber: 1130
	inc frog_y
	; LineNumber: 1131
	inc player_score
	bne game_loop_incdec898
	inc player_score +1
game_loop_incdec898
	; LineNumber: 1132
game_loop_elsedoneblock892
	; LineNumber: 1133
game_loop_elsedoneblock875
	; LineNumber: 1134
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed914
	jmp game_loop_ConditionalTrueBlock900
game_loop_localfailed914: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock902
game_loop_ConditionalTrueBlock900: ;Main true block ;keep 
	; LineNumber: 1135
	; LineNumber: 1136
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock919
game_loop_ConditionalTrueBlock917: ;Main true block ;keep 
	; LineNumber: 1137
	; LineNumber: 1138
	dec frog_x
	; LineNumber: 1139
	inc player_score
	bne game_loop_incdec925
	inc player_score +1
game_loop_incdec925
	; LineNumber: 1140
game_loop_elsedoneblock919
	; LineNumber: 1141
game_loop_elsedoneblock902
	; LineNumber: 1144
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax927
	lda #$1
	sta GAME_TICKS
game_loop_incmax927
	; LineNumber: 1147
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1150
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1153
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock931
game_loop_ConditionalTrueBlock929: ;Main true block ;keep 
	; LineNumber: 1154
	; LineNumber: 1156
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1158
game_loop_elsedoneblock931
	; LineNumber: 1163
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed939
	jmp game_loop_ConditionalTrueBlock935
game_loop_localfailed939: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock937
game_loop_ConditionalTrueBlock935: ;Main true block ;keep 
	; LineNumber: 1164
	; LineNumber: 1165
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1166
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1167
game_loop_elsedoneblock937
	; LineNumber: 1170
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock943
game_loop_ConditionalTrueBlock942: ;Main true block ;keep 
	; LineNumber: 1171
	; LineNumber: 1172
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1174
	jmp game_loop_elsedoneblock944
game_loop_elseblock943
	; LineNumber: 1175
	; LineNumber: 1176
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1177
game_loop_elsedoneblock944
	; LineNumber: 1182
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1182
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal949
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal949
	; LineNumber: 1184
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1184
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal950
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal950
	; LineNumber: 1188
	jmp game_loop_while675
game_loop_elsedoneblock678
game_loop_loopend680
	; LineNumber: 1190
	rts
block1
	; LineNumber: 1192
	; LineNumber: 1195
MainProgram_while951
MainProgram_loopstart955
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock954
MainProgram_ConditionalTrueBlock952: ;Main true block ;keep 
	; LineNumber: 1196
	; LineNumber: 1197
	jsr title_screen
	; LineNumber: 1198
	jsr init_vars
	; LineNumber: 1199
	jsr game_loop
	; LineNumber: 1200
	jsr score_screen
	; LineNumber: 1201
	jmp MainProgram_while951
MainProgram_elsedoneblock954
MainProgram_loopend956
	; LineNumber: 1205
	; End of program
	; Ending memory block
EndBlock410
score_screen_stringassignstr347	.dc "                       ",0
score_screen_stringassignstr349	.dc "                       ",0
