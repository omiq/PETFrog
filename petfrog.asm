 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1347
	jmp block1
	; LineNumber: 3
Key_temp	dc.b	0
	; LineNumber: 5
Key_keyState	dc.b	0
	; LineNumber: 7
Key_KeyRow = $e810
	; LineNumber: 8
Key_KeyRead = $e812
	; LineNumber: 9
Key_KeyInterrupt = $e813
	; LineNumber: 12
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 13
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 14
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 144
Key_screencodes	
	dc.b	$21, $23, $25, $26, 40, 69, 72, 74, 34
	dc.b	$24, $27, , 41, 255, 73, 75, $11, $05
	dc.b	$14, $15, $0f, 70, $37, $39, $17, $12, $19
	dc.b	$09, $10, 255, $38, $2f, $01, $04, $07, $0a
	dc.b	$0c, 255, $34, $36, $13, $06, $08, $0b, $3a
	dc.b	255, $35, $2a, $1a, $03, $02, $0d, $3b, 71
	dc.b	$31, $33, $18, $16, $0e, 44, $3f, 255, $32
	dc.b	$2b, 255, $00, $1d, 255, $3e, 255, $30, $2d
	dc.b	67, $1b, $20, $3c, 68, 255, $2e, $3d, 0
	; LineNumber: 13
ti = $8f
	; LineNumber: 30
KEYPRESS	dc.w	$ff
	; LineNumber: 32
ks	dc.b	$00
	; LineNumber: 34
n_key_up	dc.w	0
	; LineNumber: 34
n_key_down	dc.w	0
	; LineNumber: 34
n_key_left	dc.w	0
	; LineNumber: 34
n_key_right	dc.w	0
	; LineNumber: 34
key_up	dc.w	0
	; LineNumber: 34
key_down	dc.w	0
	; LineNumber: 34
key_left	dc.w	0
	; LineNumber: 34
key_right	dc.w	0
	; LineNumber: 41
PLAY_SOUND	dc.b	$01
	; LineNumber: 42
GAME_SPEED	dc.b	$00
	; LineNumber: 43
ALIVE	dc.b	$01
	; LineNumber: 44
WON_GAME	dc.b	$00
	; LineNumber: 45
FROGS_SAVED	dc.b	$00
	; LineNumber: 46
GAME_TICKS	dc.b	$00
	; LineNumber: 47
READY_TO_PLAY	dc.b	$00
	; LineNumber: 51
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 52
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 53
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 54
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 55
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 56
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 57
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 58
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 59
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 60
is_80	dc.b	0
	; LineNumber: 63
sorry_80		dc.b	147
	dc.b	14
	dc.b	"80 COLUMNS DETECTED"
	dc.b	13
	dc.b	"PLEASE CHOOSE 40 COLUMNS AND REBOOT"
	dc.b	0
	; LineNumber: 65
help_screen_array	
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 78, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	119, 119, 119, 119, 119, 119, 119, 119, 119
	dc.b	77, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 16, 5, 20, 6, 18, 15, 7, 32
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 230, 230, 230, 230, 230
	dc.b	230, 230, 230, 230, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 116
	dc.b	42, 32, 18, 5, 17, 21, 9, 18, 5
	dc.b	19, 32, 7, 18, 1, 16, 8, 9, 3
	dc.b	32, 11, 5, 25, 2, 15, 1, 18, 4
	dc.b	32, 32, 32, 103, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 116, 42, 32, 16, 12, 1
	dc.b	25, 32, 9, 14, 32, 52, 48, 32, 3
	dc.b	15, 12, 21, 13, 14, 32, 13, 15, 4
	dc.b	5, 32, 32, 32, 32, 32, 32, 103, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 116, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 103, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 116, 2, 18, 9, 14, 7, 32
	dc.b	25, 15, 21, 18, 32, 6, 18, 15, 7
	dc.b	7, 9, 5, 19, 32, 8, 15, 13, 5
	dc.b	33, 32, 32, 32, 32, 32, 103, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 116, 1, 22
	dc.b	15, 9, 4, 32, 20, 18, 1, 6, 6
	dc.b	9, 3, 32, 1, 14, 4, 32, 3, 18
	dc.b	15, 3, 32, 13, 15, 21, 20, 8, 19
	dc.b	32, 103, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 116, 2, 5, 20, 23, 5, 5, 14
	dc.b	32, 18, 9, 22, 5, 18, 32, 2, 1
	dc.b	14, 11, 19, 32, 9, 19, 32, 4, 5
	dc.b	1, 4, 12, 25, 32, 106, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 116, 18, 9, 4
	dc.b	5, 32, 12, 15, 7, 19, 44, 32, 3
	dc.b	18, 15, 3, 32, 2, 15, 4, 19, 32
	dc.b	43, 32, 20, 21, 18, 20, 12, 5, 19
	dc.b	103, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	116, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 103, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 116, 230, 32, 7, 5
	dc.b	20, 32, 19, 9, 24, 32, 6, 18, 15
	dc.b	7, 19, 32, 15, 14, 32, 83, 32, 20
	dc.b	15, 32, 23, 9, 14, 33, 32, 102, 103
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 77
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 111, 111, 111
	dc.b	111, 111, 111, 111, 111, 111, 32, 32, 32
	dc.b	32, 32, 111, 78, 108, 226, 123, 32, 98
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 97, 32, 32, 32, 254, 126, 32, 32
	dc.b	32, 32, 124, 32, 127, 32, 32, 32, 32
	dc.b	32, 32, 32, 98, 98, 98, 98, 98, 32
	dc.b	32, 85, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 64, 64, 64, 73, 251, 32, 32, 225
	dc.b	126, 32, 32, 108, 160, 123, 108, 160, 123
	dc.b	32, 32, 32, 32, 108, 160, 160, 160, 226
	dc.b	32, 32, 124, 123, 32, 93, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 93
	dc.b	225, 123, 32, 225, 123, 32, 32, 225, 254
	dc.b	252, 254, 254, 252, 123, 32, 32, 32, 254
	dc.b	226, 97, 108, 98, 160, 252, 32, 251, 32
	dc.b	93, 11, 5, 25, 19, 58, 32, 32, 32
	dc.b	32, 32, 32, 93, 32, 251, 123, 32, 252
	dc.b	32, 108, 160, 160, 160, 160, 252, 124, 160
	dc.b	32, 32, 32, 236, 254, 108, 160, 160, 236
	dc.b	225, 32, 124, 252, 93, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 93, 32
	dc.b	32, 124, 127, 255, 127, 123, 124, 251, 160
	dc.b	160, 126, 252, 160, 32, 32, 225, 126, 97
	dc.b	225, 160, 126, 254, 126, 32, 98, 236, 93
	dc.b	32, 32, 32, 32, 32, 23, 32, 32, 32
	dc.b	56, 32, 93, 32, 32, 32, 32, 124, 226
	dc.b	126, 32, 108, 108, 123, 108, 160, 160, 32
	dc.b	32, 160, 108, 97, 32, 226, 226, 32, 98
	dc.b	236, 126, 108, 93, 127, 123, 32, 32, 1
	dc.b	19, 4, 32, 52, 53, 54, 93, 32, 32
	dc.b	32, 32, 32, 32, 160, 252, 124, 226, 108
	dc.b	160, 251, 160, 32, 32, 97, 225, 32, 32
	dc.b	32, 98, 226, 126, 32, 255, 252, 74, 64
	dc.b	64, 64, 64, 64, 64, 64, 64, 64, 64
	dc.b	64, 75, 32, 32, 32, 32, 225, 123, 225
	dc.b	160, 160, 160, 160, 126, 254, 160, 32, 225
	dc.b	97, 160, 32, 254, 226, 126, 98, 160, 252
	dc.b	123, 108, 124, 32, 32, 97, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	252, 108, 97, 124, 160, 160, 98, 98, 254
	dc.b	160, 160, 32, 32, 251, 123, 251, 123, 32
	dc.b	160, 160, 160, 236, 126, 32, 32, 123, 126
	dc.b	97, 32, 32, 32, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 108, 32, 160, 160, 123, 32
	dc.b	160, 160, 160, 160, 160, 160, 32, 32, 124
	dc.b	160, 123, 251, 123, 124, 226, 126, 32, 32
	dc.b	98, 236, 108, 226, 32, 32, 32, 32, 32
	dc.b	32, 32, 32, 32, 32, 32, 32, 32, 226
	dc.b	251, 160, 160, 254, 254, 160, 160, 160, 160
	dc.b	160, 0
	; LineNumber: 109
frogcharA	dc.b	$d6
	; LineNumber: 110
frogcharB	dc.b	$56
	; LineNumber: 111
frog_x	dc.b	$14
	; LineNumber: 111
frog_old_x	dc.b	$14
	; LineNumber: 112
frog_y	dc.b	$18
	; LineNumber: 112
frog_old_y	dc.b	$18
	; LineNumber: 113
previous_tile	dc.b	$20
	; LineNumber: 114
next_tile	dc.b	0
	; LineNumber: 115
player_lives	dc.b	$00
	; LineNumber: 116
player_score	dc.w	$00
	; LineNumber: 118
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 119
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 121
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 122
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 125
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 126
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 128
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 129
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 131
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 132
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 134
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 135
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 137
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 138
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 142
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 143
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 144
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 145
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 153
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 154
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 155
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 156
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 161
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 162
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 164
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 167
traffic_x_rl	dc.b	0
	; LineNumber: 167
traffic_x_lr	dc.b	0
	; LineNumber: 168
obstacles_x_rl	dc.b	0
	; LineNumber: 168
obstacles_x_lr	dc.b	0
	; LineNumber: 172
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 180
title_screen_frog_pointer	= $02
	; LineNumber: 181
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 209
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 237
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 266
petscii_pointer	= $04
	; LineNumber: 300
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key__GetKeyOffset
	;    Procedure type : User-defined procedure
	; LineNumber: 175
	; LineNumber: 174
	; LineNumber: 174
Key__GetKeyOffset_block4
Key__GetKeyOffset
	; LineNumber: 178
	; ****** Inline assembler section
	
	; pass with _a containing key to check 1, 2, 4, 8, 16, 32, 64, 128
	; and y the row offset 0 - 9
	tax ; temp store key
	
	tya ; multiply row offset by 8 to find starting pos in array
	asl
	asl
	asl ; *8
	sta TEMP_VAR1
	
	; use temporary variable as a pointer
	lda #>Key_screencodes
	sta TEMP_VAR2+1 ; high byte
	lda #<Key_screencodes
	sta TEMP_VAR2 ; low byte
	
	clc
	adc TEMP_VAR1
	sta TEMP_VAR2
	bcc getKey_NoOverflow
	inc TEMP_VAR2+1 ; byte overflow, update high byte
	
getKey_NoOverflow
	; then work out the offest 0 - 7
	txa ; the key
	
	ldy #0  ; count the number of shifts
	ldx #8	; test all 8 bits
getKey_testLoop
	lsr ; bit put in carry
	bcs getKey_foundBit
	iny	; counter for next bit to test
	dex	; 
	bne getKey_testLoop
	
getKey_foundBit
	; x has the bit 0-7 or 8 if not found
	cpy #8
	beq getKey_NotFound
	
	lda (TEMP_VAR2),y  ; load screencode + bit offset
	rts 
	
getKey_NotFound
	lda #KEY_NOKEY ; not found
	
	; LineNumber: 230
	rts
	;*
; //Read the full 10 row keyboard matrix 
; //and populate the keyboard flags
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 261
Key_Read
	; LineNumber: 263
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 292
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop6
	; LineNumber: 266
	; LineNumber: 268
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 270
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 291
Key_Read_forloopcounter8
Key_Read_loopstart9
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop6
Key_Read_loopdone13: ;keep
Key_Read_forloopend7
Key_Read_loopend10
	; LineNumber: 293
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 309
	; LineNumber: 308
Key_Pressed_block14
Key_Pressed
	; LineNumber: 311
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 319
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_SetupScreenCodes
	;    Procedure type : User-defined procedure
	; LineNumber: 342
Key_SetupScreenCodes
	; LineNumber: 344
	; Assigning memory location
	; Assigning single variable : $5e
	; Load Byte array
	ldx #$0
	lda Key_screencodes,x
	; Calling storevariable
	sta $5e
	; LineNumber: 346
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 344
cls
	; LineNumber: 345
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop18
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop18
	; LineNumber: 346
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 347
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : _ti
	;    Procedure type : User-defined procedure
	; LineNumber: 352
	; LineNumber: 351
ti_temp	dc.w	0
_ti_block19
_ti
	; LineNumber: 353
	; Assigning single variable : ti_temp
	ldy #0
	lda #$0
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 354
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var22 = $54
	sta _ti_rightvarInteger_var22
	sty _ti_rightvarInteger_var22+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8D + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	sta mul16x8_num1
	sty mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var22
_ti_wordAdd20
	sta _ti_rightvarInteger_var22
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var22+1
	tay
	lda _ti_rightvarInteger_var22
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 355
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var25 = $54
	sta _ti_rightvarInteger_var25
	sty _ti_rightvarInteger_var25+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8E + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var25
_ti_wordAdd23
	sta _ti_rightvarInteger_var25
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var25+1
	tay
	lda _ti_rightvarInteger_var25
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 356
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var28 = $54
	sta _ti_rightvarInteger_var28
	sty _ti_rightvarInteger_var28+1
	; Peek
	lda $8F + $0
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var28
_ti_wordAdd26
	sta _ti_rightvarInteger_var28
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var28+1
	tay
	lda _ti_rightvarInteger_var28
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 358
	; LineNumber: 359
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 362
uppercase
	; LineNumber: 363
	; Poke
	; Optimization: shift is zero
	lda #$c
	sta $E84C
	; LineNumber: 364
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_home
	;    Procedure type : User-defined procedure
	; LineNumber: 367
cursor_home
	; LineNumber: 369
	; Assigning register : _a
	lda #$13
	; LineNumber: 370
	jsr $FFD2
	; LineNumber: 372
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 383
cursor_return
	; LineNumber: 385
	; Assigning register : _a
	lda #$d
	; LineNumber: 386
	jsr $FFD2
	; LineNumber: 388
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 391
cursor_down
	; LineNumber: 393
	; Assigning register : _a
	lda #$11
	; LineNumber: 394
	jsr $FFD2
	; LineNumber: 396
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_right
	;    Procedure type : User-defined procedure
	; LineNumber: 399
cursor_right
	; LineNumber: 401
	; Assigning register : _a
	lda #$1d
	; LineNumber: 402
	jsr $FFD2
	; LineNumber: 404
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 407
cursor_graphic
	; LineNumber: 409
	; Assigning register : _a
	lda #$8e
	; LineNumber: 410
	jsr $FFD2
	; LineNumber: 412
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : basic_print
	;    Procedure type : User-defined procedure
	; LineNumber: 417
	; LineNumber: 416
next_ch	dc.b	0
	; LineNumber: 414
_ptr	= $08
basic_print_block35
basic_print
	; LineNumber: 419
	; Assigning single variable : next_ch
	lda #$0
	; Calling storevariable
	sta next_ch
	; LineNumber: 420
basic_print_while36
basic_print_loopstart40
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq basic_print_elsedoneblock39
basic_print_ConditionalTrueBlock37: ;Main true block ;keep 
	; LineNumber: 420
	; LineNumber: 422
	; Assigning register : _a
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; LineNumber: 423
	jsr $FFD2
	; LineNumber: 424
	inc next_ch
	; LineNumber: 425
	jmp basic_print_while36
basic_print_elsedoneblock39
basic_print_loopend41
	; LineNumber: 427
	jsr cursor_return
	; LineNumber: 428
	jsr cursor_down
	; LineNumber: 430
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 456
	; LineNumber: 453
char	dc.b	0
	; LineNumber: 454
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 455
screen_pointer	= $08
is_80_columns_block46
is_80_columns
	; LineNumber: 458
	; Assigning single variable : screen_pointer
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 465
	; Assigning single variable : char
	lda #$0
	; Calling storevariable
	sta char
is_80_columns_forloop47
	; LineNumber: 461
	; LineNumber: 462
	; Assigning register : _a
	; Load Unknown type array
	ldx char
	lda test_string,x
	; LineNumber: 463
	jsr $FFD2
	; LineNumber: 464
is_80_columns_forloopcounter49
is_80_columns_loopstart50
	; Compare is onpage
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop47
is_80_columns_loopdone54: ;keep
is_80_columns_forloopend48
is_80_columns_loopend51
	; LineNumber: 466
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock57
is_80_columns_ConditionalTrueBlock56: ;Main true block ;keep 
	; LineNumber: 467
	; LineNumber: 468
	lda #$1
	rts
	; LineNumber: 470
	jmp is_80_columns_elsedoneblock58
is_80_columns_elseblock57
	; LineNumber: 471
	; LineNumber: 472
	lda #$0
	rts
	; LineNumber: 473
is_80_columns_elsedoneblock58
	; LineNumber: 475
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sleep_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 481
	; LineNumber: 479
_old_ti	dc.w	0
	; LineNumber: 479
_new_ti	dc.w	0
sleep_delay_block63
sleep_delay
	; LineNumber: 483
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 484
	; Assigning single variable : _old_ti
	; integer assignment NodeVar
	ldy _new_ti+1 ; Next one
	; Calling storevariable
	sta _old_ti
	sty _old_ti+1
	; LineNumber: 486
sleep_delay_while64
sleep_delay_loopstart68
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda _new_ti+1   ; compare high bytes
	cmp _old_ti+1 ;keep
	bne sleep_delay_elsedoneblock67
	lda _new_ti
	cmp _old_ti ;keep
	bne sleep_delay_elsedoneblock67
	jmp sleep_delay_ConditionalTrueBlock65
sleep_delay_ConditionalTrueBlock65: ;Main true block ;keep 
	; LineNumber: 487
	; LineNumber: 488
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 489
	jmp sleep_delay_while64
sleep_delay_elsedoneblock67
sleep_delay_loopend69
	; LineNumber: 491
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frame_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 496
	; LineNumber: 495
sleepx	dc.b	0
frame_delay_block72
frame_delay
	; LineNumber: 501
	; Assigning single variable : sleepx
	lda #$1
	; Calling storevariable
	sta sleepx
frame_delay_forloop73
	; LineNumber: 498
	; LineNumber: 499
	jsr sleep_delay
	; LineNumber: 500
frame_delay_forloopcounter75
frame_delay_loopstart76
	; Compare is onpage
	inc sleepx
	lda #$2
	cmp sleepx ;keep
	bcs frame_delay_forloop73
frame_delay_loopdone80: ;keep
frame_delay_forloopend74
frame_delay_loopend77
	; LineNumber: 502
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 531
	; LineNumber: 529
szp	= $08
	; LineNumber: 527
sx	dc.b	0
	; LineNumber: 527
sy	dc.b	0
getat_block81
getat
	; LineNumber: 532
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var84 = $54
	sta getat_rightvarInteger_var84
	sty getat_rightvarInteger_var84+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var87 = $56
	sta getat_rightvarInteger_var87
	sty getat_rightvarInteger_var87+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var87
getat_wordAdd85
	sta getat_rightvarInteger_var87
	; High-bit binop
	tya
	adc getat_rightvarInteger_var87+1
	tay
	lda getat_rightvarInteger_var87
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var84
getat_wordAdd82
	sta getat_rightvarInteger_var84
	; High-bit binop
	tya
	adc getat_rightvarInteger_var84+1
	tay
	lda getat_rightvarInteger_var84
	sta szp
	sty szp+1
	; LineNumber: 533
	; LineNumber: 534
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 540
	; LineNumber: 538
zp	= $08
	; LineNumber: 536
x	dc.b	0
	; LineNumber: 536
y	dc.b	0
	; LineNumber: 536
this_str	= $16
	; LineNumber: 536
str_len	dc.b	0
textat_block88
textat
	; LineNumber: 541
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var91 = $54
	sta textat_rightvarInteger_var91
	sty textat_rightvarInteger_var91+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var94 = $56
	sta textat_rightvarInteger_var94
	sty textat_rightvarInteger_var94+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var94
textat_wordAdd92
	sta textat_rightvarInteger_var94
	; High-bit binop
	tya
	adc textat_rightvarInteger_var94+1
	tay
	lda textat_rightvarInteger_var94
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var91
textat_wordAdd89
	sta textat_rightvarInteger_var91
	; High-bit binop
	tya
	adc textat_rightvarInteger_var91+1
	tay
	lda textat_rightvarInteger_var91
	sta zp
	sty zp+1
	; LineNumber: 541
	; memcpyfast
	ldy str_len
	dey
textat_memcpy95
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy95
	; LineNumber: 543
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 562
	; LineNumber: 561
note_duration	dc.b	0
	; LineNumber: 559
note	dc.b	0
	; LineNumber: 559
note_len	dc.b	0
PlayNote_block96
PlayNote
	; LineNumber: 563
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock100
PlayNote_ConditionalTrueBlock98: ;Main true block ;keep 
	; LineNumber: 564
	; LineNumber: 565
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 567
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop111
	; LineNumber: 565
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter113
PlayNote_loopstart114
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop111
PlayNote_loopdone118: ;keep
PlayNote_forloopend112
PlayNote_loopend115
	; LineNumber: 567
PlayNote_elsedoneblock100
	; LineNumber: 568
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 571
burp
	; LineNumber: 572
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 573
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 574
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 575
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 576
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 579
ping
	; LineNumber: 580
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 581
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 582
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 583
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 584
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 585
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 586
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 587
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 595
	; LineNumber: 593
c_row	= $08
	; LineNumber: 593
p_row	= $16
	; LineNumber: 594
scroll	dc.b	0
	; LineNumber: 594
scrolls	dc.b	0
ScrollY_block121
ScrollY
	; LineNumber: 609
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop122
	; LineNumber: 596
	; LineNumber: 598
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 599
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 606
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop146
	; LineNumber: 601
	; LineNumber: 601
	; memcpyfast
	ldy #39
ScrollY_memcpy156
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy156
	; LineNumber: 603
	; Assigning single variable : p_row
	lda p_row
	clc
	adc #$28
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd157
	inc p_row+1
ScrollY_WordAdd157
	; LineNumber: 604
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 605
ScrollY_forloopcounter148
ScrollY_loopstart149
	; Compare is onpage
	inc scroll
	lda #$19
	cmp scroll ;keep
	bcs ScrollY_forloop146
ScrollY_loopdone159: ;keep
ScrollY_forloopend147
ScrollY_loopend150
	; LineNumber: 606
	ldy #$28 ; optimized, look out for bugs
	lda #$20
ScrollY_fill160
	sta (c_row),y
	dey
	bpl ScrollY_fill160
	; LineNumber: 607
	jsr Crt_WaitVblStart
	; LineNumber: 608
ScrollY_forloopcounter124
ScrollY_loopstart125
	; Compare is onpage
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	bne ScrollY_forloop122
ScrollY_loopdone161: ;keep
ScrollY_forloopend123
ScrollY_loopend126
	; LineNumber: 610
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 618
	; LineNumber: 615
hks	dc.b	0
	; LineNumber: 616
help_screen_pointer	= $08
help_screen_block162
help_screen
	; LineNumber: 621
	
; // Set up pointer to array:
	; Assigning single variable : help_screen_pointer
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 622
	; Assigning single variable : hks
	lda #$0
	; Calling storevariable
	sta hks
	; LineNumber: 623
	jsr cls
	; LineNumber: 624
	jsr cursor_home
	; LineNumber: 627
	
; // Draw the frog
	; Copy full screen
	lda help_screen_pointer
	sta $4c
	lda help_screen_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
help_screen_outer163
	ldy #0
help_screen_inner164
	lda ($4c),y
	sta ($4e),y
	dey
	bne help_screen_inner164
	inc $4c+1
	inc $4e+1
	dex
	bne help_screen_outer163
	ldy #0
help_screen_final165
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne help_screen_final165
	; LineNumber: 632
	; Assigning single variable : hks
	lda #$1
	; Calling storevariable
	sta hks
help_screen_forloop166
	; LineNumber: 629
	; LineNumber: 630
	jsr cursor_down
	; LineNumber: 631
	jsr cursor_right
	; LineNumber: 632
help_screen_forloopcounter168
help_screen_loopstart169
	; Compare is onpage
	inc hks
	lda #$16
	cmp hks ;keep
	bcs help_screen_forloop166
help_screen_loopdone173: ;keep
help_screen_forloopend167
help_screen_loopend170
	; LineNumber: 633
	; Assigning single variable : _ptr
	lda #<help_screen_stringassignstr174
	sta _ptr
	lda #>help_screen_stringassignstr174
	sta _ptr+1
	jsr basic_print
	; LineNumber: 635
	jsr Key_SetupScreenCodes
	; LineNumber: 636
	jsr Key_Read
	; LineNumber: 638
help_screen_while176
help_screen_loopstart180
	; Binary clause Simplified: EQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock179
help_screen_ConditionalTrueBlock177: ;Main true block ;keep 
	; LineNumber: 639
	; LineNumber: 640
	jsr Key_Read
	; LineNumber: 641
	jsr sleep_delay
	; LineNumber: 642
	jmp help_screen_while176
help_screen_elsedoneblock179
help_screen_loopend181
	; LineNumber: 644
	jsr ScrollY
	; LineNumber: 645
	rts
	; LineNumber: 648
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 662
	; LineNumber: 652
ctr	dc.b	0
	; LineNumber: 652
slide	dc.b	0
	; LineNumber: 654
inst0	
	dc.b	98, 98, 98, 98, 98, 98, 32, 0
	; LineNumber: 655
inst1	
	dc.b	220, 139, 133, 153, 147, 186, 98, 98, 98
	dc.b	32, 0
	; LineNumber: 656
inst2	
	dc.b	220, 160, 160, 160, 160, 151, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 657
inst3	
	dc.b	220, 160, 160, 160, 129, 147, 132, 221, 160
	dc.b	32, 0
	; LineNumber: 658
inst4	
	dc.b	220, 160, 160, 160, 192, 192, 192, 253, 160
	dc.b	32, 0
	; LineNumber: 659
inst5	
	dc.b	220, 160, 160, 160, 160, 184, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 660
inst6	
	dc.b	220, 160, 160, 160, 180, 181, 182, 221, 160
	dc.b	32, 0
	; LineNumber: 661
inst7	
	dc.b	32, 32, 32, 124, 226, 226, 226, 226, 32
	dc.b	32, 0
title_screen_block184
title_screen
	; LineNumber: 665
	
; //12345678901234567890
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 666
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 667
	jsr cls
	; LineNumber: 670
	
; // Draw the frog
	; Copy full screen
	lda title_screen_frog_pointer
	sta $4c
	lda title_screen_frog_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
title_screen_outer185
	ldy #0
title_screen_inner186
	lda ($4c),y
	sta ($4e),y
	dey
	bne title_screen_inner186
	inc $4c+1
	inc $4e+1
	dex
	bne title_screen_outer185
	ldy #0
title_screen_final187
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne title_screen_final187
	; LineNumber: 671
	; memcpyfast
	ldx #12
title_screen_memcpy188
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy188
	; LineNumber: 672
	; memcpyfast
	ldx #12
title_screen_memcpy189
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy189
	; LineNumber: 673
	; memcpyfast
	ldx #12
title_screen_memcpy190
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy190
	; LineNumber: 674
	; memcpyfast
	ldx #12
title_screen_memcpy191
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy191
	; LineNumber: 677
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$d
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst0
	ldx #>inst0
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$7
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 678
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$e
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst1
	ldx #>inst1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 679
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$f
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst2
	ldx #>inst2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 680
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$10
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst3
	ldx #>inst3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 681
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$11
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst4
	ldx #>inst4
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 682
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$12
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst5
	ldx #>inst5
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 683
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$13
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst6
	ldx #>inst6
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 684
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$14
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst7
	ldx #>inst7
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 686
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 687
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 688
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 691
	jsr Key_SetupScreenCodes
	; LineNumber: 692
	jsr Key_Read
	; LineNumber: 695
title_screen_while192
title_screen_loopstart196
	; Binary clause Simplified: EQUALS
	; Assigning register : _xy
	ldx #$05
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed216
title_screen_localsuccess217: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed216
	jmp title_screen_ConditionalTrueBlock193
title_screen_localfailed216
	jmp title_screen_elsedoneblock195
title_screen_ConditionalTrueBlock193: ;Main true block ;keep 
	; LineNumber: 696
	; LineNumber: 698
	jsr Key_Read
	; LineNumber: 699
	; Assigning single variable : ctr
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda ti
	lsr
	lsr
	lsr
	lsr
	lsr
	; Calling storevariable
	sta ctr
	; LineNumber: 700
	cmp #$1 ;keep
	bne title_screen_casenext220
	; LineNumber: 700
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext220
	lda ctr
	cmp #$2 ;keep
	bne title_screen_casenext222
	; LineNumber: 701
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext222
	lda ctr
	cmp #$3 ;keep
	bne title_screen_casenext224
	; LineNumber: 702
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext224
	lda ctr
	cmp #$4 ;keep
	bne title_screen_casenext226
	; LineNumber: 703
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext226
	lda ctr
	cmp #$5 ;keep
	bne title_screen_casenext228
	; LineNumber: 704
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext228
	lda ctr
	cmp #$6 ;keep
	bne title_screen_casenext230
	; LineNumber: 705
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext230
	lda ctr
	cmp #$7 ;keep
	bne title_screen_casenext232
	; LineNumber: 706
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext232
	lda ctr
	cmp #$8 ;keep
	bne title_screen_casenext234
	; LineNumber: 707
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	jmp title_screen_caseend219
title_screen_casenext234
title_screen_caseend219
	; LineNumber: 711
	jmp title_screen_while192
title_screen_elsedoneblock195
title_screen_loopend197
	; LineNumber: 714
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx #$09
	ldy #$04
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq title_screen_elseblock238
title_screen_ConditionalTrueBlock237: ;Main true block ;keep 
	; LineNumber: 714
	; LineNumber: 716
	; Assigning single variable : READY_TO_PLAY
	lda #$1
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 718
	jmp title_screen_elsedoneblock239
title_screen_elseblock238
	; LineNumber: 719
	; LineNumber: 720
	; Assigning single variable : READY_TO_PLAY
	lda #$0
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 721
title_screen_elsedoneblock239
	; LineNumber: 723
	jsr ScrollY
	; LineNumber: 727
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 731
score_screen
	; LineNumber: 732
	jsr cls
	; LineNumber: 734
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock247
score_screen_ConditionalTrueBlock246: ;Main true block ;keep 
	; LineNumber: 734
	; LineNumber: 736
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 738
	jmp score_screen_elsedoneblock248
score_screen_elseblock247
	; LineNumber: 738
	; LineNumber: 740
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 741
score_screen_elsedoneblock248
	; LineNumber: 742
	; Copy full screen
	lda petscii_pointer
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
score_screen_outer253
	ldy #0
score_screen_inner254
	lda ($4c),y
	sta ($4e),y
	dey
	bne score_screen_inner254
	inc $4c+1
	inc $4e+1
	dex
	bne score_screen_outer253
	ldy #0
score_screen_final255
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne score_screen_final255
	; LineNumber: 743
	; memcpyfast
	ldx #12
score_screen_memcpy256
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy256
	; LineNumber: 744
	; memcpyfast
	ldx #12
score_screen_memcpy257
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy257
	; LineNumber: 745
	; memcpyfast
	ldx #12
score_screen_memcpy258
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy258
	; LineNumber: 746
	; memcpyfast
	ldx #12
score_screen_memcpy259
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy259
	; LineNumber: 749
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 750
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 752
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 753
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 755
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 755
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal264
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal264
	; LineNumber: 758
	jsr Key_Read
	; LineNumber: 761
score_screen_while265
score_screen_loopstart269
	; Binary clause Simplified: EQUALS
	lda ks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_elsedoneblock268
score_screen_ConditionalTrueBlock266: ;Main true block ;keep 
	; LineNumber: 762
	; LineNumber: 763
	jsr Key_Read
	; LineNumber: 764
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 766
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 767
	jsr frame_delay
	; LineNumber: 768
	jsr frame_delay
	; LineNumber: 769
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 770
	jsr frame_delay
	; LineNumber: 771
	jsr frame_delay
	; LineNumber: 772
	jmp score_screen_while265
score_screen_elsedoneblock268
score_screen_loopend270
	; LineNumber: 773
	jsr ScrollY
	; LineNumber: 774
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 780
	; LineNumber: 778
spr_p	= $08
	; LineNumber: 776
spr_x	dc.b	0
	; LineNumber: 776
spr_y	dc.b	0
	; LineNumber: 776
source_str	= $16
	; LineNumber: 776
spr_len	dc.b	0
sprite_xy_block273
sprite_xy
	; LineNumber: 781
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var276 = $54
	sta sprite_xy_rightvarInteger_var276
	sty sprite_xy_rightvarInteger_var276+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var279 = $56
	sta sprite_xy_rightvarInteger_var279
	sty sprite_xy_rightvarInteger_var279+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var279
sprite_xy_wordAdd277
	sta sprite_xy_rightvarInteger_var279
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var279+1
	tay
	lda sprite_xy_rightvarInteger_var279
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var276
sprite_xy_wordAdd274
	sta sprite_xy_rightvarInteger_var276
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var276+1
	tay
	lda sprite_xy_rightvarInteger_var276
	sta spr_p
	sty spr_p+1
	; LineNumber: 781
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy280
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy280
	; LineNumber: 783
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var283 = $54
	sta sprite_xy_rightvarInteger_var283
	sty sprite_xy_rightvarInteger_var283+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var286 = $56
	sta sprite_xy_rightvarInteger_var286
	sty sprite_xy_rightvarInteger_var286+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var289 = $58
	sta sprite_xy_rightvarInteger_var289
	sty sprite_xy_rightvarInteger_var289+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var289
sprite_xy_wordAdd287
	sta sprite_xy_rightvarInteger_var289
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var289+1
	tay
	lda sprite_xy_rightvarInteger_var289
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var286
sprite_xy_wordAdd284
	sta sprite_xy_rightvarInteger_var286
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var286+1
	tay
	lda sprite_xy_rightvarInteger_var286
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var283
sprite_xy_wordAdd281
	sta sprite_xy_rightvarInteger_var283
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var283+1
	tay
	lda sprite_xy_rightvarInteger_var283
	sta spr_p
	sty spr_p+1
	; LineNumber: 783
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy290
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy290
	; LineNumber: 785
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 793
	; LineNumber: 789
this_row	= $08
	; LineNumber: 789
target_strip	= $16
	; LineNumber: 790
iteration	dc.b	0
	; LineNumber: 791
homeplate	dc.b	$d3
init_vars_block291
init_vars
	; LineNumber: 794
	jsr cls
	; LineNumber: 795
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 796
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 797
	; Assigning single variable : READY_TO_PLAY
	lda #$0
	; Calling storevariable
	sta READY_TO_PLAY
	; LineNumber: 798
	jsr Key_SetupScreenCodes
	; LineNumber: 801
	
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 802
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 803
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
init_vars_outer292
	ldy #0
init_vars_inner293
	lda ($4c),y
	sta ($4e),y
	dey
	bne init_vars_inner293
	inc $4c+1
	inc $4e+1
	dex
	bne init_vars_outer292
	ldy #0
init_vars_final294
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne init_vars_final294
	; LineNumber: 804
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 805
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 819
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop295
	; LineNumber: 809
	; LineNumber: 811
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy307
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy307
	; LineNumber: 812
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd308
	inc target_strip+1
init_vars_WordAdd308
	; LineNumber: 813
	; memcpyfast
	ldy #39
init_vars_memcpy309
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy309
	; LineNumber: 814
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd310
	inc target_strip+1
init_vars_WordAdd310
	; LineNumber: 817
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd311
	inc this_row+1
init_vars_WordAdd311
	; LineNumber: 818
init_vars_forloopcounter297
init_vars_loopstart298
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop295
init_vars_loopdone312: ;keep
init_vars_forloopend296
init_vars_loopend299
	; LineNumber: 821
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy313
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy313
	; LineNumber: 822
	; memcpy
	ldx #0
init_vars_memcpy314
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy314
	; LineNumber: 823
	; memcpy
	ldx #0
init_vars_memcpy315
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy315
	; LineNumber: 824
	; memcpy
	ldx #0
init_vars_memcpy316
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy316
	; LineNumber: 825
	; memcpy
	ldx #0
init_vars_memcpy317
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy317
	; LineNumber: 826
	; memcpy
	ldx #0
init_vars_memcpy318
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy318
	; LineNumber: 827
	; memcpy
	ldx #0
init_vars_memcpy319
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy319
	; LineNumber: 829
	; memcpy
	ldx #0
init_vars_memcpy320
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy320
	; LineNumber: 830
	; memcpy
	ldx #0
init_vars_memcpy321
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy321
	; LineNumber: 831
	; memcpy
	ldx #0
init_vars_memcpy322
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy322
	; LineNumber: 832
	; memcpy
	ldx #0
init_vars_memcpy323
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy323
	; LineNumber: 836
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 837
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 839
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 840
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 842
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 843
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 845
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 846
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 848
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 849
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 850
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 852
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 853
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 855
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 856
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 858
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 859
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 860
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 861
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 864
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 865
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 867
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 868
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 869
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 870
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 872
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 873
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 875
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 876
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 877
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 879
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 880
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 883
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 884
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 885
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 886
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 887
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 888
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 889
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 893
move_obstacles
	; LineNumber: 896
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax326
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax326
	; LineNumber: 897
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 898
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 902
move_traffic
	; LineNumber: 905
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax329
	lda #$0
	sta traffic_x_rl
move_traffic_incmax329
	; LineNumber: 906
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 907
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 914
	; LineNumber: 912
char_under	dc.b	0
frog_ride_block330
frog_ride
	; LineNumber: 915
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 918
	cmp #$51 ;keep
	bne frog_ride_casenext332
	; LineNumber: 921
	; LineNumber: 922
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock337
frog_ride_ConditionalTrueBlock335: ;Main true block ;keep 
	; LineNumber: 923
	; LineNumber: 924
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 925
frog_ride_elsedoneblock337
	; LineNumber: 926
	jmp frog_ride_caseend331
frog_ride_casenext332
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext342
	; LineNumber: 929
	; LineNumber: 930
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock347
frog_ride_ConditionalTrueBlock345: ;Main true block ;keep 
	; LineNumber: 931
	; LineNumber: 932
	
; // (
	inc frog_x
	; LineNumber: 933
frog_ride_elsedoneblock347
	; LineNumber: 934
	jmp frog_ride_caseend331
frog_ride_casenext342
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext352
	; LineNumber: 937
	; LineNumber: 938
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock357
frog_ride_ConditionalTrueBlock355: ;Main true block ;keep 
	; LineNumber: 939
	; LineNumber: 940
	
; // ) 
	dec frog_x
	; LineNumber: 941
frog_ride_elsedoneblock357
	; LineNumber: 942
	jmp frog_ride_caseend331
frog_ride_casenext352
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext362
	; LineNumber: 945
	; LineNumber: 946
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock367
frog_ride_localsuccess370: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock367
frog_ride_ConditionalTrueBlock365: ;Main true block ;keep 
	; LineNumber: 947
	; LineNumber: 948
	
; // Crock body 
	inc frog_x
	; LineNumber: 949
frog_ride_elsedoneblock367
	; LineNumber: 951
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock376
frog_ride_localsuccess379: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock376
frog_ride_ConditionalTrueBlock374: ;Main true block ;keep 
	; LineNumber: 952
	; LineNumber: 953
	dec frog_x
	; LineNumber: 954
frog_ride_elsedoneblock376
	; LineNumber: 955
	jmp frog_ride_caseend331
frog_ride_casenext362
frog_ride_caseend331
	; LineNumber: 957
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 964
	; LineNumber: 961
strip_num	dc.b	0
	; LineNumber: 961
this_strip	dc.b	0
	; LineNumber: 962
this_source_offset	= $08
	; LineNumber: 963
game_move	dc.b	0
show_obstacles_block382
show_obstacles
	; LineNumber: 967
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var388 = $54
	sta show_obstacles_val_var388
	lda GAME_TICKS
	sec
show_obstacles_modulo389
	sbc show_obstacles_val_var388
	bcs show_obstacles_modulo389
	adc show_obstacles_val_var388
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock386
show_obstacles_ConditionalTrueBlock384: ;Main true block ;keep 
	; LineNumber: 968
	; LineNumber: 969
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 970
show_obstacles_elsedoneblock386
	; LineNumber: 973
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var397 = $54
	sta show_obstacles_val_var397
	lda GAME_TICKS
	sec
show_obstacles_modulo398
	sbc show_obstacles_val_var397
	bcs show_obstacles_modulo398
	adc show_obstacles_val_var397
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock393
show_obstacles_ConditionalTrueBlock392: ;Main true block ;keep 
	; LineNumber: 974
	; LineNumber: 976
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 977
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 979
	jmp show_obstacles_elsedoneblock394
show_obstacles_elseblock393
	; LineNumber: 980
	; LineNumber: 981
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 982
show_obstacles_elsedoneblock394
	; LineNumber: 1005
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop401
	; LineNumber: 986
	; LineNumber: 987
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 988
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var429 = $54
	sta show_obstacles_rightvarInteger_var429
	sty show_obstacles_rightvarInteger_var429+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var429
show_obstacles_wordAdd427
	sta show_obstacles_rightvarInteger_var429
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var429+1
	tay
	lda show_obstacles_rightvarInteger_var429
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 990
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var432 = $54
	sta show_obstacles_rightvarInteger_var432
	sty show_obstacles_rightvarInteger_var432+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var432
show_obstacles_wordAdd430
	sta show_obstacles_rightvarInteger_var432
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var432+1
	tay
	lda show_obstacles_rightvarInteger_var432
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 992
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock435
show_obstacles_ConditionalTrueBlock434: ;Main true block ;keep 
	; LineNumber: 993
	; LineNumber: 994
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd442
	inc this_source_offset+1
show_obstacles_WordAdd442
	; LineNumber: 996
	jmp show_obstacles_elsedoneblock436
show_obstacles_elseblock435
	; LineNumber: 997
	; LineNumber: 998
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd444
	inc this_source_offset+1
show_obstacles_WordAdd444
	; LineNumber: 999
show_obstacles_elsedoneblock436
	; LineNumber: 1000
	; memcpyfast
	ldy #39
show_obstacles_memcpy445
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy445
	; LineNumber: 1004
show_obstacles_forloopcounter403
show_obstacles_loopstart404
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone446
show_obstacles_loopnotdone447
	jmp show_obstacles_forloop401
show_obstacles_loopdone446
show_obstacles_forloopend402
show_obstacles_loopend405
	; LineNumber: 1025
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop448
	; LineNumber: 1007
	; LineNumber: 1008
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1009
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var476 = $54
	sta show_obstacles_rightvarInteger_var476
	sty show_obstacles_rightvarInteger_var476+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var476
show_obstacles_wordAdd474
	sta show_obstacles_rightvarInteger_var476
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var476+1
	tay
	lda show_obstacles_rightvarInteger_var476
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1010
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var479 = $54
	sta show_obstacles_rightvarInteger_var479
	sty show_obstacles_rightvarInteger_var479+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var479
show_obstacles_wordAdd477
	sta show_obstacles_rightvarInteger_var479
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var479+1
	tay
	lda show_obstacles_rightvarInteger_var479
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1012
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock482
show_obstacles_ConditionalTrueBlock481: ;Main true block ;keep 
	; LineNumber: 1013
	; LineNumber: 1014
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd489
	inc this_source_offset+1
show_obstacles_WordAdd489
	; LineNumber: 1016
	jmp show_obstacles_elsedoneblock483
show_obstacles_elseblock482
	; LineNumber: 1017
	; LineNumber: 1018
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd491
	inc this_source_offset+1
show_obstacles_WordAdd491
	; LineNumber: 1019
show_obstacles_elsedoneblock483
	; LineNumber: 1020
	; memcpyfast
	ldy #39
show_obstacles_memcpy492
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy492
	; LineNumber: 1024
show_obstacles_forloopcounter450
show_obstacles_loopstart451
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone493
show_obstacles_loopnotdone494
	jmp show_obstacles_forloop448
show_obstacles_loopdone493
show_obstacles_forloopend449
show_obstacles_loopend452
	; LineNumber: 1026
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock498
show_obstacles_ConditionalTrueBlock496: ;Main true block ;keep 
	; LineNumber: 1027
	; LineNumber: 1030
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1031
show_obstacles_elsedoneblock498
	; LineNumber: 1034
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1036
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1039
kill_frog
	; LineNumber: 1040
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1041
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1042
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1043
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 1044
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1045
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1046
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1047
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1048
	jsr burp
	; LineNumber: 1049
	dec player_lives
	; LineNumber: 1050
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1055
check_collisions
	; LineNumber: 1057
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 1063
	cmp frogcharA ;keep
	bne check_collisions_casenext505
	; LineNumber: 1067
	; LineNumber: 1068
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock510
check_collisions_ConditionalTrueBlock508: ;Main true block ;keep 
	; LineNumber: 1069
	; LineNumber: 1070
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1071
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1072
check_collisions_elsedoneblock510
	; LineNumber: 1073
	jmp check_collisions_caseend504
check_collisions_casenext505
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext513
	; LineNumber: 1075
	; LineNumber: 1076
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock518
check_collisions_ConditionalTrueBlock516: ;Main true block ;keep 
	; LineNumber: 1077
	; LineNumber: 1078
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1079
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1080
check_collisions_elsedoneblock518
	; LineNumber: 1081
	jmp check_collisions_caseend504
check_collisions_casenext513
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext521
	; LineNumber: 1084
	; LineNumber: 1085
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock526
check_collisions_ConditionalTrueBlock524: ;Main true block ;keep 
	; LineNumber: 1086
	; LineNumber: 1087
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1088
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1089
check_collisions_elsedoneblock526
	; LineNumber: 1090
	jmp check_collisions_caseend504
check_collisions_casenext521
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext529
	; LineNumber: 1093
	; LineNumber: 1094
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1095
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1096
	jmp check_collisions_caseend504
check_collisions_casenext529
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext531
	; LineNumber: 1099
	; LineNumber: 1100
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1101
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1102
	jmp check_collisions_caseend504
check_collisions_casenext531
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext533
	; LineNumber: 1108
	; LineNumber: 1109
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock538
check_collisions_localsuccess540: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock538
check_collisions_ConditionalTrueBlock536: ;Main true block ;keep 
	; LineNumber: 1110
	; LineNumber: 1111
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1112
check_collisions_elsedoneblock538
	; LineNumber: 1113
	jmp check_collisions_caseend504
check_collisions_casenext533
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext542
	; LineNumber: 1118
	; LineNumber: 1119
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1120
	jmp check_collisions_caseend504
check_collisions_casenext542
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext544
	; LineNumber: 1123
	; LineNumber: 1124
	jsr kill_frog
	; LineNumber: 1125
	jmp check_collisions_caseend504
check_collisions_casenext544
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext546
	; LineNumber: 1128
	; LineNumber: 1129
	jsr kill_frog
	; LineNumber: 1131
	jmp check_collisions_caseend504
check_collisions_casenext546
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext548
	; LineNumber: 1133
	; LineNumber: 1134
	jsr kill_frog
	; LineNumber: 1136
	jmp check_collisions_caseend504
check_collisions_casenext548
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext550
	; LineNumber: 1139
	; LineNumber: 1140
	jsr kill_frog
	; LineNumber: 1142
	jmp check_collisions_caseend504
check_collisions_casenext550
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext552
	; LineNumber: 1145
	; LineNumber: 1146
	jsr kill_frog
	; LineNumber: 1148
	jmp check_collisions_caseend504
check_collisions_casenext552
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext554
	; LineNumber: 1151
	; LineNumber: 1152
	jsr kill_frog
	; LineNumber: 1154
	jmp check_collisions_caseend504
check_collisions_casenext554
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext556
	; LineNumber: 1157
	; LineNumber: 1158
	jsr kill_frog
	; LineNumber: 1160
	jmp check_collisions_caseend504
check_collisions_casenext556
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext558
	; LineNumber: 1163
	; LineNumber: 1164
	jsr kill_frog
	; LineNumber: 1166
	jmp check_collisions_caseend504
check_collisions_casenext558
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext560
	; LineNumber: 1170
	; LineNumber: 1171
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1173
	jmp check_collisions_caseend504
check_collisions_casenext560
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext562
	; LineNumber: 1176
	; LineNumber: 1177
	jsr kill_frog
	; LineNumber: 1178
	jmp check_collisions_caseend504
check_collisions_casenext562
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext564
	; LineNumber: 1183
	; LineNumber: 1184
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1185
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1186
	jmp check_collisions_caseend504
check_collisions_casenext564
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext566
	; LineNumber: 1189
	; LineNumber: 1190
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed583
	jmp check_collisions_ConditionalTrueBlock569
check_collisions_localfailed583: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock571
check_collisions_ConditionalTrueBlock569: ;Main true block ;keep 
	; LineNumber: 1191
	; LineNumber: 1192
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd585
	inc player_score+1
check_collisions_WordAdd585
	; LineNumber: 1193
	inc FROGS_SAVED
	; LineNumber: 1194
	jsr ping
	; LineNumber: 1196
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock589
check_collisions_ConditionalTrueBlock588: ;Main true block ;keep 
	; LineNumber: 1197
	; LineNumber: 1199
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1201
	jmp check_collisions_elsedoneblock590
check_collisions_elseblock589
	; LineNumber: 1202
	; LineNumber: 1203
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1204
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1205
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1206
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1207
check_collisions_elsedoneblock590
	; LineNumber: 1208
check_collisions_elsedoneblock571
	; LineNumber: 1209
	jmp check_collisions_caseend504
check_collisions_casenext566
	; LineNumber: 1213
	; LineNumber: 1216
check_collisions_caseend504
	; LineNumber: 1217
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1227
game_loop
	; LineNumber: 1229
	jsr Key_SetupScreenCodes
	; LineNumber: 1234
	
; // Unit constants
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 1235
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 1236
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 1237
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 1240
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 1241
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 1242
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 1243
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 1246
game_loop_while597
game_loop_loopstart601
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed737
game_loop_localsuccess738: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed737
	jmp game_loop_ConditionalTrueBlock598
game_loop_localfailed737
	jmp game_loop_elsedoneblock600
game_loop_ConditionalTrueBlock598: ;Main true block ;keep 
	; LineNumber: 1247
	; LineNumber: 1249
	jsr Key_Read
	; LineNumber: 1251
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1252
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1253
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed755
	jmp game_loop_ConditionalTrueBlock741
game_loop_localfailed755: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock743
game_loop_ConditionalTrueBlock741: ;Main true block ;keep 
	; LineNumber: 1254
	; LineNumber: 1255
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock760
game_loop_ConditionalTrueBlock758: ;Main true block ;keep 
	; LineNumber: 1256
	; LineNumber: 1257
	dec frog_y
	; LineNumber: 1258
	inc player_score
	bne game_loop_incdec766
	inc player_score +1
game_loop_incdec766
	; LineNumber: 1259
game_loop_elsedoneblock760
	; LineNumber: 1260
game_loop_elsedoneblock743
	; LineNumber: 1262
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed782
	jmp game_loop_ConditionalTrueBlock768
game_loop_localfailed782: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock770
game_loop_ConditionalTrueBlock768: ;Main true block ;keep 
	; LineNumber: 1263
	; LineNumber: 1264
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock787
game_loop_ConditionalTrueBlock785: ;Main true block ;keep 
	; LineNumber: 1265
	; LineNumber: 1266
	inc frog_x
	; LineNumber: 1267
	inc player_score
	bne game_loop_incdec793
	inc player_score +1
game_loop_incdec793
	; LineNumber: 1268
game_loop_elsedoneblock787
	; LineNumber: 1269
game_loop_elsedoneblock770
	; LineNumber: 1271
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed809
	jmp game_loop_ConditionalTrueBlock795
game_loop_localfailed809: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock797
game_loop_ConditionalTrueBlock795: ;Main true block ;keep 
	; LineNumber: 1272
	; LineNumber: 1273
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock814
game_loop_ConditionalTrueBlock812: ;Main true block ;keep 
	; LineNumber: 1274
	; LineNumber: 1275
	inc frog_y
	; LineNumber: 1276
	inc player_score
	bne game_loop_incdec820
	inc player_score +1
game_loop_incdec820
	; LineNumber: 1277
game_loop_elsedoneblock814
	; LineNumber: 1278
game_loop_elsedoneblock797
	; LineNumber: 1279
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed836
	jmp game_loop_ConditionalTrueBlock822
game_loop_localfailed836: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock824
game_loop_ConditionalTrueBlock822: ;Main true block ;keep 
	; LineNumber: 1280
	; LineNumber: 1281
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock841
game_loop_ConditionalTrueBlock839: ;Main true block ;keep 
	; LineNumber: 1282
	; LineNumber: 1283
	dec frog_x
	; LineNumber: 1284
	inc player_score
	bne game_loop_incdec847
	inc player_score +1
game_loop_incdec847
	; LineNumber: 1285
game_loop_elsedoneblock841
	; LineNumber: 1286
game_loop_elsedoneblock824
	; LineNumber: 1289
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax849
	lda #$1
	sta GAME_TICKS
game_loop_incmax849
	; LineNumber: 1292
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1295
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1298
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock853
game_loop_ConditionalTrueBlock851: ;Main true block ;keep 
	; LineNumber: 1299
	; LineNumber: 1301
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1303
game_loop_elsedoneblock853
	; LineNumber: 1308
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed861
	jmp game_loop_ConditionalTrueBlock857
game_loop_localfailed861: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock859
game_loop_ConditionalTrueBlock857: ;Main true block ;keep 
	; LineNumber: 1309
	; LineNumber: 1310
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1311
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1312
game_loop_elsedoneblock859
	; LineNumber: 1315
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock865
game_loop_ConditionalTrueBlock864: ;Main true block ;keep 
	; LineNumber: 1316
	; LineNumber: 1317
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1319
	jmp game_loop_elsedoneblock866
game_loop_elseblock865
	; LineNumber: 1320
	; LineNumber: 1321
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1322
game_loop_elsedoneblock866
	; LineNumber: 1327
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1327
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal871
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal871
	; LineNumber: 1329
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1329
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal872
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal872
	; LineNumber: 1333
	jmp game_loop_while597
game_loop_elsedoneblock600
game_loop_loopend602
	; LineNumber: 1335
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : intro_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1338
intro_loop
	; LineNumber: 1340
intro_loop_while874
intro_loop_loopstart878
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne intro_loop_elsedoneblock877
intro_loop_ConditionalTrueBlock875: ;Main true block ;keep 
	; LineNumber: 1341
	; LineNumber: 1342
	jsr title_screen
	; LineNumber: 1343
	; Binary clause Simplified: EQUALS
	lda READY_TO_PLAY
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne intro_loop_elsedoneblock891
intro_loop_ConditionalTrueBlock889: ;Main true block ;keep 
	; LineNumber: 1342
	; LineNumber: 1343
	jsr help_screen
	; LineNumber: 1343
intro_loop_elsedoneblock891
	; LineNumber: 1344
	jmp intro_loop_while874
intro_loop_elsedoneblock877
intro_loop_loopend879
	; LineNumber: 1345
	rts
block1
	; LineNumber: 1350
	; Assigning single variable : is_80
	lda #$0
	; Calling storevariable
	sta is_80
	; LineNumber: 1351
	; Assigning single variable : is_80
	jsr is_80_columns
	; Calling storevariable
	sta is_80
	; LineNumber: 1354
	; Binary clause Simplified: EQUALS
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock897
MainProgram_ConditionalTrueBlock895: ;Main true block ;keep 
	; LineNumber: 1355
	; LineNumber: 1356
	jsr cursor_down
	; LineNumber: 1357
	jsr cursor_return
	; LineNumber: 1358
	jsr uppercase
	; LineNumber: 1359
	jsr cursor_graphic
	; LineNumber: 1360
	; Assigning single variable : _ptr
	lda #<sorry_80
	ldx #>sorry_80
	sta _ptr
	stx _ptr+1
	jsr basic_print
	; LineNumber: 1361
	jmp * ; loop like (�/%
	; LineNumber: 1362
MainProgram_elsedoneblock897
	; LineNumber: 1363
	; LineNumber: 1365
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1366
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1369
	jsr cls
	; LineNumber: 1371
MainProgram_while900
MainProgram_loopstart904
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock903
MainProgram_ConditionalTrueBlock901: ;Main true block ;keep 
	; LineNumber: 1372
	; LineNumber: 1374
	jsr intro_loop
	; LineNumber: 1375
	jsr init_vars
	; LineNumber: 1376
	jsr game_loop
	; LineNumber: 1377
	jsr score_screen
	; LineNumber: 1378
	jmp MainProgram_while900
MainProgram_elsedoneblock903
MainProgram_loopend905
	; LineNumber: 1382
	; End of program
	; Ending memory block
EndBlock410
help_screen_stringassignstr174	.dc "SPACE TO CONTINUE",0
