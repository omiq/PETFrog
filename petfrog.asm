 processor 6502
	org $400
	; Starting new memory block at $400
StartBlock400
	.byte    $0, $0E, $08, $0A, $00, $9E, $20
	.byte   $31,$30,$34,$30
	.byte     $00
	; Ending memory block
EndBlock400
	org $410
	; Starting new memory block at $410
StartBlock410
PETFrog
	; LineNumber: 1341
	jmp block1
	; LineNumber: 3
Key_temp	dc.b	0
	; LineNumber: 5
Key_keyState	dc.b	0
	; LineNumber: 7
Key_KeyRow = $e810
	; LineNumber: 8
Key_KeyRead = $e812
	; LineNumber: 9
Key_KeyInterrupt = $e813
	; LineNumber: 12
Key_keys	dc.b	 
	org Key_keys+10
	; LineNumber: 13
Key_keysLast	dc.b	 
	org Key_keysLast+10
	; LineNumber: 14
Key_keysPressed	dc.b	 
	org Key_keysPressed+10
	; LineNumber: 144
Key_screencodes	
	dc.b	$21, $23, $25, $26, 40, 69, 72, 74, 34
	dc.b	$24, $27, , 41, 255, 73, 75, $11, $05
	dc.b	$14, $15, $0f, 70, $37, $39, $17, $12, $19
	dc.b	$09, $10, 255, $38, $2f, $01, $04, $07, $0a
	dc.b	$0c, 255, $34, $36, $13, $06, $08, $0b, $3a
	dc.b	255, $35, $2a, $1a, $03, $02, $0d, $3b, 71
	dc.b	$31, $33, $18, $16, $0e, 44, $3f, 255, $32
	dc.b	$2b, 255, $00, $1d, 255, $3e, 255, $30, $2d
	dc.b	67, $1b, $20, $3c, 68, 255, $2e, $3d, 0
	; LineNumber: 30
KEYPRESS	dc.w	$ff
	; LineNumber: 33
n_key_up	dc.w	0
	; LineNumber: 33
n_key_down	dc.w	0
	; LineNumber: 33
n_key_left	dc.w	0
	; LineNumber: 33
n_key_right	dc.w	0
	; LineNumber: 33
key_up	dc.w	0
	; LineNumber: 33
key_down	dc.w	0
	; LineNumber: 33
key_left	dc.w	0
	; LineNumber: 33
key_right	dc.w	0
	; LineNumber: 40
PLAY_SOUND	dc.b	$01
	; LineNumber: 41
GAME_SPEED	dc.b	$00
	; LineNumber: 42
ALIVE	dc.b	$01
	; LineNumber: 43
WON_GAME	dc.b	$00
	; LineNumber: 44
FROGS_SAVED	dc.b	$00
	; LineNumber: 45
GAME_TICKS	dc.b	$00
	; LineNumber: 49
blk	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	$20, 0
	; LineNumber: 50
by	
	dc.b	$20, $02, $19, $20, $03, $08, $12, $09, $13
	dc.b	$20, $07, $01, $12, $12, $05, $14, $14, $20
	dc.b	$30, $31, $2f, $32, $30, $32, $31, $20, $20
	dc.b	$20, 0
	; LineNumber: 51
url	
	dc.b	$20, $00, $0d, $01, $0b, $05, $12, $08, $01
	dc.b	$03, $0b, $13, $20, $0d, $01, $0b, $05, $12
	dc.b	$08, $01, $03, $0b, $13, $2e, $03, $0f, $0d
	dc.b	$20, 0
	; LineNumber: 52
over	
	dc.b	$20, $07, $01, $0d, $05, $20, $0f, $16, $05
	dc.b	$12, $20, $20, 0
	; LineNumber: 53
score	
	dc.b	$20, $19, $0f, $15, $20, $13, $03, $0f, $12
	dc.b	$05, $04, $3a, 0
	; LineNumber: 54
space	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $13, $10
	dc.b	$01, $03, $05, $20, $14, $0f, $20, $03, $0f
	dc.b	$0e, $14, $09, $0e, $15, $05, $20, 0
	; LineNumber: 55
space2	
	dc.b	160, 144, 146, 133, 147, 147, 160, 147, 144
	dc.b	129, 131, 133, 160, 148, 143, 160, 131, 143
	dc.b	142, 148, 137, 142, 149, 133, 160, 0
	; LineNumber: 56
help	
	dc.b	$20, $10, $12, $05, $13, $13, $20, $08, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 57
help2	
	dc.b	$20, $10, $12, $05, $13, $13, $20, 136, $20
	dc.b	$06, $0f, $12, $20, $08, $05, $0c, $10, $20
	dc.b	$07, $15, $09, $04, $05, $20, $20, 0
	; LineNumber: 58
is_80	dc.b	0
	; LineNumber: 61
sorry_80		dc.b	147
	dc.b	14
	dc.b	"80 COLUMNS DETECTED"
	dc.b	13
	dc.b	"PLEASE CHOOSE 40 COLUMNS AND REBOOT"
	dc.b	0
	; LineNumber: 63
help_screen_array	
	dc.b	
	; LineNumber: 80
frogcharA	dc.b	$d6
	; LineNumber: 81
frogcharB	dc.b	$56
	; LineNumber: 82
frog_x	dc.b	$14
	; LineNumber: 82
frog_old_x	dc.b	$14
	; LineNumber: 83
frog_y	dc.b	$18
	; LineNumber: 83
frog_old_y	dc.b	$18
	; LineNumber: 84
previous_tile	dc.b	$20
	; LineNumber: 85
next_tile	dc.b	0
	; LineNumber: 86
player_lives	dc.b	$00
	; LineNumber: 87
player_score	dc.w	$00
	; LineNumber: 89
arr_crockr	dc.b $0c0, $0a2, $0dc, $0dc, $0dc, $0dc, $0dc, $062
	dc.b $079
	; LineNumber: 90
str_crockr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 92
arr_crockl	dc.b $079, $062, $0dc, $0dc, $0dc, $0dc, $0dc, $0a2
	dc.b $0c0
	; LineNumber: 93
str_crockl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 96
arr_logl	dc.b $0a8, $0a8, $0a8, $0a8, $0d1
	; LineNumber: 97
str_logl	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 99
arr_logr	dc.b $0d1, $0a9, $0a9, $0a9, $0a9
	; LineNumber: 100
str_logr	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 102
arr_turtles	dc.b $051, $051, $051, $051, $051
	; LineNumber: 103
str_turtles	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 105
arr_river_r	dc.b $06f, $064, $064, $06f, $064
	; LineNumber: 106
str_river_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 108
arr_river_l	dc.b $020, $064, $06f, $064, $064
	; LineNumber: 109
str_river_l	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 113
arr_carl	dc.b $0f0, $0cf, $0d0, $0e0
	; LineNumber: 114
str_cart	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 115
arr_carr	dc.b $0ed, $0d7, $0d7, $0a0
	; LineNumber: 116
str_carb	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 124
arr_truckb_r	dc.b $0a0, $0d7, $062, $0d7, $0f1, $0d7, $0fd, $0a0
	; LineNumber: 125
str_truckb_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 126
arr_truckt_r	dc.b $0e0, $060, $060, $060, $0fe, $0eb, $0ee, $0e0
	; LineNumber: 127
str_truckt_r	
	dc.b	$20, $20, $20, $20, $20, $20, $20, $20, $20
	dc.b	0 
	; LineNumber: 132
obstacles_y	dc.b $04, $05, $06, $07, $08, $0c, $0d, $0f
	dc.b $010, $012, $013, $015, $016
	; LineNumber: 133
strip_direction	dc.b $01, $00, $01, $00, $01, $01, $01, $01
	dc.b $01, $00, $00, $00, $00
	; LineNumber: 135
level_strips	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	dc.b 0, 0, 0, 0, 0, 0, 0, 0
	; LineNumber: 138
traffic_x_rl	dc.b	0
	; LineNumber: 138
traffic_x_lr	dc.b	0
	; LineNumber: 139
obstacles_x_rl	dc.b	0
	; LineNumber: 139
obstacles_x_lr	dc.b	0
	; LineNumber: 143
logo	dc.b $072, $049, $070, $06e, $070, $072, $06e, $055
	dc.b $049, $020, $020, $020, $020, $06b, $04b, $06b
	dc.b $020, $020, $05d, $020, $06b, $055, $055, $049
	dc.b $055, $049, $071, $020, $06d, $07d, $020, $071
	dc.b $020, $04b, $071, $04a, $04b, $04a, $05d, $078
	dc.b $078, $078, $078, $078, $078, $078, $078, $078
	dc.b $078, $078, $04a, $04b
	; LineNumber: 151
title_screen_frog_pointer	= $02
	; LineNumber: 152
title_screen_frog	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $06c, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $07b, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0f5, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $020, $020, $0a0, $0a0, $0a0, $0a0
	dc.b $07e, $020, $020, $07c, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07e, $0e2, $0e2, $0e2
	dc.b $07c, $0a0, $061, $020, $0a0, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $0e1, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $061, $020, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $076, $0a0, $020, $020, $020, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $0a0, $07b, $020, $020, $020
	dc.b $06c, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $062, $0a0, $0a0, $062, $020, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $062, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ec, $062, $062, $0fb, $0a0, $0a0, $0a0, $020
	dc.b $020, $068, $020, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07e, $020
	dc.b $020, $066, $05c, $020, $020, $020, $020, $066
	dc.b $066, $05c, $020, $020, $020, $020, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $020, $020, $020, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $07b
	dc.b $066, $020, $020, $066, $020, $020, $020, $020
	dc.b $068, $066, $020, $020, $020, $0e1, $0a0, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $068, $020, $066, $066, $020, $020, $066
	dc.b $066, $066, $05c, $020, $020, $0a0, $0a0, $0a0
	dc.b $020, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $0a0
	dc.b $066, $066, $020, $020, $066, $020, $020, $066
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $07b, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $0a0
	dc.b $066, $066, $066, $020, $066, $066, $020, $066
	dc.b $066, $020, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $062, $062, $062
	dc.b $062, $062, $062, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $0a0, $0a0
	dc.b $066, $066, $066, $066, $020, $066, $066, $020
	dc.b $066, $066, $066, $05c, $020, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $020, $020, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $0e2, $0e2, $0ec, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $020, $0e1, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $020, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $020
	dc.b $066, $066, $05c, $020, $066, $066, $066, $066
	dc.b $020, $020, $066, $066, $066, $066, $020, $020
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $068
	dc.b $066, $066, $020, $020, $020, $066, $066, $05c
	dc.b $020, $020, $066, $066, $066, $066, $066, $020
	dc.b $020, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066
	dc.b $066, $05c, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	dc.b $020, $020, $0e2, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $066, $066
	dc.b $066, $020, $020, $020, $0e2, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0ec, $020, $020, $066, $066, $066
	dc.b $066, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $066
	dc.b $066, $066, $066, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $066, $066, $066, $066, $066
	; LineNumber: 180
success	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07b, $06c, $020
	dc.b $07b, $07b, $07b, $07b, $07b, $07b, $07b, $062
	dc.b $06c, $062, $06c, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $062, $07b, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $07b
	dc.b $07e, $07c, $07c, $07c, $07c, $07b, $07e, $07f
	dc.b $07c, $07b, $061, $061, $061, $0ec, $0fe, $0ff
	dc.b $0fc, $07f, $0a0, $0fe, $0fe, $0fe, $0fc, $0a0
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $07e, $020
	dc.b $07b, $07e, $0ff, $07c, $07c, $07b, $07f, $07e
	dc.b $061, $061, $061, $061, $061, $0fc, $07f, $07f
	dc.b $0fc, $0fb, $0fe, $0fe, $0fe, $07f, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $06c, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $0fc, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0ff, $020, $020, $061, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $062
	dc.b $07b, $020, $020, $020, $020, $0a0, $020, $020
	dc.b $0a0, $020, $020, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $07b, $0fe, $061, $020, $020, $020, $020
	dc.b $0fe, $0a0, $0fc, $020, $020, $020, $0fe, $0e2
	dc.b $0fb, $020, $020, $020, $020, $0a0, $07b, $06c
	dc.b $0a0, $062, $06c, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $0e2, $0e1, $07e, $020, $020, $020, $0e1
	dc.b $0ec, $020, $07c, $061, $020, $0e1, $07e, $062
	dc.b $07c, $061, $020, $020, $020, $0a0, $0a0, $0ec
	dc.b $020, $0fb, $0a0, $0a0, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07f, $062, $0ec, $020, $020, $020, $020, $0e1
	dc.b $061, $0e1, $020, $061, $020, $0e1, $020, $0fb
	dc.b $020, $0fc, $020, $020, $020, $07c, $07e, $020
	dc.b $062, $020, $07c, $07e, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $062, $062, $07b, $020, $020, $06c, $062, $07b
	dc.b $0fc, $020, $06c, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $0fe, $0ec, $07e, $020, $020, $020, $020, $06c
	dc.b $062, $07b, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07e, $020, $0fb, $020, $020, $0a0, $0ec, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fe, $0a0, $07b, $020, $020, $020, $0fb
	dc.b $0a0, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $07b, $020, $0fe, $020, $020, $0a0, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $07f, $0a0, $061, $020, $020, $020, $0fe
	dc.b $0a0, $062, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $0fb, $0a0, $07e, $020, $020, $0fe, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07c, $0fb, $0a0, $061, $020, $020, $07c, $0e2
	dc.b $0e2, $07e, $020, $020, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $07b, $020, $06c, $020, $020, $0fb, $07b, $020
	dc.b $020, $020, $06c, $0a0, $0ff, $0fc, $020, $020
	dc.b $020, $020, $0fe, $07e, $020, $020, $062, $062
	dc.b $07b, $020, $020, $06c, $020, $0e1, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $0e1
	dc.b $020, $020, $0a0, $020, $020, $020, $0fb, $0a0
	dc.b $0fc, $062, $062, $062, $062, $062, $062, $062
	dc.b $0a0, $0a0, $07e, $020, $020, $0fe, $0a0, $0a0
	dc.b $0a0, $020, $020, $0a0, $020, $0fe, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $07c
	dc.b $062, $0ff, $07c, $07b, $020, $020, $020, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0a0, $0a0, $0e2
	dc.b $0e2, $020, $020, $020, $020, $0a0, $07e, $0fb
	dc.b $0a0, $061, $06c, $0a0, $020, $0a0, $0a0, $0a0
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0ec, $020, $07c
	dc.b $0a0, $0a0, $0a0, $0e2, $020, $0a0, $0a0, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $07b, $06c, $020, $07b, $07b
	dc.b $07b, $07b, $07b, $07b, $07b, $062, $06c, $07b
	dc.b $062, $062, $062, $062, $062, $062, $062, $062
	dc.b $062, $062, $062, $062, $0fe, $0a0, $0a0, $07e
	dc.b $020, $020, $020, $020, $06c, $020, $07e, $07c
	dc.b $07c, $07c, $07c, $06c, $07e, $0ff, $07b, $07f
	dc.b $0e1, $0e1, $0e1, $0e1, $07f, $061, $0fc, $0fb
	dc.b $07f, $0fc, $0fc, $0fc, $0a0, $0fe, $0a0, $0fb
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0ec, $020
	dc.b $020, $020, $020, $020, $020, $020, $07c, $020
	dc.b $07e, $07e, $07e, $07e, $07c, $020, $07c, $07c
	dc.b $07c, $07c, $07c, $07c, $07e, $0e2, $07c, $0e2
	dc.b $07e, $07e, $07e, $0e2, $07c, $0e2, $07c, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $07e, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 208
rip	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $06c, $062
	dc.b $062, $07b, $020, $06c, $0a0, $0a0, $0a0, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $07c, $0fb, $062, $0a0, $07e, $062, $07b, $0fb
	dc.b $061, $020, $020, $020, $020, $020, $020, $062
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0fc, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07f, $0a0
	dc.b $0a0, $07b, $0a0, $061, $0fe, $0a0, $0a0, $0e1
	dc.b $0a0, $020, $020, $020, $020, $06c, $0ec, $07e
	dc.b $062, $062, $07b, $020, $06c, $062, $07c, $0fc
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0e1, $061, $0fe, $0ec
	dc.b $0e2, $0fc, $07c, $06c, $0ec, $062, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $0ec, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $062, $06c, $062, $07c
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $07c, $0fc, $0e1, $06c
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $061, $0fc
	dc.b $0e1, $0fc, $020, $020, $0e1, $07f, $0a0, $0ec
	dc.b $0fb, $0a0, $0a0, $0a0, $0a0, $07b, $062, $07b
	dc.b $0fb, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $06c, $061, $0a0, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $061, $0a0, $07b, $020, $0a0, $0e1, $0a0, $06c
	dc.b $07b, $061, $0e1, $0a0, $0a0, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0ec, $06c, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0a0, $0a0
	dc.b $0a0, $0e1, $061, $0a0, $061, $0a0, $061, $07c
	dc.b $06c, $07e, $0fe, $0a0, $0a0, $061, $0e2, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $07e, $020
	dc.b $0e1, $061, $0fb, $020, $020, $020, $0e1, $0a0
	dc.b $0a0, $0e1, $0a0, $0a0, $07f, $0ec, $06c, $07b
	dc.b $0ec, $020, $0ec, $020, $0e1, $061, $0fb, $0fc
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $061, $0a0, $020, $020
	dc.b $07b, $0a0, $0fe, $07b, $0a0, $0fc, $07b, $0a0
	dc.b $061, $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0fe
	dc.b $0a0, $0fe, $07e, $0fe, $020, $061, $07b, $0e2
	dc.b $0e1, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fc, $0fb, $062, $0fe
	dc.b $0fc, $0e1, $0a0, $061, $0a0, $0a0, $0a0, $0fe
	dc.b $06c, $0a0, $0a0, $061, $0fe, $0a0, $0a0, $0a0
	dc.b $0a0, $07e, $06c, $020, $0e1, $07e, $0fb, $061
	dc.b $0a0, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $0fb, $0ff, $0fb, $0a0
	dc.b $0a0, $062, $07c, $06c, $0a0, $0a0, $0a0, $07e
	dc.b $0fe, $0a0, $0a0, $07e, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0fc, $0a0, $0a0, $0a0, $0e1, $062, $020
	dc.b $0ec, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $062, $07c
	dc.b $0e2, $0fb, $0a0, $0a0, $0a0, $0ec, $07e, $0fe
	dc.b $0a0, $0a0, $0a0, $0e1, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $06c, $07b, $0e1
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $07c, $0a0, $0a0
	dc.b $0a0, $0fc, $062, $062, $062, $062, $0a0, $0e2
	dc.b $0e2, $0fb, $0ec, $0ec, $020, $06c, $0fe, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0ec, $020, $07e, $0fe
	dc.b $07e, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0a0, $0fc
	dc.b $020, $020, $07e, $020, $020, $0fe, $020, $07c
	dc.b $0a0, $0ec, $0a0, $0a0, $061, $0fb, $061, $061
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $07b, $020
	dc.b $06c, $0e1, $062, $0e1, $06c, $0e1, $061, $0fc
	dc.b $07c, $061, $07b, $0fb, $062, $07b, $06c, $0a0
	dc.b $0ec, $0e2, $0e2, $0a0, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $0a0, $0fc, $0e1
	dc.b $0e1, $07b, $0a0, $0fe, $0e1, $07c, $0fc, $0e1
	dc.b $0fc, $0fb, $0e1, $07b, $0fc, $0fe, $0e2, $06c
	dc.b $020, $062, $0fe, $07e, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0a0, $0e1
	dc.b $0a0, $0a0, $0a0, $0a0, $0fe, $061, $0fb, $0e1
	dc.b $0a0, $061, $0e1, $061, $0e1, $07e, $06c, $061
	dc.b $0fe, $07e, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $0fc, $0fe
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0fe, $0a0, $0a0, $0fc, $0a0, $0fc
	dc.b $061, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	; LineNumber: 237
petscii_pointer	=      $04
	; LineNumber: 271
level2	dc.b $0cc, $0ef, $0fa, $013, $03, $0f, $012, $05
	dc.b $03a, $039, $039, $039, $0cc, $0ef, $0ef, $0ef
	dc.b $0a0, $090, $085, $094, $086, $092, $08f, $087
	dc.b $0a0, $0ef, $0ef, $0ef, $0ef, $0fa, $0c, $09
	dc.b $016, $05, $013, $03a, $033, $0cc, $0ef, $0fa
	dc.b $020, $068, $068, $020, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $020, $068, $068, $068, $068, $068
	dc.b $068, $068, $068, $068, $068, $068, $068, $020
	dc.b $068, $068, $068, $068, $068, $020, $068, $020
	dc.b $066, $05c, $020, $020, $020, $020, $066, $066
	dc.b $020, $020, $020, $020, $020, $066, $066, $020
	dc.b $020, $020, $020, $020, $066, $066, $066, $020
	dc.b $020, $020, $020, $066, $066, $020, $020, $020
	dc.b $020, $066, $066, $020, $020, $020, $020, $05c
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $020
	dc.b $066, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $068, $068, $068
	dc.b $068, $068, $020, $020, $020, $020, $020, $020
	dc.b $020, $020, $020, $020, $020, $020, $020, $068
	dc.b $068, $068, $020, $020, $020, $020, $068, $066
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3, $0c3
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad, $0ad
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0, $0a0
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2, $0e2
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	dc.b $066, $066, $066, $066, $066, $066, $066, $066
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
initdiv16x8_divisor = $4c     ;$59 used for hi-byte
initdiv16x8_dividend = $4e	  ;$fc used for hi-byte
initdiv16x8_remainder = $50	  ;$fe used for hi-byte
initdiv16x8_result = $4e ;save memory by reusing divident to store the result
divide16x8	lda #0	        ;preset remainder to 0
	sta initdiv16x8_remainder
	sta initdiv16x8_remainder+1
	ldx #16	        ;repeat for each bit: ...
divloop16	asl initdiv16x8_dividend	;dividend lb & hb*2, msb -> Carry
	rol initdiv16x8_dividend+1
	rol initdiv16x8_remainder	;remainder lb & hb * 2 + msb from carry
	rol initdiv16x8_remainder+1
	lda initdiv16x8_remainder
	sec
	sbc initdiv16x8_divisor	;substract divisor to see if it fits in
	tay	        ;lb result -> Y, for we may need it later
	lda initdiv16x8_remainder+1
	sbc initdiv16x8_divisor+1
	bcc skip16	;if carry=0 then divisor didn't fit in yet
	sta initdiv16x8_remainder+1	;else save substraction result as new remainder,
	sty initdiv16x8_remainder
	inc initdiv16x8_result	;and INCrement result cause divisor fit in 1 times
skip16	dex
	bne divloop16
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init16x8mul
	;    Procedure type : Built-in function
	;    Requires initialization : no
mul16x8_num1Hi = $4c
mul16x8_num1 = $4e
mul16x8_num2 = $50
mul16x8_procedure
	lda #$00
	ldy #$00
	beq mul16x8_enterLoop
mul16x8_doAdd
	clc
	adc mul16x8_num1
	tax
	tya
	adc mul16x8_num1Hi
	tay
	txa
mul16x8_loop
	asl mul16x8_num1
	rol mul16x8_num1Hi
mul16x8_enterLoop  ; accumulating multiply entry point (enter with .A=lo, .Y=hi)
	lsr mul16x8_num2
	bcs mul16x8_doAdd
	bne mul16x8_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init8x8div
	;    Procedure type : Built-in function
	;    Requires initialization : no
div8x8_c = $4c
div8x8_d = $4e
div8x8_e = $50
	; Normal 8x8 bin div
div8x8_procedure
	lda #$00
	ldx #$07
	clc
div8x8_loop1 rol div8x8_d
	rol
	cmp div8x8_c
	bcc div8x8_loop2
	sbc div8x8_c
div8x8_loop2 dex
	bpl div8x8_loop1
	rol div8x8_d
	lda div8x8_d
div8x8_def_end
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initeightbitmul
	;    Procedure type : Built-in function
	;    Requires initialization : no
multiplier = $4c
multiplier_a = $4e
multiply_eightbit
	cpx #$00
	beq mul_end
	dex
	stx $4e
	lsr
	sta multiplier
	lda #$00
	ldx #$08
mul_loop
	bcc mul_skip
mul_mod
	adc multiplier_a
mul_skip
	ror
	ror multiplier
	dex
	bne mul_loop
	ldx multiplier
	rts
mul_end
	txa
	rts
initeightbitmul_multiply_eightbit2
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initmoveto
	;    Procedure type : Built-in function
	;    Requires initialization : no
	jmp initmoveto_moveto3
screenmemory =  $fe
colormemory =  $fc
screen_x = $4c
screen_y = $4e
SetScreenPosition
	sta screenmemory+1
	lda #0
	sta screenmemory
	ldy screen_y
	beq sydone
syloop
	clc
	adc #80
	bcc sskip
	inc screenmemory+1
sskip
	dey
	bne syloop
sydone
	ldx screen_x
	beq sxdone
	clc
	adc screen_x
	bcc sxdone
	inc screenmemory+1
sxdone
	sta screenmemory
	rts
initmoveto_moveto3
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintdecimal
	;    Procedure type : Built-in function
	;    Requires initialization : no
ipd_div_hi dc.b 0
ipd_div_lo dc.b 0
init_printdecimal_div10
	ldx #$11
	lda #$00
	clc
init_printdecimal_loop
	rol
	cmp #$0A
	bcc init_printdecimal_skip
	sbc #$0A
init_printdecimal_skip
	rol ipd_div_lo
	rol ipd_div_hi
	dex
	bne init_printdecimal_loop
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : initprintstring
	;    Procedure type : User-defined procedure
print_text = $4c
print_number_text .dc "    ",0
printstring
	ldy #0
printstringloop
	lda (print_text),y
	cmp #0 ;keep
	beq printstring_done
	cmp #64
	bcc printstring_skip
	sec
	sbc #64
printstring_skip
	sta (screenmemory),y
	iny
	dex
	cpx #0
	beq printstring_done
	jmp printstringloop
printstring_done
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key__GetKeyOffset
	;    Procedure type : User-defined procedure
	; LineNumber: 175
	; LineNumber: 174
	; LineNumber: 174
Key__GetKeyOffset_block4
Key__GetKeyOffset
	; LineNumber: 178
	; ****** Inline assembler section
	
	; pass with _a containing key to check 1, 2, 4, 8, 16, 32, 64, 128
	; and y the row offset 0 - 9
	tax ; temp store key
	
	tya ; multiply row offset by 8 to find starting pos in array
	asl
	asl
	asl ; *8
	sta TEMP_VAR1
	
	; use temporary variable as a pointer
	lda #>Key_screencodes
	sta TEMP_VAR2+1 ; high byte
	lda #<Key_screencodes
	sta TEMP_VAR2 ; low byte
	
	clc
	adc TEMP_VAR1
	sta TEMP_VAR2
	bcc getKey_NoOverflow
	inc TEMP_VAR2+1 ; byte overflow, update high byte
	
getKey_NoOverflow
	; then work out the offest 0 - 7
	txa ; the key
	
	ldy #0  ; count the number of shifts
	ldx #8	; test all 8 bits
getKey_testLoop
	lsr ; bit put in carry
	bcs getKey_foundBit
	iny	; counter for next bit to test
	dex	; 
	bne getKey_testLoop
	
getKey_foundBit
	; x has the bit 0-7 or 8 if not found
	cpy #8
	beq getKey_NotFound
	
	lda (TEMP_VAR2),y  ; load screencode + bit offset
	rts 
	
getKey_NotFound
	lda #KEY_NOKEY ; not found
	
	; LineNumber: 230
	rts
	;*
; //Read the full 10 row keyboard matrix 
; //and populate the keyboard flags
; //*
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Read
	;    Procedure type : User-defined procedure
	; LineNumber: 261
Key_Read
	; LineNumber: 263
	; Assigning single variable : Key_keyState
	lda #$0
	; Calling storevariable
	sta Key_keyState
	; LineNumber: 292
	
; // row to test
	; Assigning single variable : Key_temp
	; Calling storevariable
	sta Key_temp
Key_Read_forloop6
	; LineNumber: 266
	; LineNumber: 268
	; Assigning single variable : Key_KeyRow
	lda Key_temp
	; Calling storevariable
	sta Key_KeyRow
	; LineNumber: 270
	; ****** Inline assembler section
		lda Key_KeyRead ; get bits
		eor #$ff ; invert so the below works
		ldx Key_temp
		sta Key_keys,x
		eor Key_keysLast,x
		and Key_keys,x
		sta Key_keysPressed,x
		lda Key_keys,x
		sta Key_keysLast,x
		
		; record if no key pressed
		clc
		adc Key_keyState
		sta Key_keyState
		
		
	; LineNumber: 291
Key_Read_forloopcounter8
Key_Read_loopstart9
	; Compare is onpage
	inc Key_temp
	lda #$a
	cmp Key_temp ;keep
	bne Key_Read_forloop6
Key_Read_loopdone13: ;keep
Key_Read_forloopend7
Key_Read_loopend10
	; LineNumber: 293
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_Pressed
	;    Procedure type : User-defined procedure
	; LineNumber: 309
	; LineNumber: 308
Key_Pressed_block14
Key_Pressed
	; LineNumber: 311
	; ****** Inline assembler section
	
	sty Key_temp
	lda Key_keysPressed,x
	and Key_temp 	; contains column 
	
	; LineNumber: 319
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Key_SetupScreenCodes
	;    Procedure type : User-defined procedure
	; LineNumber: 342
Key_SetupScreenCodes
	; LineNumber: 344
	; Assigning memory location
	; Assigning single variable : $5e
	; Load Unknown type array
	ldx #$0
	lda Key_screencodes,x
	; Calling storevariable
	sta $5e
	; LineNumber: 346
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : Crt_WaitVblStart
	;    Procedure type : User-defined procedure
	; LineNumber: 17
Crt_WaitVblStart
	; LineNumber: 18
	; ****** Inline assembler section
    
waitVblStart
    lda $e840
    and #%00100000
    ;cmp #%00100000
    beq waitVblStart
    
	; LineNumber: 26
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cls
	;    Procedure type : User-defined procedure
	; LineNumber: 315
cls
	; LineNumber: 316
	; Clear screen with offset
	lda #$20
	ldx #$fa
cls_clearloop18
	dex
	sta $0000+$8000,x
	sta $00fa+$8000,x
	sta $01f4+$8000,x
	sta $02ee+$8000,x
	sta $03e8+$8000,x
	sta $04e2+$8000,x
	sta $05dc+$8000,x
	sta $06d6+$8000,x
	bne cls_clearloop18
	; LineNumber: 317
	; MoveTo optimization
	lda #$00
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 318
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : _ti
	;    Procedure type : User-defined procedure
	; LineNumber: 323
	; LineNumber: 322
ti_temp	dc.w	0
_ti_block19
_ti
	; LineNumber: 324
	; Assigning single variable : ti_temp
	ldy #0
	lda #$0
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 325
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var22 = $54
	sta _ti_rightvarInteger_var22
	sty _ti_rightvarInteger_var22+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8D + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	sta mul16x8_num1
	sty mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var22
_ti_wordAdd20
	sta _ti_rightvarInteger_var22
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var22+1
	tay
	lda _ti_rightvarInteger_var22
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 326
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var25 = $54
	sta _ti_rightvarInteger_var25
	sty _ti_rightvarInteger_var25+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	; Peek
	lda $8E + $0
	sta mul16x8_num1
	lda #0
	sta mul16x8_num1Hi
	; Integer constant assigning
	ldy #$01
	lda #$00
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var25
_ti_wordAdd23
	sta _ti_rightvarInteger_var25
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var25+1
	tay
	lda _ti_rightvarInteger_var25
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 327
	; Assigning single variable : ti_temp
	; Generic 16 bit op
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
_ti_rightvarInteger_var28 = $54
	sta _ti_rightvarInteger_var28
	sty _ti_rightvarInteger_var28+1
	; Peek
	lda $8F + $0
	; Low bit binop:
	clc
	adc _ti_rightvarInteger_var28
_ti_wordAdd26
	sta _ti_rightvarInteger_var28
	; High-bit binop
	tya
	adc _ti_rightvarInteger_var28+1
	tay
	lda _ti_rightvarInteger_var28
	; Calling storevariable
	sta ti_temp
	sty ti_temp+1
	; LineNumber: 329
	; LineNumber: 330
	; integer assignment NodeVar
	ldy ti_temp+1 ; Next one
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : uppercase
	;    Procedure type : User-defined procedure
	; LineNumber: 333
uppercase
	; LineNumber: 334
	; Poke
	; Optimization: shift is zero
	lda #$c
	sta $E84C
	; LineNumber: 335
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_return
	;    Procedure type : User-defined procedure
	; LineNumber: 354
cursor_return
	; LineNumber: 356
	; Assigning register : _a
	lda #$d
	; LineNumber: 357
	jsr $FFD2
	; LineNumber: 359
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_down
	;    Procedure type : User-defined procedure
	; LineNumber: 362
cursor_down
	; LineNumber: 364
	; Assigning register : _a
	lda #$11
	; LineNumber: 365
	jsr $FFD2
	; LineNumber: 367
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : cursor_graphic
	;    Procedure type : User-defined procedure
	; LineNumber: 370
cursor_graphic
	; LineNumber: 372
	; Assigning register : _a
	lda #$8e
	; LineNumber: 373
	jsr $FFD2
	; LineNumber: 375
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : basic_print
	;    Procedure type : User-defined procedure
	; LineNumber: 380
	; LineNumber: 379
next_ch	dc.b	0
	; LineNumber: 377
_ptr	=      $08
basic_print_block33
basic_print
	; LineNumber: 382
	; Assigning single variable : next_ch
	lda #$0
	; Calling storevariable
	sta next_ch
	; LineNumber: 383
basic_print_while34
basic_print_loopstart38
	; Binary clause Simplified: NOTEQUALS
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq basic_print_elsedoneblock37
basic_print_ConditionalTrueBlock35: ;Main true block ;keep 
	; LineNumber: 383
	; LineNumber: 385
	; Assigning register : _a
	; Load pointer array
	ldy next_ch
	lda (_ptr),y
	; LineNumber: 386
	jsr $FFD2
	; LineNumber: 387
	inc next_ch
	; LineNumber: 388
	jmp basic_print_while34
basic_print_elsedoneblock37
basic_print_loopend39
	; LineNumber: 390
	jsr cursor_return
	; LineNumber: 391
	jsr cursor_down
	; LineNumber: 393
	rts
	
; // Hacky way to check for 80 column screen
	; NodeProcedureDecl -1
	; ***********  Defining procedure : is_80_columns
	;    Procedure type : User-defined procedure
	; LineNumber: 419
	; LineNumber: 416
char	dc.b	0
	; LineNumber: 417
test_string		dc.b	147
	dc.b	17
	dc.b	43
	dc.b	0
	; LineNumber: 418
screen_pointer	=      $08
is_80_columns_block44
is_80_columns
	; LineNumber: 421
	; Assigning single variable : screen_pointer
	lda #$00
	ldx #$80
	sta screen_pointer
	stx screen_pointer+1
	; LineNumber: 428
	; Assigning single variable : char
	lda #$0
	; Calling storevariable
	sta char
is_80_columns_forloop45
	; LineNumber: 424
	; LineNumber: 425
	; Assigning register : _a
	; Load Byte array
	ldx char
	lda test_string,x
	; LineNumber: 426
	jsr $FFD2
	; LineNumber: 427
is_80_columns_forloopcounter47
is_80_columns_loopstart48
	; Compare is onpage
	inc char
	lda #$3
	cmp char ;keep
	bne is_80_columns_forloop45
is_80_columns_loopdone52: ;keep
is_80_columns_forloopend46
is_80_columns_loopend49
	; LineNumber: 429
	; Binary clause Simplified: EQUALS
	; Load pointer array
	ldy #$50
	lda (screen_pointer),y
	; Compare with pure num / var optimization
	cmp #$2b;keep
	bne is_80_columns_elseblock55
is_80_columns_ConditionalTrueBlock54: ;Main true block ;keep 
	; LineNumber: 430
	; LineNumber: 431
	lda #$1
	rts
	; LineNumber: 433
	jmp is_80_columns_elsedoneblock56
is_80_columns_elseblock55
	; LineNumber: 434
	; LineNumber: 435
	lda #$0
	rts
	; LineNumber: 436
is_80_columns_elsedoneblock56
	; LineNumber: 438
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sleep_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 444
	; LineNumber: 442
_old_ti	dc.w	0
	; LineNumber: 442
_new_ti	dc.w	0
sleep_delay_block61
sleep_delay
	; LineNumber: 446
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 447
	; Assigning single variable : _old_ti
	; integer assignment NodeVar
	ldy _new_ti+1 ; Next one
	; Calling storevariable
	sta _old_ti
	sty _old_ti+1
	; LineNumber: 449
sleep_delay_while62
sleep_delay_loopstart66
	; Binary clause INTEGER: EQUALS
	; Compare INTEGER with pure num / var optimization. GREATER. 
	lda _new_ti+1   ; compare high bytes
	cmp _old_ti+1 ;keep
	bne sleep_delay_elsedoneblock65
	lda _new_ti
	cmp _old_ti ;keep
	bne sleep_delay_elsedoneblock65
	jmp sleep_delay_ConditionalTrueBlock63
sleep_delay_ConditionalTrueBlock63: ;Main true block ;keep 
	; LineNumber: 450
	; LineNumber: 451
	; Assigning single variable : _new_ti
	ldy #0
	jsr _ti
	; Calling storevariable
	sta _new_ti
	sty _new_ti+1
	; LineNumber: 452
	jmp sleep_delay_while62
sleep_delay_elsedoneblock65
sleep_delay_loopend67
	; LineNumber: 454
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frame_delay
	;    Procedure type : User-defined procedure
	; LineNumber: 459
	; LineNumber: 458
sleepx	dc.b	0
frame_delay_block70
frame_delay
	; LineNumber: 464
	; Assigning single variable : sleepx
	lda #$1
	; Calling storevariable
	sta sleepx
frame_delay_forloop71
	; LineNumber: 461
	; LineNumber: 462
	jsr sleep_delay
	; LineNumber: 463
frame_delay_forloopcounter73
frame_delay_loopstart74
	; Compare is onpage
	inc sleepx
	lda #$2
	cmp sleepx ;keep
	bcs frame_delay_forloop71
frame_delay_loopdone78: ;keep
frame_delay_forloopend72
frame_delay_loopend75
	; LineNumber: 465
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : getat
	;    Procedure type : User-defined procedure
	; LineNumber: 494
	; LineNumber: 492
szp	=      $08
	; LineNumber: 490
sx	dc.b	0
	; LineNumber: 490
sy	dc.b	0
getat_block79
getat
	; LineNumber: 495
	; Assigning single variable : szp
	; Generic 16 bit op
	ldy #0
	lda sx
getat_rightvarInteger_var82 = $54
	sta getat_rightvarInteger_var82
	sty getat_rightvarInteger_var82+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
getat_rightvarInteger_var85 =      $56
	sta getat_rightvarInteger_var85
	sty getat_rightvarInteger_var85+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda sy
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var85
getat_wordAdd83
	sta getat_rightvarInteger_var85
	; High-bit binop
	tya
	adc getat_rightvarInteger_var85+1
	tay
	lda getat_rightvarInteger_var85
	; Low bit binop:
	clc
	adc getat_rightvarInteger_var82
getat_wordAdd80
	sta getat_rightvarInteger_var82
	; High-bit binop
	tya
	adc getat_rightvarInteger_var82+1
	tay
	lda getat_rightvarInteger_var82
	sta szp
	sty szp+1
	; LineNumber: 496
	; LineNumber: 497
	; Load pointer array
	ldy #$0
	lda (szp),y
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : textat
	;    Procedure type : User-defined procedure
	; LineNumber: 503
	; LineNumber: 501
zp	=      $08
	; LineNumber: 499
x	dc.b	0
	; LineNumber: 499
y	dc.b	0
	; LineNumber: 499
this_str	=      $16
	; LineNumber: 499
str_len	dc.b	0
textat_block86
textat
	; LineNumber: 504
	; Assigning single variable : zp
	; Generic 16 bit op
	ldy #0
	lda x
textat_rightvarInteger_var89 = $54
	sta textat_rightvarInteger_var89
	sty textat_rightvarInteger_var89+1
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
textat_rightvarInteger_var92 =      $56
	sta textat_rightvarInteger_var92
	sty textat_rightvarInteger_var92+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var92
textat_wordAdd90
	sta textat_rightvarInteger_var92
	; High-bit binop
	tya
	adc textat_rightvarInteger_var92+1
	tay
	lda textat_rightvarInteger_var92
	; Low bit binop:
	clc
	adc textat_rightvarInteger_var89
textat_wordAdd87
	sta textat_rightvarInteger_var89
	; High-bit binop
	tya
	adc textat_rightvarInteger_var89+1
	tay
	lda textat_rightvarInteger_var89
	sta zp
	sty zp+1
	; LineNumber: 504
	; memcpyfast
	ldy str_len
	dey
textat_memcpy93
	lda (this_str),y
	sta (zp),y
	dey
	bpl textat_memcpy93
	; LineNumber: 506
	rts
	
; // =========================================
; // SOUND!
	; NodeProcedureDecl -1
	; ***********  Defining procedure : PlayNote
	;    Procedure type : User-defined procedure
	; LineNumber: 525
	; LineNumber: 524
note_duration	dc.b	0
	; LineNumber: 522
note	dc.b	0
	; LineNumber: 522
note_len	dc.b	0
PlayNote_block94
PlayNote
	; LineNumber: 526
	; Binary clause Simplified: EQUALS
	lda PLAY_SOUND
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne PlayNote_elsedoneblock98
PlayNote_ConditionalTrueBlock96: ;Main true block ;keep 
	; LineNumber: 527
	; LineNumber: 528
	; Assigning memory location
	; Assigning single variable : $e848
	lda note
	; Calling storevariable
	sta $e848
	; LineNumber: 530
	; Assigning single variable : note_duration
	lda #$0
	; Calling storevariable
	sta note_duration
PlayNote_forloop109
	; LineNumber: 528
	; Wait
	ldx #$c8 ; optimized, look out for bugs
	dex
	bne *-1
PlayNote_forloopcounter111
PlayNote_loopstart112
	; Compare is onpage
	inc note_duration
	lda note_len
	cmp note_duration ;keep
	bne PlayNote_forloop109
PlayNote_loopdone116: ;keep
PlayNote_forloopend110
PlayNote_loopend113
	; LineNumber: 530
PlayNote_elsedoneblock98
	; LineNumber: 531
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : burp
	;    Procedure type : User-defined procedure
	; LineNumber: 534
burp
	; LineNumber: 535
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$f
	; Calling storevariable
	sta $e84a
	; LineNumber: 536
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 537
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 538
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 539
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ping
	;    Procedure type : User-defined procedure
	; LineNumber: 542
ping
	; LineNumber: 543
	; Assigning memory location
	; Assigning single variable : $e84a
	lda #$55
	; Calling storevariable
	sta $e84a
	; LineNumber: 544
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$10
	; Calling storevariable
	sta $e84b
	; LineNumber: 545
	; Assigning single variable : note
	lda #$ee
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 546
	; Assigning single variable : note
	lda #$fb
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$c8
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 547
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 548
	; Assigning single variable : note
	lda #$d2
	; Calling storevariable
	sta note
	; Assigning single variable : note_len
	lda #$ff
	; Calling storevariable
	sta note_len
	jsr PlayNote
	; LineNumber: 549
	; Assigning memory location
	; Assigning single variable : $e84b
	lda #$0
	; Calling storevariable
	sta $e84b
	; LineNumber: 550
	rts
	
; // =========================================
	; NodeProcedureDecl -1
	; ***********  Defining procedure : ScrollY
	;    Procedure type : User-defined procedure
	; LineNumber: 558
	; LineNumber: 556
c_row	=      $08
	; LineNumber: 556
p_row	=      $16
	; LineNumber: 557
scroll	dc.b	0
	; LineNumber: 557
scrolls	dc.b	0
ScrollY_block119
ScrollY
	; LineNumber: 572
	; Assigning single variable : scrolls
	lda #$1
	; Calling storevariable
	sta scrolls
ScrollY_forloop120
	; LineNumber: 559
	; LineNumber: 561
	; Assigning single variable : p_row
	lda #<$8000
	ldx #>$8000
	sta p_row
	stx p_row+1
	; LineNumber: 562
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 569
	; Assigning single variable : scroll
	lda #$1
	; Calling storevariable
	sta scroll
ScrollY_forloop144
	; LineNumber: 564
	; LineNumber: 564
	; memcpyfast
	ldy #39
ScrollY_memcpy154
	lda (c_row),y
	sta (p_row),y
	dey
	bpl ScrollY_memcpy154
	; LineNumber: 566
	; Assigning single variable : p_row
	lda p_row
	clc
	adc #$28
	sta p_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc ScrollY_WordAdd155
	inc p_row+1
ScrollY_WordAdd155
	; LineNumber: 567
	; Assigning single variable : c_row
	; INTEGER optimization: a=b+c 
	lda p_row
	clc
	adc #$28
	sta c_row+0
	lda p_row+1
	adc #$00
	sta c_row+1
	; LineNumber: 568
ScrollY_forloopcounter146
ScrollY_loopstart147
	; Compare is onpage
	inc scroll
	lda #$19
	cmp scroll ;keep
	bcs ScrollY_forloop144
ScrollY_loopdone157: ;keep
ScrollY_forloopend145
ScrollY_loopend148
	; LineNumber: 569
	ldy #$28 ; optimized, look out for bugs
	lda #$20
ScrollY_fill158
	sta (c_row),y
	dey
	bpl ScrollY_fill158
	; LineNumber: 570
	jsr Crt_WaitVblStart
	; LineNumber: 571
ScrollY_forloopcounter122
ScrollY_loopstart123
	; Compare is onpage
	inc scrolls
	lda #$19
	cmp scrolls ;keep
	bne ScrollY_forloop120
ScrollY_loopdone159: ;keep
ScrollY_forloopend121
ScrollY_loopend124
	; LineNumber: 573
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : help_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 581
	; LineNumber: 578
hks	dc.b	0
	; LineNumber: 579
help_screen_pointer	=      $08
help_screen_block160
help_screen
	; LineNumber: 584
	
; // Set up pointer to array:
	; Assigning single variable : help_screen_pointer
	lda #<help_screen_array
	ldx #>help_screen_array
	sta help_screen_pointer
	stx help_screen_pointer+1
	; LineNumber: 585
	; Assigning single variable : hks
	lda #$0
	; Calling storevariable
	sta hks
	; LineNumber: 586
	jsr cls
	; LineNumber: 589
	
; // Draw the frog
	; Copy full screen
	lda help_screen_pointer
	sta $4c
	lda help_screen_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
help_screen_outer161
	ldy #0
help_screen_inner162
	lda ($4c),y
	sta ($4e),y
	dey
	bne help_screen_inner162
	inc $4c+1
	inc $4e+1
	dex
	bne help_screen_outer161
	ldy #0
help_screen_final163
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne help_screen_final163
	; LineNumber: 592
	jsr Key_SetupScreenCodes
	; LineNumber: 593
	jsr Key_Read
	; LineNumber: 594
	; Assigning single variable : hks
	lda Key_keyState
	; Calling storevariable
	sta hks
	; LineNumber: 595
help_screen_while164
help_screen_loopstart168
	; Binary clause Simplified: EQUALS
	lda hks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne help_screen_elsedoneblock167
help_screen_ConditionalTrueBlock165: ;Main true block ;keep 
	; LineNumber: 596
	; LineNumber: 598
	; Assigning single variable : hks
	lda Key_keyState
	; Calling storevariable
	sta hks
	; LineNumber: 600
	jmp help_screen_while164
help_screen_elsedoneblock167
help_screen_loopend169
	; LineNumber: 602
	jsr ScrollY
	; LineNumber: 604
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : title_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 618
	; LineNumber: 608
ks	dc.b	0
	; LineNumber: 608
ctr	dc.b	0
	; LineNumber: 608
slide	dc.b	0
	; LineNumber: 610
inst0	
	dc.b	98, 98, 98, 98, 98, 98, 32, 0
	; LineNumber: 611
inst1	
	dc.b	220, 139, 133, 153, 147, 186, 98, 98, 98
	dc.b	32, 0
	; LineNumber: 612
inst2	
	dc.b	220, 160, 160, 160, 160, 151, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 613
inst3	
	dc.b	220, 160, 160, 160, 129, 147, 132, 221, 160
	dc.b	32, 0
	; LineNumber: 614
inst4	
	dc.b	220, 160, 160, 160, 192, 192, 192, 253, 160
	dc.b	32, 0
	; LineNumber: 615
inst5	
	dc.b	220, 160, 160, 160, 160, 184, 160, 221, 160
	dc.b	32, 0
	; LineNumber: 616
inst6	
	dc.b	220, 160, 160, 160, 180, 181, 182, 221, 160
	dc.b	32, 0
	; LineNumber: 617
inst7	
	dc.b	32, 32, 32, 124, 226, 226, 226, 226, 32
	dc.b	32, 0
title_screen_block172
title_screen
	; LineNumber: 621
	
; //12345678901234567890
; // Set up pointer to array:
	; Assigning single variable : title_screen_frog_pointer
	lda #<title_screen_frog
	ldx #>title_screen_frog
	sta title_screen_frog_pointer
	stx title_screen_frog_pointer+1
	; LineNumber: 622
	; Assigning single variable : ks
	lda #$0
	; Calling storevariable
	sta ks
	; LineNumber: 623
	jsr cls
	; LineNumber: 626
	
; // Draw the frog
	; Copy full screen
	lda title_screen_frog_pointer
	sta $4c
	lda title_screen_frog_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
title_screen_outer173
	ldy #0
title_screen_inner174
	lda ($4c),y
	sta ($4e),y
	dey
	bne title_screen_inner174
	inc $4c+1
	inc $4e+1
	dex
	bne title_screen_outer173
	ldy #0
title_screen_final175
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne title_screen_final175
	; LineNumber: 627
	; memcpyfast
	ldx #12
title_screen_memcpy176
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl title_screen_memcpy176
	; LineNumber: 628
	; memcpyfast
	ldx #12
title_screen_memcpy177
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl title_screen_memcpy177
	; LineNumber: 629
	; memcpyfast
	ldx #12
title_screen_memcpy178
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl title_screen_memcpy178
	; LineNumber: 630
	; memcpyfast
	ldx #12
title_screen_memcpy179
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl title_screen_memcpy179
	; LineNumber: 633
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$d
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst0
	ldx #>inst0
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$7
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 634
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$e
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst1
	ldx #>inst1
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 635
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$f
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst2
	ldx #>inst2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 636
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$10
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst3
	ldx #>inst3
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 637
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$11
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst4
	ldx #>inst4
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 638
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$12
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst5
	ldx #>inst5
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 639
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$13
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst6
	ldx #>inst6
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 640
	; Assigning single variable : x
	lda #$0
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$14
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<inst7
	ldx #>inst7
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$a
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 642
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$15
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 643
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$16
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<by
	ldx #>by
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 644
	; Assigning single variable : x
	lda #$2
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$17
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<url
	ldx #>url
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1c
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 647
	jsr Key_SetupScreenCodes
	; LineNumber: 648
	jsr Key_Read
	; LineNumber: 649
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 650
title_screen_while180
title_screen_loopstart184
	; Binary clause Simplified: EQUALS
	lda ks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne title_screen_localfailed271
	jmp title_screen_ConditionalTrueBlock181
title_screen_localfailed271
	jmp title_screen_elsedoneblock183
title_screen_ConditionalTrueBlock181: ;Main true block ;keep 
	; LineNumber: 651
	; LineNumber: 653
	jsr Key_Read
	; LineNumber: 669
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop273
	; LineNumber: 655
	; LineNumber: 656
	inc ctr
	lda ctr
	cmp #$64 ; keep
	bne title_screen_incmax291
	lda #$1
	sta ctr
title_screen_incmax291
	; LineNumber: 657
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 659
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock294
title_screen_ConditionalTrueBlock293: ;Main true block ;keep 
	; LineNumber: 660
	; LineNumber: 661
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 663
	jmp title_screen_elsedoneblock295
title_screen_elseblock294
	; LineNumber: 663
	; LineNumber: 665
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 666
title_screen_elsedoneblock295
	; LineNumber: 667
	jsr sleep_delay
	; LineNumber: 668
title_screen_forloopcounter275
title_screen_loopstart276
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop273
title_screen_loopdone300: ;keep
title_screen_forloopend274
title_screen_loopend277
	; LineNumber: 669
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 670
	jsr sleep_delay
	; LineNumber: 671
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 672
	jsr sleep_delay
	; LineNumber: 673
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 674
	jsr sleep_delay
	; LineNumber: 691
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop301
	; LineNumber: 677
	; LineNumber: 678
	inc ctr
	lda ctr
	cmp #$64 ; keep
	bne title_screen_incmax319
	lda #$1
	sta ctr
title_screen_incmax319
	; LineNumber: 679
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 681
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock322
title_screen_ConditionalTrueBlock321: ;Main true block ;keep 
	; LineNumber: 682
	; LineNumber: 683
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space2
	ldx #>space2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 685
	jmp title_screen_elsedoneblock323
title_screen_elseblock322
	; LineNumber: 685
	; LineNumber: 687
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 688
title_screen_elsedoneblock323
	; LineNumber: 689
	jsr sleep_delay
	; LineNumber: 690
title_screen_forloopcounter303
title_screen_loopstart304
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop301
title_screen_loopdone328: ;keep
title_screen_forloopend302
title_screen_loopend305
	; LineNumber: 691
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 692
	jsr sleep_delay
	; LineNumber: 693
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 694
	jsr sleep_delay
	; LineNumber: 695
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 696
	jsr sleep_delay
	; LineNumber: 713
	; Assigning single variable : slide
	lda #$1
	; Calling storevariable
	sta slide
title_screen_forloop329
	; LineNumber: 699
	; LineNumber: 700
	inc ctr
	lda ctr
	cmp #$c8 ; keep
	bne title_screen_incmax347
	lda #$1
	sta ctr
title_screen_incmax347
	; LineNumber: 701
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 703
	; Binary clause Simplified: LESS
	lda ctr
	; Compare with pure num / var optimization
	cmp #$32;keep
	bcs title_screen_elseblock350
title_screen_ConditionalTrueBlock349: ;Main true block ;keep 
	; LineNumber: 704
	; LineNumber: 705
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help2
	ldx #>help2
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 707
	jmp title_screen_elsedoneblock351
title_screen_elseblock350
	; LineNumber: 707
	; LineNumber: 709
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<help
	ldx #>help
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 710
title_screen_elsedoneblock351
	; LineNumber: 711
	jsr sleep_delay
	; LineNumber: 712
title_screen_forloopcounter331
title_screen_loopstart332
	; Compare is onpage
	inc slide
	lda #$64
	cmp slide ;keep
	bne title_screen_forloop329
title_screen_loopdone356: ;keep
title_screen_forloopend330
title_screen_loopend333
	; LineNumber: 713
	; Assigning single variable : ctr
	lda #$0
	; Calling storevariable
	sta ctr
	; LineNumber: 714
	jsr sleep_delay
	; LineNumber: 715
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 716
	jsr sleep_delay
	; LineNumber: 717
	; Assigning single variable : x
	lda #$4
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<blk
	ldx #>blk
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$19
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 718
	jsr sleep_delay
	; LineNumber: 720
	jmp title_screen_while180
title_screen_elsedoneblock183
title_screen_loopend185
	; LineNumber: 722
	jsr ScrollY
	; LineNumber: 723
	jsr help_screen
	; LineNumber: 725
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : score_screen
	;    Procedure type : User-defined procedure
	; LineNumber: 729
score_screen
	; LineNumber: 730
	jsr cls
	; LineNumber: 732
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne score_screen_elseblock360
score_screen_ConditionalTrueBlock359: ;Main true block ;keep 
	; LineNumber: 732
	; LineNumber: 734
	; Assigning single variable : petscii_pointer
	lda #<success
	ldx #>success
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 736
	jmp score_screen_elsedoneblock361
score_screen_elseblock360
	; LineNumber: 736
	; LineNumber: 738
	; Assigning single variable : petscii_pointer
	lda #<rip
	ldx #>rip
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 739
score_screen_elsedoneblock361
	; LineNumber: 740
	; Copy full screen
	lda petscii_pointer
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda #$00
	sta $4e
	lda #$80
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
score_screen_outer366
	ldy #0
score_screen_inner367
	lda ($4c),y
	sta ($4e),y
	dey
	bne score_screen_inner367
	inc $4c+1
	inc $4e+1
	dex
	bne score_screen_outer366
	ldy #0
score_screen_final368
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne score_screen_final368
	; LineNumber: 741
	; memcpyfast
	ldx #12
score_screen_memcpy369
	lda logo+ $00,x
	sta $8000,x
	dex
	bpl score_screen_memcpy369
	; LineNumber: 742
	; memcpyfast
	ldx #12
score_screen_memcpy370
	lda logo+ $0d,x
	sta $8028,x
	dex
	bpl score_screen_memcpy370
	; LineNumber: 743
	; memcpyfast
	ldx #12
score_screen_memcpy371
	lda logo+ $1a,x
	sta $8050,x
	dex
	bpl score_screen_memcpy371
	; LineNumber: 744
	; memcpyfast
	ldx #12
score_screen_memcpy372
	lda logo+ $27,x
	sta $8078,x
	dex
	bpl score_screen_memcpy372
	; LineNumber: 747
	; MoveTo optimization
	lda #$0d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 748
	clc
	lda #<over
	adc #$0
	ldy #>over
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 750
	; MoveTo optimization
	lda #$5d
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 751
	clc
	lda #<score
	adc #$0
	ldy #>score
	sta print_text+0
	sty print_text+1
	ldx #$d ; optimized, look out for bugs
	jsr printstring
	; LineNumber: 753
	; MoveTo optimization
	lda #$69
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 753
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
score_screen_printdecimal377
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl score_screen_printdecimal377
	; LineNumber: 756
	jsr Key_Read
	; LineNumber: 757
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 759
score_screen_while378
score_screen_loopstart382
	; Binary clause Simplified: EQUALS
	lda ks
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne score_screen_localfailed389
	jmp score_screen_ConditionalTrueBlock379
score_screen_localfailed389
	jmp score_screen_elsedoneblock381
score_screen_ConditionalTrueBlock379: ;Main true block ;keep 
	; LineNumber: 760
	; LineNumber: 761
	jsr Key_Read
	; LineNumber: 762
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 763
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 764
	jsr frame_delay
	; LineNumber: 765
	jsr Key_Read
	; LineNumber: 766
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 767
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<space
	ldx #>space
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 768
	jsr frame_delay
	; LineNumber: 769
	jsr Key_Read
	; LineNumber: 770
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 771
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<score_screen_stringassignstr391
	sta this_str
	lda #>score_screen_stringassignstr391
	sta this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 772
	jsr frame_delay
	; LineNumber: 773
	jsr Key_Read
	; LineNumber: 774
	; Assigning single variable : ks
	lda Key_keyState
	; Calling storevariable
	sta ks
	; LineNumber: 775
	; Assigning single variable : x
	lda #$e
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$18
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<score_screen_stringassignstr393
	sta this_str
	lda #>score_screen_stringassignstr393
	sta this_str+1
	; Assigning single variable : str_len
	lda #$17
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 776
	jsr frame_delay
	; LineNumber: 777
	jmp score_screen_while378
score_screen_elsedoneblock381
score_screen_loopend383
	; LineNumber: 778
	jsr ScrollY
	; LineNumber: 779
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : sprite_xy
	;    Procedure type : User-defined procedure
	; LineNumber: 785
	; LineNumber: 783
spr_p	=      $08
	; LineNumber: 781
spr_x	dc.b	0
	; LineNumber: 781
spr_y	dc.b	0
	; LineNumber: 781
source_str	=      $16
	; LineNumber: 781
spr_len	dc.b	0
sprite_xy_block395
sprite_xy
	; LineNumber: 786
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var398 = $54
	sta sprite_xy_rightvarInteger_var398
	sty sprite_xy_rightvarInteger_var398+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var401 =      $56
	sta sprite_xy_rightvarInteger_var401
	sty sprite_xy_rightvarInteger_var401+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var401
sprite_xy_wordAdd399
	sta sprite_xy_rightvarInteger_var401
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var401+1
	tay
	lda sprite_xy_rightvarInteger_var401
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var398
sprite_xy_wordAdd396
	sta sprite_xy_rightvarInteger_var398
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var398+1
	tay
	lda sprite_xy_rightvarInteger_var398
	sta spr_p
	sty spr_p+1
	; LineNumber: 786
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy402
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy402
	; LineNumber: 788
	; Assigning single variable : spr_p
	; Generic 16 bit op
	ldy #0
	lda #$27
sprite_xy_rightvarInteger_var405 = $54
	sta sprite_xy_rightvarInteger_var405
	sty sprite_xy_rightvarInteger_var405+1
	; Generic 16 bit op
	ldy #0
	lda spr_x
sprite_xy_rightvarInteger_var408 =      $56
	sta sprite_xy_rightvarInteger_var408
	sty sprite_xy_rightvarInteger_var408+1
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
sprite_xy_rightvarInteger_var411 =      $58
	sta sprite_xy_rightvarInteger_var411
	sty sprite_xy_rightvarInteger_var411+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda spr_y
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var411
sprite_xy_wordAdd409
	sta sprite_xy_rightvarInteger_var411
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var411+1
	tay
	lda sprite_xy_rightvarInteger_var411
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var408
sprite_xy_wordAdd406
	sta sprite_xy_rightvarInteger_var408
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var408+1
	tay
	lda sprite_xy_rightvarInteger_var408
	; Low bit binop:
	clc
	adc sprite_xy_rightvarInteger_var405
sprite_xy_wordAdd403
	sta sprite_xy_rightvarInteger_var405
	; High-bit binop
	tya
	adc sprite_xy_rightvarInteger_var405+1
	tay
	lda sprite_xy_rightvarInteger_var405
	sta spr_p
	sty spr_p+1
	; LineNumber: 788
	; memcpyfast
	ldy spr_len
	dey
sprite_xy_memcpy412
	lda (source_str),y
	sta (spr_p),y
	dey
	bpl sprite_xy_memcpy412
	; LineNumber: 790
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : init_vars
	;    Procedure type : User-defined procedure
	; LineNumber: 798
	; LineNumber: 794
this_row	=      $08
	; LineNumber: 794
target_strip	=      $16
	; LineNumber: 795
iteration	dc.b	0
	; LineNumber: 796
homeplate	dc.b	$d3
init_vars_block413
init_vars
	; LineNumber: 799
	jsr cls
	; LineNumber: 800
	; Assigning single variable : FROGS_SAVED
	lda #$0
	; Calling storevariable
	sta FROGS_SAVED
	; LineNumber: 801
	; Assigning single variable : GAME_SPEED
	lda #$8
	; Calling storevariable
	sta GAME_SPEED
	; LineNumber: 802
	jsr Key_SetupScreenCodes
	; LineNumber: 805
	
; // Init the playfield
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 806
	; Assigning single variable : petscii_pointer
	lda #<level2
	ldx #>level2
	sta petscii_pointer
	stx petscii_pointer+1
	; LineNumber: 807
	; Copy full screen
	sta $4c
	lda petscii_pointer+1
	sta $4c+1
	lda screenmemory
	sta $4e
	lda screenmemory+1
	sta $4e+1
	; CopyFullscreen with pointers
	ldx #3
init_vars_outer414
	ldy #0
init_vars_inner415
	lda ($4c),y
	sta ($4e),y
	dey
	bne init_vars_inner415
	inc $4c+1
	inc $4e+1
	dex
	bne init_vars_outer414
	ldy #0
init_vars_final416
	lda ($4c),y
	sta ($4e),y
	iny
	cpy #232
	bne init_vars_final416
	; LineNumber: 808
	; Assigning single variable : this_row
	lda petscii_pointer
	ldx petscii_pointer+1
	sta this_row
	stx this_row+1
	; LineNumber: 809
	; Assigning single variable : target_strip
	lda #<level_strips
	ldx #>level_strips
	sta target_strip
	stx target_strip+1
	; LineNumber: 823
	; Assigning single variable : iteration
	lda #$1
	; Calling storevariable
	sta iteration
init_vars_forloop417
	; LineNumber: 813
	; LineNumber: 815
	
; // Obstacle Blanks
; // Copy the source twice
	; memcpyfast
	ldy #39
init_vars_memcpy429
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy429
	; LineNumber: 816
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd430
	inc target_strip+1
init_vars_WordAdd430
	; LineNumber: 817
	; memcpyfast
	ldy #39
init_vars_memcpy431
	lda (this_row),y
	sta (target_strip),y
	dey
	bpl init_vars_memcpy431
	; LineNumber: 818
	; Assigning single variable : target_strip
	lda target_strip
	clc
	adc #$28
	sta target_strip+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd432
	inc target_strip+1
init_vars_WordAdd432
	; LineNumber: 821
	
; // Next row
	; Assigning single variable : this_row
	lda this_row
	clc
	adc #$28
	sta this_row+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc init_vars_WordAdd433
	inc this_row+1
init_vars_WordAdd433
	; LineNumber: 822
init_vars_forloopcounter419
init_vars_loopstart420
	; Compare is onpage
	inc iteration
	lda #$19
	cmp iteration ;keep
	bcs init_vars_forloop417
init_vars_loopdone434: ;keep
init_vars_forloopend418
init_vars_loopend421
	; LineNumber: 825
	
; // Init the "sprites"
	; memcpy
	ldx #0
init_vars_memcpy435
	lda arr_crockr+ $00,x
	sta str_crockr,x
	inx
	cpx #$9
	bne init_vars_memcpy435
	; LineNumber: 826
	; memcpy
	ldx #0
init_vars_memcpy436
	lda arr_crockl+ $00,x
	sta str_crockl,x
	inx
	cpx #$9
	bne init_vars_memcpy436
	; LineNumber: 827
	; memcpy
	ldx #0
init_vars_memcpy437
	lda arr_logl+ $00,x
	sta str_logl,x
	inx
	cpx #$5
	bne init_vars_memcpy437
	; LineNumber: 828
	; memcpy
	ldx #0
init_vars_memcpy438
	lda arr_logr+ $00,x
	sta str_logr,x
	inx
	cpx #$5
	bne init_vars_memcpy438
	; LineNumber: 829
	; memcpy
	ldx #0
init_vars_memcpy439
	lda arr_turtles+ $00,x
	sta str_turtles,x
	inx
	cpx #$5
	bne init_vars_memcpy439
	; LineNumber: 830
	; memcpy
	ldx #0
init_vars_memcpy440
	lda arr_river_r+ $00,x
	sta str_river_r,x
	inx
	cpx #$5
	bne init_vars_memcpy440
	; LineNumber: 831
	; memcpy
	ldx #0
init_vars_memcpy441
	lda arr_river_l+ $00,x
	sta str_river_l,x
	inx
	cpx #$5
	bne init_vars_memcpy441
	; LineNumber: 833
	; memcpy
	ldx #0
init_vars_memcpy442
	lda arr_truckt_r+ $00,x
	sta str_truckt_r,x
	inx
	cpx #$8
	bne init_vars_memcpy442
	; LineNumber: 834
	; memcpy
	ldx #0
init_vars_memcpy443
	lda arr_truckb_r+ $00,x
	sta str_truckb_r,x
	inx
	cpx #$8
	bne init_vars_memcpy443
	; LineNumber: 835
	; memcpy
	ldx #0
init_vars_memcpy444
	lda arr_carl+ $00,x
	sta str_cart,x
	inx
	cpx #$4
	bne init_vars_memcpy444
	; LineNumber: 836
	; memcpy
	ldx #0
init_vars_memcpy445
	lda arr_carr+ $00,x
	sta str_carb,x
	inx
	cpx #$4
	bne init_vars_memcpy445
	; LineNumber: 840
	
; // "Sprite" start positions
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockr
	ldx #>str_crockr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 841
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$0
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 843
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_crockl
	ldx #>str_crockl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$9
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 844
	; Assigning single variable : spr_x
	lda #$5
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$1
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 846
	; Assigning single variable : spr_x
	lda #$4
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 847
	; Assigning single variable : spr_x
	lda #$e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$2
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logr
	ldx #>str_logr
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 849
	; Assigning single variable : spr_x
	lda #$18
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 850
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$3
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_logl
	ldx #>str_logl
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 852
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 853
	; Assigning single variable : spr_x
	lda #$14
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 854
	; Assigning single variable : spr_x
	lda #$1e
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$4
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_turtles
	ldx #>str_turtles
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$5
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 856
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 857
	; Assigning single variable : spr_x
	lda #$8
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 859
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$5
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 860
	; Assigning single variable : spr_x
	lda #$22
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$6
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 862
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 863
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 864
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$7
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_cart
	ldx #>str_cart
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 865
	; Assigning single variable : spr_x
	lda #$1d
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$8
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_carb
	ldx #>str_carb
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$4
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 868
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$9
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 869
	; Assigning single variable : spr_x
	lda #$a
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$a
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 871
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 872
	; Assigning single variable : spr_x
	lda #$13
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 873
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$b
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckt_r
	ldx #>str_truckt_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 874
	; Assigning single variable : spr_x
	lda #$20
	; Calling storevariable
	sta spr_x
	; Assigning single variable : spr_y
	; Load Byte array
	ldx #$c
	lda obstacles_y,x
	; Calling storevariable
	sta spr_y
	; Assigning single variable : source_str
	lda #<str_truckb_r
	ldx #>str_truckb_r
	sta source_str
	stx source_str+1
	; Assigning single variable : spr_len
	lda #$8
	; Calling storevariable
	sta spr_len
	jsr sprite_xy
	; LineNumber: 876
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 877
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 879
	; Assigning single variable : KEYPRESS
	ldy #0
	lda #$0
	; Calling storevariable
	sta KEYPRESS
	sty KEYPRESS+1
	; LineNumber: 880
	; Assigning single variable : ALIVE
	lda #$1
	; Calling storevariable
	sta ALIVE
	; LineNumber: 881
	; Assigning single variable : WON_GAME
	lda #$0
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 883
	; Assigning single variable : player_lives
	lda #$3
	; Calling storevariable
	sta player_lives
	; LineNumber: 884
	; Assigning single variable : player_score
	lda #$0
	; Calling storevariable
	sta player_score
	sty player_score+1
	; LineNumber: 887
	
; // Home plates
	; Assigning single variable : x
	lda #$3
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 888
	; Assigning single variable : x
	lda #$a
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 889
	; Assigning single variable : x
	lda #$12
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 890
	; Assigning single variable : x
	lda #$18
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 891
	; Assigning single variable : x
	lda #$1f
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 892
	; Assigning single variable : x
	lda #$25
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda #$1
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<homeplate
	ldx #>homeplate
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 893
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 897
move_obstacles
	; LineNumber: 900
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc obstacles_x_rl
	lda obstacles_x_rl
	cmp #$27 ; keep
	bne move_obstacles_incmax448
	lda #$0
	sta obstacles_x_rl
move_obstacles_incmax448
	; LineNumber: 901
	; Assigning single variable : obstacles_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc obstacles_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta obstacles_x_lr
	; LineNumber: 902
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : move_traffic
	;    Procedure type : User-defined procedure
	; LineNumber: 906
move_traffic
	; LineNumber: 909
	
; // TRSE way of incrementing 
; // counter with loop back to 0
	inc traffic_x_rl
	lda traffic_x_rl
	cmp #$27 ; keep
	bne move_traffic_incmax451
	lda #$0
	sta traffic_x_rl
move_traffic_incmax451
	; LineNumber: 910
	; Assigning single variable : traffic_x_lr
	; 8 bit binop
	; Add/sub where right value is constant number
	lda #$27
	sec
	sbc traffic_x_rl
	 ; end add / sub var with constant
	; Calling storevariable
	sta traffic_x_lr
	; LineNumber: 911
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : frog_ride
	;    Procedure type : User-defined procedure
	; LineNumber: 918
	; LineNumber: 916
char_under	dc.b	0
frog_ride_block452
frog_ride
	; LineNumber: 919
	; Assigning single variable : char_under
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta char_under
	; LineNumber: 922
	cmp #$51 ;keep
	bne frog_ride_casenext454
	; LineNumber: 925
	; LineNumber: 926
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock459
frog_ride_ConditionalTrueBlock457: ;Main true block ;keep 
	; LineNumber: 927
	; LineNumber: 928
	
; // Ride turtles and logs etc
	dec frog_x
	; LineNumber: 929
frog_ride_elsedoneblock459
	; LineNumber: 930
	jmp frog_ride_caseend453
frog_ride_casenext454
	lda char_under
	cmp #$a8 ;keep
	bne frog_ride_casenext464
	; LineNumber: 933
	; LineNumber: 934
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock469
frog_ride_ConditionalTrueBlock467: ;Main true block ;keep 
	; LineNumber: 935
	; LineNumber: 936
	
; // (
	inc frog_x
	; LineNumber: 937
frog_ride_elsedoneblock469
	; LineNumber: 938
	jmp frog_ride_caseend453
frog_ride_casenext464
	lda char_under
	cmp #$a9 ;keep
	bne frog_ride_casenext474
	; LineNumber: 941
	; LineNumber: 942
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock479
frog_ride_ConditionalTrueBlock477: ;Main true block ;keep 
	; LineNumber: 943
	; LineNumber: 944
	
; // ) 
	dec frog_x
	; LineNumber: 945
frog_ride_elsedoneblock479
	; LineNumber: 946
	jmp frog_ride_caseend453
frog_ride_casenext474
	lda char_under
	cmp #$dc ;keep
	bne frog_ride_casenext484
	; LineNumber: 949
	; LineNumber: 950
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$26;keep
	bcs frog_ride_elsedoneblock489
frog_ride_localsuccess492: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$5;keep
	bcc frog_ride_elsedoneblock489
frog_ride_ConditionalTrueBlock487: ;Main true block ;keep 
	; LineNumber: 951
	; LineNumber: 952
	
; // Crock body 
	inc frog_x
	; LineNumber: 953
frog_ride_elsedoneblock489
	; LineNumber: 955
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc frog_ride_elsedoneblock498
frog_ride_localsuccess501: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bne frog_ride_elsedoneblock498
frog_ride_ConditionalTrueBlock496: ;Main true block ;keep 
	; LineNumber: 956
	; LineNumber: 957
	dec frog_x
	; LineNumber: 958
frog_ride_elsedoneblock498
	; LineNumber: 959
	jmp frog_ride_caseend453
frog_ride_casenext484
frog_ride_caseend453
	; LineNumber: 961
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : show_obstacles
	;    Procedure type : User-defined procedure
	; LineNumber: 968
	; LineNumber: 965
strip_num	dc.b	0
	; LineNumber: 965
this_strip	dc.b	0
	; LineNumber: 966
this_source_offset	=      $08
	; LineNumber: 967
game_move	dc.b	0
show_obstacles_block504
show_obstacles
	; LineNumber: 971
	; Binary clause Simplified: EQUALS
	; Modulo
	; Right is PURE NUMERIC : Is word =0
	; 8 bit mul of power 2
	lda GAME_SPEED
	lsr
show_obstacles_val_var510 = $54
	sta show_obstacles_val_var510
	lda GAME_TICKS
	sec
show_obstacles_modulo511
	sbc show_obstacles_val_var510
	bcs show_obstacles_modulo511
	adc show_obstacles_val_var510
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elsedoneblock508
show_obstacles_ConditionalTrueBlock506: ;Main true block ;keep 
	; LineNumber: 972
	; LineNumber: 973
	
; // Sets traffic speed
	jsr move_traffic
	; LineNumber: 974
show_obstacles_elsedoneblock508
	; LineNumber: 977
	; Binary clause Simplified: EQUALS
	; Modulo
	lda GAME_SPEED
show_obstacles_val_var519 = $54
	sta show_obstacles_val_var519
	lda GAME_TICKS
	sec
show_obstacles_modulo520
	sbc show_obstacles_val_var519
	bcs show_obstacles_modulo520
	adc show_obstacles_val_var519
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne show_obstacles_elseblock515
show_obstacles_ConditionalTrueBlock514: ;Main true block ;keep 
	; LineNumber: 978
	; LineNumber: 980
	
; // Update obstacles positions
; // Update obstacles positions
	jsr move_obstacles
	; LineNumber: 981
	; Assigning single variable : game_move
	lda #$1
	; Calling storevariable
	sta game_move
	; LineNumber: 983
	jmp show_obstacles_elsedoneblock516
show_obstacles_elseblock515
	; LineNumber: 984
	; LineNumber: 985
	; Assigning single variable : game_move
	lda #$0
	; Calling storevariable
	sta game_move
	; LineNumber: 986
show_obstacles_elsedoneblock516
	; LineNumber: 1009
	; Assigning single variable : strip_num
	lda #$0
	; Calling storevariable
	sta strip_num
show_obstacles_forloop523
	; LineNumber: 990
	; LineNumber: 991
	
; // "Scroll" each line of obstacle according to direction
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 992
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var551 = $54
	sta show_obstacles_rightvarInteger_var551
	sty show_obstacles_rightvarInteger_var551+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var551
show_obstacles_wordAdd549
	sta show_obstacles_rightvarInteger_var551
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var551+1
	tay
	lda show_obstacles_rightvarInteger_var551
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 994
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var554 = $54
	sta show_obstacles_rightvarInteger_var554
	sty show_obstacles_rightvarInteger_var554+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var554
show_obstacles_wordAdd552
	sta show_obstacles_rightvarInteger_var554
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var554+1
	tay
	lda show_obstacles_rightvarInteger_var554
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 996
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock557
show_obstacles_ConditionalTrueBlock556: ;Main true block ;keep 
	; LineNumber: 997
	; LineNumber: 998
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd564
	inc this_source_offset+1
show_obstacles_WordAdd564
	; LineNumber: 1000
	jmp show_obstacles_elsedoneblock558
show_obstacles_elseblock557
	; LineNumber: 1001
	; LineNumber: 1002
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc obstacles_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd566
	inc this_source_offset+1
show_obstacles_WordAdd566
	; LineNumber: 1003
show_obstacles_elsedoneblock558
	; LineNumber: 1004
	; memcpyfast
	ldy #39
show_obstacles_memcpy567
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy567
	; LineNumber: 1008
show_obstacles_forloopcounter525
show_obstacles_loopstart526
	inc strip_num
	lda #$5
	cmp strip_num ;keep
	beq show_obstacles_loopdone568
show_obstacles_loopnotdone569
	jmp show_obstacles_forloop523
show_obstacles_loopdone568
show_obstacles_forloopend524
show_obstacles_loopend527
	; LineNumber: 1029
	; Assigning single variable : strip_num
	lda #$5
	; Calling storevariable
	sta strip_num
show_obstacles_forloop570
	; LineNumber: 1011
	; LineNumber: 1012
	; Assigning single variable : this_strip
	; Load Byte array
	ldx strip_num
	lda obstacles_y,x
	; Calling storevariable
	sta this_strip
	; LineNumber: 1013
	; Assigning single variable : screenmemory
	; Generic 16 bit op
	; Integer constant assigning
	ldy #$80
	lda #$00
show_obstacles_rightvarInteger_var598 = $54
	sta show_obstacles_rightvarInteger_var598
	sty show_obstacles_rightvarInteger_var598+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$28
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var598
show_obstacles_wordAdd596
	sta show_obstacles_rightvarInteger_var598
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var598+1
	tay
	lda show_obstacles_rightvarInteger_var598
	sta screenmemory
	sty screenmemory+1
	; LineNumber: 1014
	; Assigning single variable : this_source_offset
	; Generic 16 bit op
	lda #<level_strips
	ldy #>level_strips
show_obstacles_rightvarInteger_var601 = $54
	sta show_obstacles_rightvarInteger_var601
	sty show_obstacles_rightvarInteger_var601+1
	; Right is PURE NUMERIC : Is word =1
	; 16 bit mul or div
	; Mul 16x8 setup
	ldy #0
	lda this_strip
	sta mul16x8_num1
	sty mul16x8_num1Hi
	lda #$50
	sta mul16x8_num2
	jsr mul16x8_procedure
	; Low bit binop:
	clc
	adc show_obstacles_rightvarInteger_var601
show_obstacles_wordAdd599
	sta show_obstacles_rightvarInteger_var601
	; High-bit binop
	tya
	adc show_obstacles_rightvarInteger_var601+1
	tay
	lda show_obstacles_rightvarInteger_var601
	sta this_source_offset
	sty this_source_offset+1
	; LineNumber: 1016
	; Binary clause Simplified: EQUALS
	; Load Byte array
	ldx strip_num
	lda strip_direction,x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elseblock604
show_obstacles_ConditionalTrueBlock603: ;Main true block ;keep 
	; LineNumber: 1017
	; LineNumber: 1018
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_rl
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd611
	inc this_source_offset+1
show_obstacles_WordAdd611
	; LineNumber: 1020
	jmp show_obstacles_elsedoneblock605
show_obstacles_elseblock604
	; LineNumber: 1021
	; LineNumber: 1022
	; Assigning single variable : this_source_offset
	lda this_source_offset
	clc
	adc traffic_x_lr
	sta this_source_offset+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc show_obstacles_WordAdd613
	inc this_source_offset+1
show_obstacles_WordAdd613
	; LineNumber: 1023
show_obstacles_elsedoneblock605
	; LineNumber: 1024
	; memcpyfast
	ldy #39
show_obstacles_memcpy614
	lda (this_source_offset),y
	sta (screenmemory),y
	dey
	bpl show_obstacles_memcpy614
	; LineNumber: 1028
show_obstacles_forloopcounter572
show_obstacles_loopstart573
	inc strip_num
	lda #$d
	cmp strip_num ;keep
	beq show_obstacles_loopdone615
show_obstacles_loopnotdone616
	jmp show_obstacles_forloop570
show_obstacles_loopdone615
show_obstacles_forloopend571
show_obstacles_loopend574
	; LineNumber: 1030
	; Binary clause Simplified: EQUALS
	lda game_move
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne show_obstacles_elsedoneblock620
show_obstacles_ConditionalTrueBlock618: ;Main true block ;keep 
	; LineNumber: 1031
	; LineNumber: 1034
	
; // Is the frog riding an object?
	jsr frog_ride
	; LineNumber: 1035
show_obstacles_elsedoneblock620
	; LineNumber: 1038
	
; // RESET SCREEN MEMORY
	; Assigning single variable : screenmemory
	lda #$00
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1040
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : kill_frog
	;    Procedure type : User-defined procedure
	; LineNumber: 1043
kill_frog
	; LineNumber: 1044
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1045
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<next_tile
	ldx #>next_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1046
	; Assigning single variable : previous_tile
	lda #$20
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1047
	; Assigning single variable : next_tile
	; Calling storevariable
	sta next_tile
	; LineNumber: 1048
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1049
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1050
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1051
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1052
	jsr burp
	; LineNumber: 1053
	dec player_lives
	; LineNumber: 1054
	rts
	; NodeProcedureDecl -1
	; ***********  Defining procedure : check_collisions
	;    Procedure type : User-defined procedure
	; LineNumber: 1059
check_collisions
	; LineNumber: 1061
	
; // CHECK COLLISSIONS
	; Assigning single variable : next_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta next_tile
	; LineNumber: 1067
	cmp frogcharA ;keep
	bne check_collisions_casenext627
	; LineNumber: 1071
	; LineNumber: 1072
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock632
check_collisions_ConditionalTrueBlock630: ;Main true block ;keep 
	; LineNumber: 1073
	; LineNumber: 1074
	
; // There is no function to search a string
; // or check an array, or return array size,
; // so we need to check each character individually
; // Can't occupy where already landed
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1075
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1076
check_collisions_elsedoneblock632
	; LineNumber: 1077
	jmp check_collisions_caseend626
check_collisions_casenext627
	lda next_tile
	cmp frogcharB ;keep
	bne check_collisions_casenext635
	; LineNumber: 1079
	; LineNumber: 1080
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock640
check_collisions_ConditionalTrueBlock638: ;Main true block ;keep 
	; LineNumber: 1081
	; LineNumber: 1082
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1083
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1084
check_collisions_elsedoneblock640
	; LineNumber: 1085
	jmp check_collisions_caseend626
check_collisions_casenext635
	lda next_tile
	cmp #$66 ;keep
	bne check_collisions_casenext643
	; LineNumber: 1088
	; LineNumber: 1089
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs check_collisions_elsedoneblock648
check_collisions_ConditionalTrueBlock646: ;Main true block ;keep 
	; LineNumber: 1090
	; LineNumber: 1091
	
; // Scenery
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1092
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1093
check_collisions_elsedoneblock648
	; LineNumber: 1094
	jmp check_collisions_caseend626
check_collisions_casenext643
	lda next_tile
	cmp #$68 ;keep
	bne check_collisions_casenext651
	; LineNumber: 1097
	; LineNumber: 1098
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1099
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1100
	jmp check_collisions_caseend626
check_collisions_casenext651
	lda next_tile
	cmp #$5c ;keep
	bne check_collisions_casenext653
	; LineNumber: 1103
	; LineNumber: 1104
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1105
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1106
	jmp check_collisions_caseend626
check_collisions_casenext653
	lda next_tile
	cmp #$20 ;keep
	bne check_collisions_casenext655
	; LineNumber: 1112
	; LineNumber: 1113
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$9;keep
	bcs check_collisions_elsedoneblock660
check_collisions_localsuccess662: ;keep
	; ; logical AND, second requirement
	; Optimization: replacing a > N with a >= N+1
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$4;keep
	bcc check_collisions_elsedoneblock660
check_collisions_ConditionalTrueBlock658: ;Main true block ;keep 
	; LineNumber: 1114
	; LineNumber: 1115
	
; // Water kills the frog for some reason?
	jsr kill_frog
	; LineNumber: 1116
check_collisions_elsedoneblock660
	; LineNumber: 1117
	jmp check_collisions_caseend626
check_collisions_casenext655
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext664
	; LineNumber: 1122
	; LineNumber: 1123
	
; // Traffic!
	jsr kill_frog
	; LineNumber: 1124
	jmp check_collisions_caseend626
check_collisions_casenext664
	lda next_tile
	cmp #$d7 ;keep
	bne check_collisions_casenext666
	; LineNumber: 1127
	; LineNumber: 1128
	jsr kill_frog
	; LineNumber: 1129
	jmp check_collisions_caseend626
check_collisions_casenext666
	lda next_tile
	cmp #$ed ;keep
	bne check_collisions_casenext668
	; LineNumber: 1132
	; LineNumber: 1133
	jsr kill_frog
	; LineNumber: 1135
	jmp check_collisions_caseend626
check_collisions_casenext668
	lda next_tile
	cmp #$ee ;keep
	bne check_collisions_casenext670
	; LineNumber: 1137
	; LineNumber: 1138
	jsr kill_frog
	; LineNumber: 1140
	jmp check_collisions_caseend626
check_collisions_casenext670
	lda next_tile
	cmp #$fd ;keep
	bne check_collisions_casenext672
	; LineNumber: 1143
	; LineNumber: 1144
	jsr kill_frog
	; LineNumber: 1146
	jmp check_collisions_caseend626
check_collisions_casenext672
	lda next_tile
	cmp #$60 ;keep
	bne check_collisions_casenext674
	; LineNumber: 1149
	; LineNumber: 1150
	jsr kill_frog
	; LineNumber: 1152
	jmp check_collisions_caseend626
check_collisions_casenext674
	lda next_tile
	cmp #$f3 ;keep
	bne check_collisions_casenext676
	; LineNumber: 1155
	; LineNumber: 1156
	jsr kill_frog
	; LineNumber: 1158
	jmp check_collisions_caseend626
check_collisions_casenext676
	lda next_tile
	cmp #$eb ;keep
	bne check_collisions_casenext678
	; LineNumber: 1161
	; LineNumber: 1162
	jsr kill_frog
	; LineNumber: 1164
	jmp check_collisions_caseend626
check_collisions_casenext678
	lda next_tile
	cmp #$f0 ;keep
	bne check_collisions_casenext680
	; LineNumber: 1167
	; LineNumber: 1168
	jsr kill_frog
	; LineNumber: 1170
	jmp check_collisions_caseend626
check_collisions_casenext680
	lda next_tile
	cmp #$c6 ;keep
	bne check_collisions_casenext682
	; LineNumber: 1174
	; LineNumber: 1175
	
; // Crock!
	jsr kill_frog
	; LineNumber: 1177
	jmp check_collisions_caseend626
check_collisions_casenext682
	lda next_tile
	cmp #$a2 ;keep
	bne check_collisions_casenext684
	; LineNumber: 1180
	; LineNumber: 1181
	jsr kill_frog
	; LineNumber: 1182
	jmp check_collisions_caseend626
check_collisions_casenext684
	lda next_tile
	cmp #$d6 ;keep
	bne check_collisions_casenext686
	; LineNumber: 1187
	; LineNumber: 1188
	
; // HOME
; // Occupied
	; Assigning single variable : frog_x
	lda frog_old_x
	; Calling storevariable
	sta frog_x
	; LineNumber: 1189
	; Assigning single variable : frog_y
	lda frog_old_y
	; Calling storevariable
	sta frog_y
	; LineNumber: 1190
	jmp check_collisions_caseend626
check_collisions_casenext686
	lda next_tile
	cmp #$d3 ;keep
	bne check_collisions_casenext688
	; LineNumber: 1193
	; LineNumber: 1194
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq check_collisions_localfailed705
	jmp check_collisions_ConditionalTrueBlock691
check_collisions_localfailed705: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq check_collisions_elsedoneblock693
check_collisions_ConditionalTrueBlock691: ;Main true block ;keep 
	; LineNumber: 1195
	; LineNumber: 1196
	
; // Success
	; Assigning single variable : player_score
	ldy #0
	lda player_score
	clc
	adc #$64
	sta player_score+0
	; Optimization : A := A op 8 bit - var and bvar are the same - perform inc
	bcc check_collisions_WordAdd707
	inc player_score+1
check_collisions_WordAdd707
	; LineNumber: 1197
	inc FROGS_SAVED
	; LineNumber: 1198
	jsr ping
	; LineNumber: 1200
	; Binary clause Simplified: EQUALS
	lda FROGS_SAVED
	; Compare with pure num / var optimization
	cmp #$6;keep
	bne check_collisions_elseblock711
check_collisions_ConditionalTrueBlock710: ;Main true block ;keep 
	; LineNumber: 1201
	; LineNumber: 1203
	
; // Yay you won!
	; Assigning single variable : WON_GAME
	lda #$1
	; Calling storevariable
	sta WON_GAME
	; LineNumber: 1205
	jmp check_collisions_elsedoneblock712
check_collisions_elseblock711
	; LineNumber: 1206
	; LineNumber: 1207
	; Assigning single variable : frog_x
	lda #$14
	; Calling storevariable
	sta frog_x
	; LineNumber: 1208
	; Assigning single variable : frog_y
	lda #$18
	; Calling storevariable
	sta frog_y
	; LineNumber: 1209
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1210
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1211
check_collisions_elsedoneblock712
	; LineNumber: 1212
check_collisions_elsedoneblock693
	; LineNumber: 1213
	jmp check_collisions_caseend626
check_collisions_casenext688
	; LineNumber: 1217
	; LineNumber: 1220
check_collisions_caseend626
	; LineNumber: 1221
	rts
	; === main logic ============================================================================================ 
	; NodeProcedureDecl -1
	; ***********  Defining procedure : game_loop
	;    Procedure type : User-defined procedure
	; LineNumber: 1231
game_loop
	; LineNumber: 1233
	jsr Key_SetupScreenCodes
	; LineNumber: 1238
	
; // Unit constants
; // Numeric Keypad
	; Assigning single variable : n_key_up
	; Integer constant assigning
	ldy #$40
	lda #$03
	; Calling storevariable
	sta n_key_up
	sty n_key_up+1
	; LineNumber: 1239
	; Assigning single variable : n_key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta n_key_down
	sty n_key_down+1
	; LineNumber: 1240
	; Assigning single variable : n_key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta n_key_left
	sty n_key_left+1
	; LineNumber: 1241
	; Assigning single variable : n_key_right
	; Integer constant assigning
	ldy #$80
	; Calling storevariable
	sta n_key_right
	sty n_key_right+1
	; LineNumber: 1244
	
; // Regular keys        
	; Assigning single variable : key_up
	; Integer constant assigning
	ldy #$01
	lda #$03
	; Calling storevariable
	sta key_up
	sty key_up+1
	; LineNumber: 1245
	; Assigning single variable : key_down
	; Integer constant assigning
	lda #$05
	; Calling storevariable
	sta key_down
	sty key_down+1
	; LineNumber: 1246
	; Assigning single variable : key_left
	; Integer constant assigning
	lda #$04
	; Calling storevariable
	sta key_left
	sty key_left+1
	; LineNumber: 1247
	; Assigning single variable : key_right
	; Integer constant assigning
	ldy #$02
	; Calling storevariable
	sta key_right
	sty key_right+1
	; LineNumber: 1250
game_loop_while719
game_loop_loopstart723
	; Binary clause Simplified: EQUALS
	lda ALIVE
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne game_loop_localfailed859
game_loop_localsuccess860: ;keep
	; ; logical AND, second requirement
	; Binary clause Simplified: EQUALS
	lda WON_GAME
	; Compare with pure num / var optimization
	cmp #$0;keep
	bne game_loop_localfailed859
	jmp game_loop_ConditionalTrueBlock720
game_loop_localfailed859
	jmp game_loop_elsedoneblock722
game_loop_ConditionalTrueBlock720: ;Main true block ;keep 
	; LineNumber: 1251
	; LineNumber: 1253
	jsr Key_Read
	; LineNumber: 1255
	; Assigning single variable : frog_old_x
	lda frog_x
	; Calling storevariable
	sta frog_old_x
	; LineNumber: 1256
	; Assigning single variable : frog_old_y
	lda frog_y
	; Calling storevariable
	sta frog_old_y
	; LineNumber: 1257
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_up
	ldy key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed877
	jmp game_loop_ConditionalTrueBlock863
game_loop_localfailed877: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_up
	ldy n_key_up+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock865
game_loop_ConditionalTrueBlock863: ;Main true block ;keep 
	; LineNumber: 1258
	; LineNumber: 1259
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$2;keep
	bcc game_loop_elsedoneblock882
game_loop_ConditionalTrueBlock880: ;Main true block ;keep 
	; LineNumber: 1260
	; LineNumber: 1261
	dec frog_y
	; LineNumber: 1262
	inc player_score
	bne game_loop_incdec888
	inc player_score +1
game_loop_incdec888
	; LineNumber: 1263
game_loop_elsedoneblock882
	; LineNumber: 1264
game_loop_elsedoneblock865
	; LineNumber: 1266
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_right
	ldy key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed904
	jmp game_loop_ConditionalTrueBlock890
game_loop_localfailed904: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_right
	ldy n_key_right+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock892
game_loop_ConditionalTrueBlock890: ;Main true block ;keep 
	; LineNumber: 1267
	; LineNumber: 1268
	; Binary clause Simplified: LESS
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$27;keep
	bcs game_loop_elsedoneblock909
game_loop_ConditionalTrueBlock907: ;Main true block ;keep 
	; LineNumber: 1269
	; LineNumber: 1270
	inc frog_x
	; LineNumber: 1271
	inc player_score
	bne game_loop_incdec915
	inc player_score +1
game_loop_incdec915
	; LineNumber: 1272
game_loop_elsedoneblock909
	; LineNumber: 1273
game_loop_elsedoneblock892
	; LineNumber: 1275
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_down
	ldy key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed931
	jmp game_loop_ConditionalTrueBlock917
game_loop_localfailed931: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_down
	ldy n_key_down+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock919
game_loop_ConditionalTrueBlock917: ;Main true block ;keep 
	; LineNumber: 1276
	; LineNumber: 1277
	; Binary clause Simplified: LESS
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$18;keep
	bcs game_loop_elsedoneblock936
game_loop_ConditionalTrueBlock934: ;Main true block ;keep 
	; LineNumber: 1278
	; LineNumber: 1279
	inc frog_y
	; LineNumber: 1280
	inc player_score
	bne game_loop_incdec942
	inc player_score +1
game_loop_incdec942
	; LineNumber: 1281
game_loop_elsedoneblock936
	; LineNumber: 1282
game_loop_elsedoneblock919
	; LineNumber: 1283
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx key_left
	ldy key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_localfailed958
	jmp game_loop_ConditionalTrueBlock944
game_loop_localfailed958: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	; Assigning register : _xy
	ldx n_key_left
	ldy n_key_left+1
	jsr Key_Pressed
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq game_loop_elsedoneblock946
game_loop_ConditionalTrueBlock944: ;Main true block ;keep 
	; LineNumber: 1284
	; LineNumber: 1285
	; Binary clause Simplified: GREATEREQUAL
	lda frog_x
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcc game_loop_elsedoneblock963
game_loop_ConditionalTrueBlock961: ;Main true block ;keep 
	; LineNumber: 1286
	; LineNumber: 1287
	dec frog_x
	; LineNumber: 1288
	inc player_score
	bne game_loop_incdec969
	inc player_score +1
game_loop_incdec969
	; LineNumber: 1289
game_loop_elsedoneblock963
	; LineNumber: 1290
game_loop_elsedoneblock946
	; LineNumber: 1293
	
; // So different things can move at own speeds
	inc GAME_TICKS
	lda GAME_TICKS
	cmp #$a ; keep
	bne game_loop_incmax971
	lda #$1
	sta GAME_TICKS
game_loop_incmax971
	; LineNumber: 1296
	
; // Show the obstacles in new positions
	jsr show_obstacles
	; LineNumber: 1299
	
; // "Collision detection"
	jsr check_collisions
	; LineNumber: 1302
	; Binary clause Simplified: LESS
	lda player_lives
	; Compare with pure num / var optimization
	cmp #$1;keep
	bcs game_loop_elsedoneblock975
game_loop_ConditionalTrueBlock973: ;Main true block ;keep 
	; LineNumber: 1303
	; LineNumber: 1305
	
; // Still alive?
; // Dead and didn't win :(
	; Assigning single variable : ALIVE
	lda #$0
	; Calling storevariable
	sta ALIVE
	; LineNumber: 1307
game_loop_elsedoneblock975
	; LineNumber: 1312
	; Binary clause Simplified: NOTEQUALS
	lda frog_x
	; Compare with pure num / var optimization
	cmp frog_old_x;keep
	beq game_loop_localfailed983
	jmp game_loop_ConditionalTrueBlock979
game_loop_localfailed983: ;keep
	; ; logical OR, second chance
	; Binary clause Simplified: NOTEQUALS
	lda frog_y
	; Compare with pure num / var optimization
	cmp frog_old_y;keep
	beq game_loop_elsedoneblock981
game_loop_ConditionalTrueBlock979: ;Main true block ;keep 
	; LineNumber: 1313
	; LineNumber: 1314
	
; // only undraw if different
	; Assigning single variable : x
	lda frog_old_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_old_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<previous_tile
	ldx #>previous_tile
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1315
	; Assigning single variable : previous_tile
	; Assigning single variable : sx
	lda frog_x
	; Calling storevariable
	sta sx
	; Assigning single variable : sy
	lda frog_y
	; Calling storevariable
	sta sy
	jsr getat
	; Calling storevariable
	sta previous_tile
	; LineNumber: 1316
game_loop_elsedoneblock981
	; LineNumber: 1319
	; Binary clause Simplified: GREATEREQUAL
	lda frog_y
	; Compare with pure num / var optimization
	cmp #$b;keep
	bcc game_loop_elseblock987
game_loop_ConditionalTrueBlock986: ;Main true block ;keep 
	; LineNumber: 1320
	; LineNumber: 1321
	
; // draw the frog because things might have changed onscreen
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharA
	ldx #>frogcharA
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1323
	jmp game_loop_elsedoneblock988
game_loop_elseblock987
	; LineNumber: 1324
	; LineNumber: 1325
	; Assigning single variable : x
	lda frog_x
	; Calling storevariable
	sta x
	; Assigning single variable : y
	lda frog_y
	; Calling storevariable
	sta y
	; Assigning single variable : this_str
	lda #<frogcharB
	ldx #>frogcharB
	sta this_str
	stx this_str+1
	; Assigning single variable : str_len
	lda #$1
	; Calling storevariable
	sta str_len
	jsr textat
	; LineNumber: 1326
game_loop_elsedoneblock988
	; LineNumber: 1331
	
; // Score and lives
	; MoveTo optimization
	lda #$09
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1331
	; integer assignment NodeVar
	ldy player_score+1 ; Next one
	lda player_score
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$3 ; optimized, look out for bugs
game_loop_printdecimal993
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal993
	; LineNumber: 1333
	; MoveTo optimization
	lda #$24
	sta screenmemory
	lda #>$8000
	clc
	adc #$00
	sta screenmemory+1
	; LineNumber: 1333
	ldy #0
	lda player_lives
	sta ipd_div_lo
	sty ipd_div_hi
	ldy #$1 ; optimized, look out for bugs
game_loop_printdecimal994
	jsr init_printdecimal_div10 
	ora #$30
	sta (screenmemory),y
	dey
	bpl game_loop_printdecimal994
	; LineNumber: 1337
	jmp game_loop_while719
game_loop_elsedoneblock722
game_loop_loopend724
	; LineNumber: 1339
	rts
block1
	; LineNumber: 1341
	; LineNumber: 1343
	; Assigning memory location
	; Assigning single variable : $8000
	; Integer constant assigning
	ldy #$80
	lda #$00
	; Calling storevariable
	sta $8000
	; LineNumber: 1344
	; Assigning single variable : screenmemory
	ldx #$80
	sta screenmemory
	stx screenmemory+1
	; LineNumber: 1345
	jsr cls
	; LineNumber: 1347
	; Assigning single variable : is_80
	lda #$0
	; Calling storevariable
	sta is_80
	; LineNumber: 1348
	; Assigning single variable : is_80
	jsr is_80_columns
	; Calling storevariable
	sta is_80
	; LineNumber: 1349
	jsr cursor_down
	; LineNumber: 1350
	jsr cursor_return
	; LineNumber: 1351
	jsr uppercase
	; LineNumber: 1352
	jsr cursor_graphic
	; LineNumber: 1354
	; Binary clause Simplified: EQUALS
	lda is_80
	; Compare with pure num / var optimization
	cmp #$1;keep
	bne MainProgram_elsedoneblock998
MainProgram_ConditionalTrueBlock996: ;Main true block ;keep 
	; LineNumber: 1355
	; LineNumber: 1356
	; Assigning single variable : _ptr
	lda #<sorry_80
	ldx #>sorry_80
	sta _ptr
	stx _ptr+1
	jsr basic_print
	; LineNumber: 1357
	jmp * ; loop like (�/%
	; LineNumber: 1358
MainProgram_elsedoneblock998
	; LineNumber: 1360
MainProgram_while1001
MainProgram_loopstart1005
	; Binary clause Simplified: NOTEQUALS
	lda #$1
	; Compare with pure num / var optimization
	cmp #$0;keep
	beq MainProgram_elsedoneblock1004
MainProgram_ConditionalTrueBlock1002: ;Main true block ;keep 
	; LineNumber: 1361
	; LineNumber: 1362
	jsr title_screen
	; LineNumber: 1363
	jsr init_vars
	; LineNumber: 1364
	jsr game_loop
	; LineNumber: 1365
	jsr score_screen
	; LineNumber: 1366
	jmp MainProgram_while1001
MainProgram_elsedoneblock1004
MainProgram_loopend1006
	; LineNumber: 1370
	; End of program
	; Ending memory block
EndBlock410
score_screen_stringassignstr391	.dc "                       ",0
score_screen_stringassignstr393	.dc "                       ",0
